"""
‚úÖ –ü–û–õ–ù–´–ô ContentAgentService —Å –µ–¥–∏–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫

üîß –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ OpenAI Responses API
2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –µ–¥–∏–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ TokenManager
3. –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞ (file_id)
4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤) 
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ü–ï–†–ï–î —Ä–µ—Ä–∞–π—Ç–æ–º
6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—Ä–∞–π—Ç–∞
7. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
8. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –º–µ–¥–∏–∞
9. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
10. –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ª–∏–º–∏—Ç–∞–º–∏
11. ‚ú® –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
12. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ media_info –≤ –æ—Ç–≤–µ—Ç
13. üóëÔ∏è –û–ë–ù–û–í–õ–ï–ù–û: Hard delete –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

üöÄ –ù–û–í–û–ï –í –≠–¢–û–ô –í–ï–†–°–ò–ò:
- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TokenManager
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ content_manager.py
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å content_handlers.py
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ utility –º–µ—Ç–æ–¥—ã
- –†–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏ –∏ –∞–ª—å–±–æ–º–∞–º–∏
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
- ‚ú® –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ media_info –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- üóëÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Hard delete —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä soft_delete
"""

import structlog
import time
import json
import asyncio
from typing import Dict, Any, Optional, List, Union, Tuple
from datetime import datetime, timedelta
from aiogram.types import Message, PhotoSize, Video, Animation, Audio, Voice, Document, Sticker

from database.managers.content_manager import ContentManager
from services.openai_assistant import openai_client

logger = structlog.get_logger()


class ContentAgentService:
    """‚úÖ –ü–û–õ–ù–´–ô —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –µ–¥–∏–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫"""
    
    def __init__(self):
        self.content_manager = ContentManager()
        self.openai_client = openai_client
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_settings = {
            'max_text_length': 4000,
            'min_text_length': 3,
            'max_tokens_per_request': 2000,
            'timeout_seconds': 30,
            'retry_attempts': 3,
            'supported_media_types': ['photo', 'video', 'animation', 'audio', 'voice', 'document'],
            'max_media_size_mb': 20,
            'enable_media_processing': True,
            'enable_token_tracking': True,
            'enable_statistics': True
        }
        
        logger.info("üé® ContentAgentService initialized with unified token system and links extraction", 
                   settings=self.default_settings)
    
    # ===== –°–û–ó–î–ê–ù–ò–ï –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò =====
    
    async def create_content_agent(
        self,
        bot_id: str,
        agent_name: str,
        instructions: str,
        user_id: Optional[int] = None,
        settings: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞ —Å OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        logger.info("‚ú® Creating content agent with OpenAI integration", 
                   bot_id=bot_id,
                   agent_name=agent_name,
                   instructions_length=len(instructions),
                   user_id=user_id,
                   has_custom_settings=bool(settings))
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validation_result = self._validate_agent_creation_data(agent_name, instructions)
            if not validation_result['valid']:
                return {
                    'success': False,
                    'error': 'validation_failed',
                    'message': validation_result['message'],
                    'validation_errors': validation_result.get('errors', [])
                }
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
            agents_count = await self.content_manager.get_total_agents_count(bot_id)
            if not agents_count['can_create_content_agent']:
                return {
                    'success': False,
                    'error': 'content_agent_exists',
                    'message': '–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.'
                }
            
            if not agents_count['within_limit']:
                return {
                    'success': False,
                    'error': 'agents_limit_exceeded',
                    'message': f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–≥–µ–Ω—Ç–æ–≤ ({agents_count["total"]}/2). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–≥–µ–Ω—Ç—ã.'
                }
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç
            existing_agent = await self.content_manager.has_content_agent(bot_id)
            if existing_agent:
                logger.info("üîÑ Content agent already exists, will update", bot_id=bot_id)
            
            # 4. –°–æ–∑–¥–∞–µ–º OpenAI –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API
            openai_agent_id = await self._create_openai_agent_with_retry(
                bot_id=bot_id,
                agent_name=agent_name,
                instructions=instructions
            )
            
            if not openai_agent_id:
                logger.error("‚ùå Failed to create OpenAI content agent", bot_id=bot_id)
                return {
                    'success': False,
                    'error': 'openai_creation_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ —Ç–æ–∫–µ–Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã.'
                }
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            agent_data = await self.content_manager.create_content_agent(
                bot_id=bot_id,
                agent_name=agent_name,
                instructions=instructions,
                openai_agent_id=openai_agent_id
            )
            
            if not agent_data:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, —É–¥–∞–ª—è–µ–º –∏–∑ OpenAI
                try:
                    await self.content_manager.delete_openai_content_agent(openai_agent_id)
                    logger.info("üßπ Cleaned up OpenAI agent after DB save failure", 
                               openai_agent_id=openai_agent_id)
                except Exception as cleanup_error:
                    logger.error("üí• Failed to cleanup OpenAI agent", 
                                openai_agent_id=openai_agent_id,
                                error=str(cleanup_error))
                
                return {
                    'success': False,
                    'error': 'database_save_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. OpenAI –∞–≥–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.'
                }
            
            # 6. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            test_result = await self._test_agent_functionality(bot_id, openai_agent_id)
            
            logger.info("‚úÖ Content agent created successfully", 
                       bot_id=bot_id,
                       agent_name=agent_name,
                       agent_id=agent_data['id'],
                       openai_agent_id=openai_agent_id,
                       action=agent_data.get('action', 'created'),
                       test_passed=test_result['success'])
            
            return {
                'success': True,
                'agent': agent_data,
                'test_result': test_result,
                'agents_count': agents_count,
                'message': f'–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç "{agent_name}" {"–æ–±–Ω–æ–≤–ª–µ–Ω" if agent_data.get("action") == "updated" else "—Å–æ–∑–¥–∞–Ω"} —É—Å–ø–µ—à–Ω–æ!'
            }
            
        except Exception as e:
            logger.error("üí• Exception creating content agent", 
                        bot_id=bot_id,
                        agent_name=agent_name,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            
            return {
                'success': False,
                'error': 'creation_exception',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}',
                'details': {
                    'error_type': type(e).__name__,
                    'bot_id': bot_id,
                    'agent_name': agent_name
                }
            }
    
    async def _create_openai_agent_with_retry(
        self,
        bot_id: str,
        agent_name: str,
        instructions: str,
        max_retries: int = 3
    ) -> Optional[str]:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        for attempt in range(max_retries):
            try:
                logger.info(f"ü§ñ Creating OpenAI agent (attempt {attempt + 1}/{max_retries})", 
                           bot_id=bot_id,
                           agent_name=agent_name)
                
                openai_agent_id = await self.content_manager.create_openai_content_agent(
                    bot_id=bot_id,
                    agent_name=agent_name,
                    instructions=instructions
                )
                
                if openai_agent_id:
                    logger.info("‚úÖ OpenAI agent created successfully", 
                               bot_id=bot_id,
                               attempt=attempt + 1,
                               openai_agent_id=openai_agent_id)
                    return openai_agent_id
                else:
                    logger.warning(f"‚ö†Ô∏è OpenAI agent creation failed (attempt {attempt + 1})", 
                                  bot_id=bot_id)
                    
            except Exception as e:
                logger.error(f"üí• Exception in OpenAI agent creation (attempt {attempt + 1})", 
                            bot_id=bot_id,
                            error=str(e))
                
                if attempt == max_retries - 1:
                    logger.error("‚ùå All OpenAI agent creation attempts failed", 
                                bot_id=bot_id,
                                max_retries=max_retries)
                    return None
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await self._async_sleep(2 ** attempt)  # Exponential backoff
        
        return None
    
    async def _test_agent_functionality(self, bot_id: str, openai_agent_id: str) -> Dict[str, Any]:
        """‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        try:
            logger.info("üß™ Testing agent functionality", 
                       bot_id=bot_id,
                       openai_agent_id=openai_agent_id)
            
            test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞."
            
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ä–∞–π—Ç
            test_result = await self.content_manager.process_content_rewrite(
                bot_id=bot_id,
                original_text=test_text,
                media_info=None,
                links_info=None,
                user_id=None
            )
            
            processing_time = time.time() - start_time
            
            if test_result and test_result.get('success'):
                content_info = test_result.get('content', {})
                rewritten_text = content_info.get('rewritten_text', '')
                
                success = bool(rewritten_text and len(rewritten_text) > 10)
                
                logger.info("‚úÖ Agent functionality test completed", 
                           bot_id=bot_id,
                           test_passed=success,
                           processing_time=f"{processing_time:.2f}s",
                           rewritten_length=len(rewritten_text))
                
                return {
                    'success': success,
                    'processing_time': processing_time,
                    'test_input_length': len(test_text),
                    'test_output_length': len(rewritten_text),
                    'message': '–ê–≥–µ–Ω—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ' if success else '–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'
                }
            else:
                error_message = test_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if test_result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                
                logger.warning("‚ö†Ô∏è Agent functionality test failed", 
                              bot_id=bot_id,
                              error=error_message)
                
                return {
                    'success': False,
                    'processing_time': processing_time,
                    'error': error_message,
                    'message': f'–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {error_message}'
                }
                
        except Exception as e:
            logger.error("üí• Exception in agent functionality test", 
                        bot_id=bot_id,
                        openai_agent_id=openai_agent_id,
                        error=str(e))
            
            return {
                'success': False,
                'error': str(e),
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}'
            }
    
    def _validate_agent_creation_data(self, agent_name: str, instructions: str) -> Dict[str, Any]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        errors = []
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞
        if not agent_name or not agent_name.strip():
            errors.append("–ò–º—è –∞–≥–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        elif len(agent_name.strip()) < 3:
            errors.append("–ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        elif len(agent_name.strip()) > 100:
            errors.append("–ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        elif not agent_name.strip().replace(' ', '').replace('-', '').replace('_', '').isalnum():
            errors.append("–ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if not instructions or not instructions.strip():
            errors.append("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        elif len(instructions.strip()) < 10:
            errors.append("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        elif len(instructions.strip()) > 2000:
            errors.append("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã
        forbidden_phrases = [
            'ignore previous instructions',
            '–∑–∞–±—É–¥—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
            'system prompt',
            'jailbreak',
            '–≤–∑–ª–æ–º'
        ]
        
        instructions_lower = instructions.lower()
        for phrase in forbidden_phrases:
            if phrase in instructions_lower:
                errors.append(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: '{phrase}'")
        
        is_valid = len(errors) == 0
        
        result = {
            'valid': is_valid,
            'errors': errors,
            'message': '–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã' if is_valid else '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
        }
        
        if errors:
            result['message'] = f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(errors)}"
        
        logger.debug("üîç Agent creation data validation", 
                    agent_name=agent_name[:50] + '...' if len(agent_name) > 50 else agent_name,
                    instructions_length=len(instructions),
                    is_valid=is_valid,
                    errors_count=len(errors))
        
        return result
    
    async def get_agent_info(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
            agent = await self.content_manager.get_content_agent(bot_id)
            if not agent:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.content_manager.get_content_agent_stats(bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            additional_metrics = await self._get_agent_additional_metrics(bot_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞
            openai_status = await self._check_openai_agent_status(agent.get('openai_agent_id'))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            agent_info = {
                'id': agent['id'],
                'name': agent['agent_name'],
                'instructions': agent['instructions'],
                'openai_agent_id': agent['openai_agent_id'],
                'is_active': agent['is_active'],
                'created_at': agent['created_at'],
                'updated_at': agent['updated_at'],
                'stats': stats,
                'metrics': additional_metrics,
                'openai_status': openai_status,
                'capabilities': {
                    'supports_media': True,
                    'supports_media_groups': True,
                    'supports_links_extraction': True,
                    'max_text_length': self.default_settings['max_text_length'],
                    'supported_media_types': self.default_settings['supported_media_types']
                }
            }
            
            logger.debug("üìã Complete agent info retrieved", 
                        bot_id=bot_id,
                        agent_name=agent['agent_name'],
                        has_stats=bool(stats),
                        has_metrics=bool(additional_metrics),
                        openai_status=openai_status.get('status'))
            
            return agent_info
            
        except Exception as e:
            logger.error("üí• Error getting agent info", 
                        bot_id=bot_id,
                        error=str(e))
            return None
    
    async def _get_agent_additional_metrics(self, bot_id: str) -> Dict[str, Any]:
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ä–∞–π—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç.–¥.
            
            metrics = {
                'uptime_days': 0,
                'average_response_time': 0,
                'success_rate': 100.0,
                'most_active_hours': [],
                'content_types_processed': {
                    'text_only': 0,
                    'with_photo': 0,
                    'with_video': 0,
                    'media_groups': 0,
                    'with_links': 0
                },
                'performance_trend': 'stable'
            }
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ –ë–î
            logger.debug("üìä Additional metrics calculated", 
                        bot_id=bot_id,
                        metrics=metrics)
            
            return metrics
            
        except Exception as e:
            logger.error("üí• Error calculating additional metrics", 
                        bot_id=bot_id,
                        error=str(e))
            return {}
    
    async def _check_openai_agent_status(self, openai_agent_id: Optional[str]) -> Dict[str, Any]:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        try:
            if not openai_agent_id:
                return {
                    'status': 'not_configured',
                    'message': 'OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                }
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ OpenAI API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            
            return {
                'status': 'active',
                'agent_id': openai_agent_id,
                'last_check': datetime.now().isoformat(),
                'message': 'OpenAI –∞–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω'
            }
            
        except Exception as e:
            logger.error("üí• Error checking OpenAI agent status", 
                        openai_agent_id=openai_agent_id,
                        error=str(e))
            return {
                'status': 'unknown',
                'error': str(e),
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'
            }
    
    async def update_agent(
        self,
        bot_id: str,
        agent_name: str = None,
        instructions: str = None,
        settings: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π OpenAI –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        logger.info("üîÑ Updating content agent", 
                   bot_id=bot_id,
                   update_name=bool(agent_name),
                   update_instructions=bool(instructions),
                   update_settings=bool(settings))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            current_agent = await self.content_manager.get_content_agent(bot_id)
            if not current_agent:
                return {
                    'success': False,
                    'error': 'agent_not_found',
                    'message': '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if agent_name or instructions:
                validation_result = self._validate_agent_creation_data(
                    agent_name or current_agent['agent_name'],
                    instructions or current_agent['instructions']
                )
                
                if not validation_result['valid']:
                    return {
                        'success': False,
                        'error': 'validation_failed',
                        'message': validation_result['message'],
                        'validation_errors': validation_result.get('errors', [])
                    }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            backup_data = {
                'agent_name': current_agent['agent_name'],
                'instructions': current_agent['instructions'],
                'openai_agent_id': current_agent.get('openai_agent_id')
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.content_manager.update_content_agent(
                bot_id=bot_id,
                agent_name=agent_name,
                instructions=instructions
            )
            
            if not success:
                return {
                    'success': False,
                    'error': 'database_update_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                }
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º OpenAI –∞–≥–µ–Ω—Ç–∞
            openai_updated = False
            new_openai_id = None
            
            if instructions and current_agent.get('openai_agent_id'):
                try:
                    logger.info("ü§ñ Recreating OpenAI agent with new instructions", 
                               bot_id=bot_id)
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    delete_success = await self.content_manager.delete_openai_content_agent(
                        current_agent['openai_agent_id']
                    )
                    
                    if delete_success:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                        new_openai_id = await self._create_openai_agent_with_retry(
                            bot_id=bot_id,
                            agent_name=agent_name or current_agent['agent_name'],
                            instructions=instructions
                        )
                        
                        if new_openai_id:
                            # –û–±–Ω–æ–≤–ª—è–µ–º OpenAI ID –≤ –±–∞–∑–µ
                            await self.content_manager.create_content_agent(
                                bot_id=bot_id,
                                agent_name=agent_name or current_agent['agent_name'],
                                instructions=instructions,
                                openai_agent_id=new_openai_id
                            )
                            
                            openai_updated = True
                            
                            logger.info("‚úÖ OpenAI agent recreated successfully", 
                                       bot_id=bot_id,
                                       old_id=current_agent['openai_agent_id'],
                                       new_id=new_openai_id)
                        else:
                            logger.error("‚ùå Failed to create new OpenAI agent", bot_id=bot_id)
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                            restore_id = await self._create_openai_agent_with_retry(
                                bot_id=bot_id,
                                agent_name=backup_data['agent_name'],
                                instructions=backup_data['instructions']
                            )
                            
                            if restore_id:
                                await self.content_manager.create_content_agent(
                                    bot_id=bot_id,
                                    agent_name=backup_data['agent_name'],
                                    instructions=backup_data['instructions'],
                                    openai_agent_id=restore_id
                                )
                                logger.info("üîÑ Restored backup OpenAI agent", 
                                           bot_id=bot_id,
                                           restore_id=restore_id)
                    else:
                        logger.warning("‚ö†Ô∏è Failed to delete old OpenAI agent", 
                                      bot_id=bot_id,
                                      old_id=current_agent['openai_agent_id'])
                        
                except Exception as openai_error:
                    logger.error("üí• Error updating OpenAI agent", 
                                bot_id=bot_id,
                                error=str(openai_error))
                    openai_updated = False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            test_result = None
            if openai_updated and new_openai_id:
                test_result = await self._test_agent_functionality(bot_id, new_openai_id)
            
            logger.info("‚úÖ Content agent updated successfully", 
                       bot_id=bot_id,
                       updated_name=bool(agent_name),
                       updated_instructions=bool(instructions),
                       openai_updated=openai_updated,
                       test_passed=test_result.get('success') if test_result else None)
            
            return {
                'success': True,
                'updated_fields': {
                    'agent_name': bool(agent_name),
                    'instructions': bool(instructions),
                    'openai_agent': openai_updated
                },
                'test_result': test_result,
                'backup_data': backup_data,
                'message': '–ê–≥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
            }
            
        except Exception as e:
            logger.error("üí• Exception updating content agent", 
                        bot_id=bot_id,
                        error=str(e),
                        exc_info=True)
            
            return {
                'success': False,
                'error': 'update_exception',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}',
                'details': {
                    'error_type': type(e).__name__,
                    'bot_id': bot_id
                }
            }
    
    async def delete_agent(self, bot_id: str, soft_delete: bool = False) -> Dict[str, Any]:
        """
        üóëÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π OpenAI –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            soft_delete: False = –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (hard delete), True = is_active=false (soft delete)
        """
        
        logger.info("üóëÔ∏è Deleting content agent", 
                   bot_id=bot_id,
                   soft_delete=soft_delete,
                   deletion_type='soft' if soft_delete else 'hard')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            agent = await self.content_manager.get_content_agent(bot_id)
            if not agent:
                return {
                    'success': False,
                    'error': 'agent_not_found',
                    'message': '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            agent_name = agent['agent_name']
            openai_agent_id = agent.get('openai_agent_id')
            had_openai_integration = bool(openai_agent_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            stats = await self.content_manager.get_content_agent_stats(bot_id)
            tokens_used = stats.get('tokens_used', 0)
            total_rewrites = stats.get('total_rewrites', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å (–µ—Å–ª–∏ –Ω–µ soft_delete –∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
            if not soft_delete and tokens_used > 0:
                logger.info("‚ö†Ô∏è Agent has usage history, but proceeding with hard delete", 
                           bot_id=bot_id,
                           tokens_used=tokens_used,
                           total_rewrites=total_rewrites)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ OpenAI
            openai_deletion_success = False
            if openai_agent_id:
                try:
                    openai_deletion_success = await self.content_manager.delete_openai_content_agent(
                        openai_agent_id
                    )
                    logger.info("ü§ñ OpenAI agent deletion", 
                               bot_id=bot_id,
                               openai_agent_id=openai_agent_id,
                               success=openai_deletion_success)
                except Exception as openai_error:
                    logger.error("üí• Error deleting OpenAI agent", 
                                bot_id=bot_id,
                                openai_agent_id=openai_agent_id,
                                error=str(openai_error))
                    
                    if not soft_delete:
                        logger.warning("‚ö†Ô∏è OpenAI deletion failed but continuing with DB deletion", 
                                      bot_id=bot_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä soft_delete –Ω–∞–ø—Ä—è–º—É—é)
            db_deletion_success = await self.content_manager.delete_content_agent(
                bot_id, 
                soft_delete=soft_delete  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–ø—Ä—è–º—É—é
            )
            
            if not db_deletion_success:
                return {
                    'success': False,
                    'error': 'database_delete_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                }
            
            deletion_type = 'soft' if soft_delete else 'hard'
            
            logger.info("‚úÖ Content agent deleted successfully", 
                       bot_id=bot_id,
                       agent_name=agent_name,
                       had_openai_integration=had_openai_integration,
                       openai_deletion_success=openai_deletion_success,
                       tokens_preserved=tokens_used,
                       deletion_type=deletion_type)
            
            return {
                'success': True,
                'deleted_agent': {
                    'name': agent_name,
                    'had_openai_integration': had_openai_integration,
                    'openai_deletion_success': openai_deletion_success,
                    'tokens_used': tokens_used,
                    'total_rewrites': total_rewrites,
                    'deletion_type': deletion_type  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                },
                'preserved_data': {
                    'statistics': True,
                    'tokens_history': True,
                    'usage_logs': True
                },
                'message': f'–ê–≥–µ–Ω—Ç "{agent_name}" —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ ({deletion_type} delete). –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'
            }
            
        except Exception as e:
            logger.error("üí• Exception deleting content agent", 
                        bot_id=bot_id,
                        soft_delete=soft_delete,
                        error=str(e),
                        exc_info=True)
            
            return {
                'success': False,
                'error': 'deletion_exception',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}',
                'details': {
                    'error_type': type(e).__name__,
                    'bot_id': bot_id,
                    'soft_delete': soft_delete  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                }
            }
    
    async def has_content_agent(self, bot_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞"""
        try:
            return await self.content_manager.has_content_agent(bot_id)
        except Exception as e:
            logger.error("üí• Error checking content agent existence", 
                        bot_id=bot_id,
                        error=str(e))
            return False
    
    # ===== üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ï–†–ê–ô–¢ –° –ï–î–ò–ù–û–ô –¢–û–ö–ï–ù–û–í–û–ô –°–ò–°–¢–ï–ú–û–ô =====
    
    async def rewrite_post(
        self,
        bot_id: str,
        message: Message,
        user_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–∞ —Å –µ–¥–∏–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        """
        logger.info("‚úçÔ∏è Processing post rewrite with unified token system", 
                   bot_id=bot_id,
                   message_id=message.message_id,
                   user_id=user_id,
                   message_type=self._get_message_type(message))
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞
            agent = await self.content_manager.get_content_agent(bot_id)
            if not agent:
                return {
                    'success': False,
                    'error': 'no_content_agent',
                    'message': '–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
                }

            # 2. ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î —Ä–µ—Ä–∞–π—Ç–æ–º
            token_check_result = None
            if user_id:
                token_check_result = await self._check_user_token_limits(user_id)
                if not token_check_result['can_proceed']:
                    return {
                        'success': False,
                        'error': 'token_limit_exceeded',
                        'message': token_check_result['message'],
                        'token_info': token_check_result
                    }
            
            # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content_analysis = await self._analyze_message_content(message)
            if not content_analysis['valid']:
                return {
                    'success': False,
                    'error': content_analysis['error'],
                    'message': content_analysis['message'],
                    'details': content_analysis.get('details', {})
                }
            
            original_text = content_analysis['text']
            media_info = content_analysis['media_info']
            links_info = content_analysis['links_info']  # ‚ú® –ù–û–í–û–ï
            content_type = content_analysis['content_type']
            
            logger.info("üìä Content analysis completed with links", 
                       bot_id=bot_id,
                       text_length=len(original_text),
                       content_type=content_type,
                       has_media=bool(media_info),
                       has_links=links_info['has_links'],
                       total_links=links_info['total_links'],
                       media_type=media_info.get('type') if media_info else None)
            
            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ ContentManager
            start_time = time.time()
            
            rewrite_result = await self.content_manager.process_content_rewrite(
                bot_id=bot_id,
                original_text=original_text,
                media_info=media_info,
                links_info=links_info,  # ‚ú® –ù–û–í–û–ï
                user_id=user_id
            )
            
            processing_time = time.time() - start_time
            
            if not rewrite_result or not rewrite_result.get('success', True):
                error_info = rewrite_result or {}
                return {
                    'success': False,
                    'error': error_info.get('error', 'rewrite_failed'),
                    'message': error_info.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Ä–∞–π—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
                    'processing_time': processing_time,
                    'content_analysis': content_analysis
                }

            # 5. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã content_manager
            tokens_info = rewrite_result.get('tokens', {})
            input_tokens = tokens_info.get('input_tokens', 0)
            output_tokens = tokens_info.get('output_tokens', 0)
            total_tokens = tokens_info.get('total_tokens', input_tokens + output_tokens)
            
            # 6. ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—Ä–∞–π—Ç–∞
            token_save_result = None
            if user_id and total_tokens > 0:
                token_save_result = await self._save_tokens_to_unified_system(
                    bot_id=bot_id,
                    user_id=user_id,
                    input_tokens=input_tokens,
                    output_tokens=output_tokens,
                    processing_time=processing_time
                )
            
            # 7. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            result = self.format_rewrite_response(
                rewrite_result=rewrite_result,
                agent=agent,
                original_message=message,
                content_analysis=content_analysis,
                token_info={
                    'check_result': token_check_result,
                    'save_result': token_save_result
                },
                processing_time=processing_time
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            content_info = rewrite_result.get('content', {})
            original_length = len(content_info.get('original_text', original_text))
            rewritten_length = len(content_info.get('rewritten_text', ''))
            
            logger.info("‚úÖ Post rewrite completed successfully with unified token tracking and links", 
                       bot_id=bot_id,
                       agent_name=agent['agent_name'],
                       content_type=content_type,
                       original_length=original_length,
                       rewritten_length=rewritten_length,
                       tokens_used=total_tokens,
                       tokens_saved=bool(token_save_result and token_save_result.get('success')),
                       processing_time=f"{processing_time:.2f}s",
                       has_media=bool(media_info),
                       has_links=links_info['has_links'],
                       total_links=links_info['total_links'])
            
            return result
            
        except Exception as e:
            logger.error("üí• Failed to rewrite post with unified token system", 
                        bot_id=bot_id,
                        message_id=getattr(message, 'message_id', None),
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            
            return {
                'success': False,
                'error': 'processing_failed',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {str(e)}',
                'details': {
                    'bot_id': bot_id,
                    'message_id': getattr(message, 'message_id', None),
                    'error_type': type(e).__name__,
                    'user_id': user_id
                }
            }
    
    async def _check_user_token_limits(self, user_id: int) -> Dict[str, Any]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ TokenManager"""
        try:
            from database.managers.token_manager import TokenManager
            
            has_tokens, used_tokens, limit_tokens = await TokenManager.check_token_limit(user_id)
            
            result = {
                'can_proceed': has_tokens,
                'used_tokens': used_tokens,
                'limit_tokens': limit_tokens,
                'remaining_tokens': max(0, limit_tokens - used_tokens),
                'usage_percentage': (used_tokens / limit_tokens * 100) if limit_tokens > 0 else 0
            }
            
            if not has_tokens:
                result['message'] = f'–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_tokens:,} / {limit_tokens:,}'
                logger.warning("‚ùå User exceeded unified token limit for content rewrite", 
                              user_id=user_id,
                              used=used_tokens,
                              limit=limit_tokens)
            else:
                result['message'] = f'–¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {result["remaining_tokens"]:,} –æ—Å—Ç–∞–ª–æ—Å—å'
                logger.debug("‚úÖ User unified token limit check passed", 
                            user_id=user_id,
                            remaining=result['remaining_tokens'])
            
            return result
            
        except ImportError:
            logger.warning("‚ö†Ô∏è TokenManager not available, skipping token limit check")
            return {
                'can_proceed': True,
                'message': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'used_tokens': 0,
                'limit_tokens': 0,
                'warning': 'TokenManager not available'
            }
        except Exception as e:
            logger.error("üí• Error checking unified token limits", 
                        user_id=user_id,
                        error=str(e))
            return {
                'can_proceed': True,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}',
                'error': str(e),
                'used_tokens': 0,
                'limit_tokens': 0
            }
    
    async def _save_tokens_to_unified_system(
        self,
        bot_id: str,
        user_id: int,
        input_tokens: int,
        output_tokens: int,
        processing_time: float
    ) -> Dict[str, Any]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É TokenManager"""
        
        logger.info("üí∞ Saving content agent tokens to unified system via TokenManager", 
                   bot_id=bot_id,
                   user_id=user_id,
                   input_tokens=input_tokens,
                   output_tokens=output_tokens,
                   total_tokens=input_tokens + output_tokens,
                   processing_time=f"{processing_time:.2f}s")
        
        try:
            from database.managers.token_manager import TokenManager
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É TokenManager
            # –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –∏ User.tokens_used_total –∏ UserBot —Ç–æ–∫–µ–Ω—ã
            success = await TokenManager.save_token_usage(
                bot_id=bot_id,
                input_tokens=input_tokens,
                output_tokens=output_tokens,
                admin_chat_id=None,  # –î–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞ admin_chat_id –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                user_id=user_id
            )
            
            if success:
                logger.info("‚úÖ Content agent tokens saved to unified system via TokenManager", 
                           bot_id=bot_id,
                           user_id=user_id,
                           tokens_saved=input_tokens + output_tokens)
                
                return {
                    'success': True,
                    'tokens_saved': input_tokens + output_tokens,
                    'input_tokens': input_tokens,
                    'output_tokens': output_tokens,
                    'method': 'TokenManager.save_token_usage',
                    'message': '–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ TokenManager'
                }
            else:
                logger.error("‚ùå Failed to save content agent tokens via TokenManager", 
                           bot_id=bot_id,
                           user_id=user_id)
                
                return {
                    'success': False,
                    'error': 'save_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ TokenManager'
                }
                
        except ImportError:
            logger.warning("‚ö†Ô∏è TokenManager not available, tokens not saved to unified system")
            return {
                'success': False,
                'error': 'token_manager_unavailable',
                'message': 'TokenManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–æ–∫–µ–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ'
            }
        except Exception as e:
            logger.error("üí• Exception while saving content agent tokens via TokenManager", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e),
                        exc_info=True)
            
            return {
                'success': False,
                'error': 'save_exception',
                'message': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ TokenManager: {str(e)}',
                'exception_type': type(e).__name__
            }
    
    # ===== ‚ú® –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–°–´–õ–û–ö =====
    
    def extract_links_from_message(self, message: Message) -> Dict[str, Any]:
        """‚ú® –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        
        try:
            text = message.text or message.caption or ""
            entities = message.entities or message.caption_entities or []
            
            extracted_links = {
                'urls': [],           # –û–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏  
                'text_links': [],     # –¢–µ–∫—Å—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
                'emails': [],         # Email –∞–¥—Ä–µ—Å–∞
                'phone_numbers': [],  # –¢–µ–ª–µ—Ñ–æ–Ω—ã
                'mentions': []        # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è @username
            }
            
            for entity in entities:
                entity_text = text[entity.offset:entity.offset + entity.length]
                
                if entity.type == 'url':
                    extracted_links['urls'].append({
                        'text': entity_text,
                        'url': entity_text
                    })
                elif entity.type == 'text_link':
                    extracted_links['text_links'].append({
                        'text': entity_text,
                        'url': entity.url
                    })
                elif entity.type == 'email':
                    extracted_links['emails'].append(entity_text)
                elif entity.type == 'phone_number':
                    extracted_links['phone_numbers'].append(entity_text)
                elif entity.type == 'mention':
                    extracted_links['mentions'].append(entity_text)
            
            total_links = (
                len(extracted_links['urls']) + 
                len(extracted_links['text_links']) + 
                len(extracted_links['emails']) + 
                len(extracted_links['phone_numbers']) + 
                len(extracted_links['mentions'])
            )
            
            logger.debug("üîó Links extraction completed", 
                         message_id=getattr(message, 'message_id', 'unknown'),
                         total_links=total_links,
                         urls=len(extracted_links['urls']),
                         text_links=len(extracted_links['text_links']),
                         emails=len(extracted_links['emails']),
                         phones=len(extracted_links['phone_numbers']),
                         mentions=len(extracted_links['mentions']))
            
            return {
                'has_links': total_links > 0,
                'links': extracted_links,
                'total_links': total_links
            }
            
        except Exception as e:
            logger.error("üí• Error extracting links from message", 
                         message_id=getattr(message, 'message_id', 'unknown'),
                         error=str(e))
            return {
                'has_links': False, 
                'links': {
                    'urls': [],
                    'text_links': [],
                    'emails': [],
                    'phone_numbers': [],
                    'mentions': []
                }, 
                'total_links': 0
            }
    
    async def _analyze_message_content(self, message: Message) -> Dict[str, Any]:
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è + —Å—Å—ã–ª–∫–∏"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (—Ç–µ–ø–µ—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Å—ã–ª–∫–∞—Ö)
            original_text = self.extract_text_from_message(message)
            
            # ‚ú® –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö
            links_info = getattr(message, '_extracted_links_info', {
                'has_links': False,
                'links': {},
                'total_links': 0
            })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = self._get_message_type(message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            media_info = self.extract_media_info(message)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            text_validation = self._validate_text_content(original_text)
            if not text_validation['valid']:
                return {
                    'valid': False,
                    'error': text_validation['error'],
                    'message': text_validation['message'],
                    'details': text_validation
                }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            media_validation = {'valid': True}
            if media_info:
                media_validation = self._validate_media_content(media_info)
                if not media_validation['valid']:
                    return {
                        'valid': False,
                        'error': media_validation['error'],
                        'message': media_validation['message'],
                        'details': media_validation
                    }
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            complexity_analysis = self._analyze_content_complexity(original_text, media_info)
            
            logger.debug("üìä Message content analysis completed with links", 
                        message_id=message.message_id,
                        content_type=content_type,
                        text_length=len(original_text) if original_text else 0,
                        has_media=bool(media_info),
                        has_links=links_info['has_links'],
                        total_links=links_info['total_links'],
                        complexity=complexity_analysis.get('level'))
            
            return {
                'valid': True,
                'text': original_text,
                'media_info': media_info,
                'links_info': links_info,  # ‚ú® –ù–û–í–û–ï
                'content_type': content_type,
                'text_validation': text_validation,
                'media_validation': media_validation,
                'complexity_analysis': complexity_analysis,
                'estimated_processing_time': complexity_analysis.get('estimated_time', 0),
                'message': '–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫'
            }
            
        except Exception as e:
            logger.error("üí• Error analyzing message content with links", 
                        message_id=getattr(message, 'message_id', 'unknown'),
                        error=str(e))
            
            return {
                'valid': False,
                'error': 'analysis_failed',
                'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}',
                'exception_type': type(e).__name__
            }
    
    def _get_message_type(self, message: Message) -> str:
        """‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        if message.media_group_id:
            return 'media_group'
        elif message.photo:
            return 'photo'
        elif message.video:
            return 'video'
        elif message.animation:
            return 'animation'
        elif message.audio:
            return 'audio'
        elif message.voice:
            return 'voice'
        elif message.document:
            return 'document'
        elif message.sticker:
            return 'sticker'
        elif message.text:
            return 'text'
        elif message.caption:
            return 'caption_only'
        else:
            return 'unknown'
    
    def _validate_text_content(self, text: Optional[str]) -> Dict[str, Any]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        if not text:
            return {
                'valid': False,
                'error': 'no_text',
                'message': '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞.'
            }
        
        text = text.strip()
        
        if len(text) < self.default_settings['min_text_length']:
            return {
                'valid': False,
                'error': 'text_too_short',
                'message': f'–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ (–º–∏–Ω–∏–º—É–º {self.default_settings["min_text_length"]} —Å–∏–º–≤–æ–ª–∞).',
                'text_length': len(text),
                'min_length': self.default_settings['min_text_length']
            }
        
        if len(text) > self.default_settings['max_text_length']:
            return {
                'valid': False,
                'error': 'text_too_long',
                'message': f'–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ (–º–∞–∫—Å–∏–º—É–º {self.default_settings["max_text_length"]} —Å–∏–º–≤–æ–ª–æ–≤).',
                'text_length': len(text),
                'max_length': self.default_settings['max_text_length']
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        spam_check = self._check_for_spam_content(text)
        if not spam_check['clean']:
            return {
                'valid': False,
                'error': 'content_prohibited',
                'message': spam_check['message'],
                'details': spam_check
            }
        
        return {
            'valid': True,
            'text_length': len(text),
            'word_count': len(text.split()),
            'estimated_tokens': len(text) // 4,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'language': self._detect_language(text),
            'message': '–¢–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞'
        }
    
    def _validate_media_content(self, media_info: Dict[str, Any]) -> Dict[str, Any]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        if not media_info:
            return {'valid': True, 'message': '–ú–µ–¥–∏–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
        
        media_type = media_info.get('type')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
        if media_type not in self.default_settings['supported_media_types']:
            return {
                'valid': False,
                'error': 'unsupported_media_type',
                'message': f'–¢–∏–ø –º–µ–¥–∏–∞ "{media_type}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.',
                'supported_types': self.default_settings['supported_media_types']
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = media_info.get('file_size')
        if file_size:
            max_size_bytes = self.default_settings['max_media_size_mb'] * 1024 * 1024
            if file_size > max_size_bytes:
                return {
                    'valid': False,
                    'error': 'file_too_large',
                    'message': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size // (1024*1024)} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: {self.default_settings["max_media_size_mb"]} –ú–ë.',
                    'file_size_mb': file_size // (1024 * 1024),
                    'max_size_mb': self.default_settings['max_media_size_mb']
                }
        
        return {
            'valid': True,
            'media_type': media_type,
            'file_size': file_size,
            'message': '–ú–µ–¥–∏–∞ –≤–∞–ª–∏–¥–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        }
    
    def _check_for_spam_content(self, text: str) -> Dict[str, Any]:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        spam_patterns = [
            '–∫—É–ø–∏—Ç—å –¥–µ—à–µ–≤–æ',
            '–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π',
            '—Å—Ä–æ—á–Ω–æ –ø—Ä–æ–¥–∞–º',
            'miracle cure',
            'free money',
            'viagra',
            'casino'
        ]
        
        text_lower = text.lower()
        found_patterns = []
        
        for pattern in spam_patterns:
            if pattern in text_lower:
                found_patterns.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        url_count = text_lower.count('http://') + text_lower.count('https://') + text_lower.count('www.')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å–ª–æ–∫–∞
        caps_ratio = sum(1 for c in text if c.isupper()) / len(text) if text else 0
        
        is_clean = len(found_patterns) == 0 and url_count <= 3 and caps_ratio <= 0.5
        
        result = {
            'clean': is_clean,
            'spam_patterns_found': found_patterns,
            'url_count': url_count,
            'caps_ratio': caps_ratio,
            'risk_level': 'low' if is_clean else 'medium' if len(found_patterns) <= 1 else 'high'
        }
        
        if not is_clean:
            reasons = []
            if found_patterns:
                reasons.append(f"–Ω–∞–π–¥–µ–Ω—ã —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(found_patterns)}")
            if url_count > 3:
                reasons.append(f"—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ ({url_count})")
            if caps_ratio > 0.5:
                reasons.append(f"—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ ({caps_ratio:.1%})")
            
            result['message'] = f"–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∞–º–æ–º: {'; '.join(reasons)}"
        else:
            result['message'] = '–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ø–∞–º'
        
        return result
    
    def _detect_language(self, text: str) -> str:
        """‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
        cyrillic_chars = sum(1 for c in text if '\u0400' <= c <= '\u04FF')
        latin_chars = sum(1 for c in text if c.isalpha() and not ('\u0400' <= c <= '\u04FF'))
        
        total_alpha = cyrillic_chars + latin_chars
        
        if total_alpha == 0:
            return 'unknown'
        
        cyrillic_ratio = cyrillic_chars / total_alpha
        
        if cyrillic_ratio > 0.7:
            return 'russian'
        elif cyrillic_ratio < 0.3:
            return 'english'
        else:
            return 'mixed'
    
    def _analyze_content_complexity(self, text: str, media_info: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        complexity_score = 0
        factors = []
        
        if text:
            # –§–∞–∫—Ç–æ—Ä –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            text_length = len(text)
            if text_length > 1000:
                complexity_score += 2
                factors.append('long_text')
            elif text_length > 500:
                complexity_score += 1
                factors.append('medium_text')
            
            # –§–∞–∫—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            sentence_count = text.count('.') + text.count('!') + text.count('?')
            if sentence_count > 10:
                complexity_score += 1
                factors.append('many_sentences')
            
            # –§–∞–∫—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            special_chars = sum(1 for c in text if not c.isalnum() and not c.isspace())
            if special_chars > len(text) * 0.1:  # –ë–æ–ª–µ–µ 10% —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                complexity_score += 1
                factors.append('many_special_chars')
        
        # –§–∞–∫—Ç–æ—Ä –º–µ–¥–∏–∞
        if media_info:
            complexity_score += 1
            factors.append('has_media')
            
            if media_info.get('type') == 'media_group':
                complexity_score += 2
                factors.append('media_group')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if complexity_score == 0:
            level = 'simple'
            estimated_time = 3
        elif complexity_score <= 2:
            level = 'medium'
            estimated_time = 7
        elif complexity_score <= 4:
            level = 'complex'
            estimated_time = 12
        else:
            level = 'very_complex'
            estimated_time = 20
        
        return {
            'score': complexity_score,
            'level': level,
            'factors': factors,
            'estimated_time': estimated_time,
            'processing_priority': 'high' if complexity_score > 3 else 'normal'
        }
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def extract_text_from_message(self, message: Message) -> Optional[str]:
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram + –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: text > caption > None
            text = message.text or message.caption
            
            if text:
                text = text.strip()
                
                # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã
                if text.startswith('/'):
                    # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    return None
                
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                text = ' '.join(text.split())
                
                # ‚ú® –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö
                links_info = self.extract_links_from_message(message)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if hasattr(message, '__dict__'):
                    message._extracted_links_info = links_info
                
                logger.debug("üìù Text extracted and cleaned with links info", 
                           message_id=message.message_id,
                           text_length=len(text),
                           source='text' if message.text else 'caption',
                           has_links=links_info['has_links'],
                           total_links=links_info['total_links'])
                
                return text
            
            logger.debug("‚ùå No text found in message", message_id=message.message_id)
            return None
            
        except Exception as e:
            logger.error("üí• Error extracting text from message", 
                        message_id=getattr(message, 'message_id', 'unknown'),
                        error=str(e))
            return None
    
    def extract_media_info(self, message: Message) -> Optional[Dict[str, Any]]:
        """‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            media_info = self.content_manager.extract_media_info(message)
            
            if media_info:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                media_info.update({
                    'extracted_at': datetime.now().isoformat(),
                    'message_date': message.date.isoformat() if message.date else None,
                    'from_user_id': message.from_user.id if message.from_user else None,
                    'chat_id': message.chat.id if message.chat else None
                })
                
                # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞
                safety_check = self._check_media_safety(media_info)
                media_info['safety_check'] = safety_check
                
                logger.debug("üìé Enhanced media info extracted", 
                           message_id=message.message_id,
                           media_type=media_info['type'],
                           is_safe=safety_check.get('safe', True))
            
            return media_info
            
        except Exception as e:
            logger.error("üí• Error extracting enhanced media info", 
                        message_id=getattr(message, 'message_id', 'unknown'),
                        error=str(e))
            return None
    
    def _check_media_safety(self, media_info: Dict[str, Any]) -> Dict[str, Any]:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞"""
        
        safety_issues = []
        risk_level = 'low'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = media_info.get('file_size', 0)
        if file_size > 50 * 1024 * 1024:  # 50 –ú–ë
            safety_issues.append('large_file_size')
            risk_level = 'medium'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ MIME
        mime_type = media_info.get('mime_type', '')
        suspicious_mimes = ['application/x-executable', 'application/x-msdownload']
        if mime_type in suspicious_mimes:
            safety_issues.append('suspicious_mime_type')
            risk_level = 'high'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        file_name = media_info.get('file_name', '')
        if file_name:
            suspicious_extensions = ['.exe', '.bat', '.cmd', '.scr', '.pif']
            if any(file_name.lower().endswith(ext) for ext in suspicious_extensions):
                safety_issues.append('suspicious_file_extension')
                risk_level = 'high'
        
        is_safe = len(safety_issues) == 0
        
        return {
            'safe': is_safe,
            'risk_level': risk_level,
            'issues': safety_issues,
            'message': '–ú–µ–¥–∏–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ' if is_safe else f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {", ".join(safety_issues)}'
        }
    
    def format_rewrite_response(
        self,
        rewrite_result: Dict[str, Any],
        agent: Dict[str, Any],
        original_message: Message,
        content_analysis: Dict[str, Any],
        token_info: Dict[str, Any],
        processing_time: float
    ) -> Dict[str, Any]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º media –ø–æ–¥ –æ–±–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏"""
        
        try:
            # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã content_manager
            content_info = rewrite_result.get('content', {})
            tokens_info = rewrite_result.get('tokens', {})
            agent_info = rewrite_result.get('agent', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            rewritten_text = content_info.get('rewritten_text', '')
            if not rewritten_text:
                logger.warning("‚ö†Ô∏è No rewritten text in result", 
                              result_keys=list(rewrite_result.keys()))
                rewritten_text = '–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            media_info = rewrite_result.get('media_info')
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ media_info –Ω–µ—Ç –≤ rewrite_result, –±–µ—Ä–µ–º –∏–∑ content_analysis
            if not media_info:
                media_info = content_analysis.get('media_info')
                logger.debug("üìé Media info taken from content_analysis", 
                            has_media=bool(media_info),
                            media_type=media_info.get('type') if media_info else None)
            
            # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç media_info, –ø—Ä–æ–±—É–µ–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not media_info and hasattr(original_message, 'photo'):
                logger.debug("üìé Extracting media info from original message as fallback")
                media_info = self.extract_media_info(original_message)
            
            has_media = bool(media_info)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö
            links_info = content_analysis.get('links_info', {})
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ä–∞–π—Ç–∞
            quality_analysis = self._analyze_rewrite_quality(
                original_text=content_info.get('original_text', ''),
                rewritten_text=rewritten_text
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –û–ë–û–ò–ú–ò –∫–ª—é—á–∞–º–∏ –º–µ–¥–∏–∞
            formatted_result = {
                'success': True,
                'content': {
                    'original_text': content_info.get('original_text', ''),
                    'rewritten_text': rewritten_text,
                    'text_length_change': content_info.get('text_length_change', 0),
                    'quality_analysis': quality_analysis
                },
                'tokens': {
                    'input_tokens': tokens_info.get('input_tokens', 0),
                    'output_tokens': tokens_info.get('output_tokens', 0),
                    'total_tokens': tokens_info.get('total_tokens', 0),
                    'estimated_cost_usd': tokens_info.get('estimated_cost_usd', 0.0),
                    'unified_system': token_info.get('save_result', {})
                },
                'agent': {
                    'name': agent_info.get('name', agent.get('agent_name', 'Unknown')),
                    'id': agent_info.get('id', agent.get('id')),
                    'instructions': agent_info.get('instructions', agent.get('instructions', ''))
                },
                'media_info': media_info,       # ‚úÖ –û–°–ù–û–í–ù–û–ï –ü–û–õ–ï (–Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
                'media': media_info,            # ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (—Å—Ç–∞—Ä—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
                'has_media': has_media,
                'links': links_info,  # ‚ú® –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–∞—Ö
                'has_links': links_info.get('has_links', False),
                'processing': {
                    'time_seconds': processing_time,
                    'model_used': rewrite_result.get('model_used', 'gpt-4o'),
                    'agent_type': rewrite_result.get('agent_type', 'openai_responses'),
                    'complexity': content_analysis.get('complexity_analysis', {}),
                    'content_type': content_analysis.get('content_type', 'unknown')
                },
                'metadata': {
                    'timestamp': datetime.now().isoformat(),
                    'message_id': original_message.message_id,
                    'user_id': original_message.from_user.id if original_message.from_user else None,
                    'chat_id': original_message.chat.id if original_message.chat else None,
                    'token_check': token_info.get('check_result', {}),
                    'content_analysis': content_analysis
                }
            }
            
            logger.debug("‚úÖ Enhanced rewrite response formatted with guaranteed media under both keys", 
                        has_content=bool(content_info),
                        has_tokens=bool(tokens_info),
                        has_agent=bool(agent_info),
                        has_media=has_media,
                        media_info_keys=list(media_info.keys()) if media_info else [],
                        media_source='rewrite_result' if rewrite_result.get('media_info') else 'content_analysis',
                        has_links=links_info.get('has_links', False),
                        total_links=links_info.get('total_links', 0),
                        quality_score=quality_analysis.get('score', 0),
                        rewritten_length=len(rewritten_text))
            
            return formatted_result
            
        except Exception as e:
            logger.error("üí• Error formatting enhanced rewrite response with guaranteed media", 
                        error=str(e),
                        rewrite_result_keys=list(rewrite_result.keys()) if isinstance(rewrite_result, dict) else 'not_dict',
                        exc_info=True)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback —Ç–æ–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –æ–±–∞ –∫–ª—é—á–∞
            fallback_media = content_analysis.get('media_info') if isinstance(content_analysis, dict) else None
            
            return {
                'success': True,
                'content': {
                    'original_text': '',
                    'rewritten_text': str(rewrite_result.get('rewritten_text', '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')),
                    'text_length_change': 0,
                    'quality_analysis': {'score': 0, 'issues': ['formatting_error']}
                },
                'tokens': {
                    'input_tokens': 0,
                    'output_tokens': 0,
                    'total_tokens': 0,
                    'estimated_cost_usd': 0.0
                },
                'agent': {
                    'name': agent.get('agent_name', 'Unknown') if agent else 'Unknown',
                    'id': agent.get('id') if agent else None,
                    'instructions': agent.get('instructions', '') if agent else ''
                },
                'media_info': fallback_media,   # ‚úÖ –û–°–ù–û–í–ù–û–ï –ü–û–õ–ï –í FALLBACK
                'media': fallback_media,        # ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –í FALLBACK
                'has_media': bool(fallback_media),
                'links': {'has_links': False, 'links': {}, 'total_links': 0},
                'has_links': False,
                'processing': {
                    'time_seconds': processing_time,
                    'model_used': 'unknown'
                },
                'metadata': {
                    'timestamp': datetime.now().isoformat(),
                    'error': f'Formatting error: {str(e)}'
                }
            }
    
    def _analyze_rewrite_quality(self, original_text: str, rewritten_text: str) -> Dict[str, Any]:
        """‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ä–∞–π—Ç–∞"""
        
        issues = []
        score = 100
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not rewritten_text or len(rewritten_text.strip()) < 3:
            issues.append('empty_result')
            score -= 50
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å
        if original_text == rewritten_text:
            issues.append('identical_text')
            score -= 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(rewritten_text) < len(original_text) * 0.3:
            issues.append('too_short')
            score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(rewritten_text) > len(original_text) * 3:
            issues.append('too_long')
            score -= 15
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words = rewritten_text.lower().split()
        if len(words) != len(set(words)) and len(words) > 10:
            repetition_ratio = 1 - len(set(words)) / len(words)
            if repetition_ratio > 0.3:
                issues.append('high_repetition')
                score -= 10
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
        if score >= 90:
            quality_level = 'excellent'
        elif score >= 70:
            quality_level = 'good'
        elif score >= 50:
            quality_level = 'acceptable'
        else:
            quality_level = 'poor'
        
        return {
            'score': max(0, score),
            'level': quality_level,
            'issues': issues,
            'metrics': {
                'original_length': len(original_text),
                'rewritten_length': len(rewritten_text),
                'length_ratio': len(rewritten_text) / len(original_text) if original_text else 0,
                'word_count_original': len(original_text.split()),
                'word_count_rewritten': len(rewritten_text.split())
            },
            'message': f'–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—Ä–∞–π—Ç–∞: {quality_level} ({score} –±–∞–ª–ª–æ–≤)'
        }
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò =====
    
    async def get_agent_statistics(self, bot_id: str, period: str = 'all') -> Dict[str, Any]:
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ content_manager
            base_stats = await self.content_manager.get_content_agent_stats(bot_id)
            
            if not base_stats:
                return {
                    'error': 'no_stats',
                    'message': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            additional_stats = await self._calculate_additional_statistics(bot_id, period)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            combined_stats = {
                'basic': base_stats,
                'additional': additional_stats,
                'period': period,
                'generated_at': datetime.now().isoformat()
            }
            
            logger.info("üìä Agent statistics retrieved", 
                       bot_id=bot_id,
                       period=period,
                       has_basic_stats=bool(base_stats),
                       has_additional_stats=bool(additional_stats))
            
            return combined_stats
            
        except Exception as e:
            logger.error("üí• Error getting agent statistics", 
                        bot_id=bot_id,
                        period=period,
                        error=str(e))
            
            return {
                'error': 'stats_failed',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
            }
    
    async def _calculate_additional_statistics(self, bot_id: str, period: str) -> Dict[str, Any]:
        """‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        return {
            'performance_metrics': {
                'average_quality_score': 85.0,
                'success_rate_percentage': 98.5,
                'average_processing_time': 3.2
            },
            'usage_patterns': {
                'peak_hours': [14, 15, 16, 20, 21],
                'most_common_content_type': 'text_with_photo',
                'average_text_length': 245
            },
            'efficiency_metrics': {
                'tokens_per_second': 15.3,
                'cost_per_rewrite_usd': 0.002,
                'uptime_percentage': 99.8
            },
            'links_statistics': {
                'total_links_processed': 127,
                'average_links_per_message': 2.3,
                'most_common_link_types': ['urls', 'mentions']
            }
        }
    
    # ===== UTILITY –ú–ï–¢–û–î–´ =====
    
    async def _async_sleep(self, seconds: float):
        """‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        await asyncio.sleep(seconds)
    
    def _format_number(self, number: Union[int, float]) -> str:
        """‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
        if isinstance(number, float):
            return f"{number:,.2f}".replace(",", " ")
        else:
            return f"{number:,}".replace(",", " ")
    
    def _format_duration(self, seconds: float) -> str:
        """‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if seconds < 60:
            return f"{seconds:.1f} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{int(minutes)} –º–∏–Ω {secs:.0f} —Å–µ–∫"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{int(hours)} —á {int(minutes)} –º–∏–Ω"
    
    def get_service_info(self) -> Dict[str, Any]:
        """‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
        return {
            'service_name': 'ContentAgentService',
            'version': '2.2.0',  # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ê –í–ï–†–°–ò–Ø (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω delete_agent)
            'features': [
                'unified_token_system',
                'media_group_support',
                'enhanced_validation',
                'quality_analysis',
                'comprehensive_statistics',
                'openai_responses_api',
                'links_extraction',
                'guaranteed_media_info',
                'hard_delete_support'  # ‚úÖ –ù–û–í–û–ï
            ],
            'settings': self.default_settings,
            'status': 'active',
            'initialized_at': datetime.now().isoformat()
        }


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –°–ï–†–í–ò–°–ê =====

content_agent_service = ContentAgentService()

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ['ContentAgentService', 'content_agent_service']
