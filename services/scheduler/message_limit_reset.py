"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 00:00 –ú–°–ö
"""
import asyncio
import structlog
from datetime import datetime, timezone, timedelta
from database import db

logger = structlog.get_logger()

class MessageLimitResetScheduler:
    def __init__(self):
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            return
        
        self.running = True
        logger.info("üìÖ Message limit reset scheduler started")
        
        while self.running:
            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞
                msk_tz = timezone(timedelta(hours=3))
                now_msk = datetime.now(msk_tz)
                
                # –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –≤ 00:00 –ú–°–ö
                next_reset = now_msk.replace(hour=0, minute=0, second=0, microsecond=0)
                if next_reset <= now_msk:
                    next_reset += timedelta(days=1)
                
                sleep_seconds = (next_reset - now_msk).total_seconds()
                
                logger.info("‚è∞ Next message limit reset scheduled", 
                           next_reset_msk=next_reset.isoformat(),
                           sleep_seconds=sleep_seconds)
                
                # –°–ø–∏–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
                await asyncio.sleep(sleep_seconds)
                
                if self.running:
                    await self.reset_daily_limits()
                    
            except Exception as e:
                logger.error("üí• Error in message limit reset scheduler", error=str(e))
                await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def reset_daily_limits(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            msk_tz = timezone(timedelta(hours=3))
            reset_time_msk = datetime.now(msk_tz)
            
            logger.info("üîÑ Starting daily message limits reset", 
                       reset_time_msk=reset_time_msk.isoformat())
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π AIUsageLog
            # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
            
            logger.info("‚úÖ Daily message limits reset completed")
            
        except Exception as e:
            logger.error("üí• Error resetting daily message limits", error=str(e))
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("üõë Message limit reset scheduler stopped")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
message_limit_scheduler = MessageLimitResetScheduler()
