"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ–∫–µ–Ω–∞—Ö OpenAI
–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
"""

import structlog
from typing import Optional, Dict, Any
from datetime import datetime
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

logger = structlog.get_logger()


class TokenNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot = bot
        logger.info("TokenNotificationService initialized")
    
    async def send_token_exhausted_notification(
        self, 
        admin_chat_id: int, 
        bot_info: Dict[str, Any],
        token_info: Dict[str, Any]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        
        Args:
            admin_chat_id: Chat ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            bot_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (bot_id, bot_username, agent_name)
            token_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö (tokens_used, tokens_limit, etc.)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üìß Sending token exhausted notification", 
                       admin_chat_id=admin_chat_id,
                       bot_id=bot_info.get('bot_id'),
                       tokens_used=token_info.get('tokens_used', 0))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            bot_username = bot_info.get('bot_username', 'unknown')
            agent_name = bot_info.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
            tokens_used = token_info.get('tokens_used', 0)
            tokens_limit = token_info.get('tokens_limit', 500000)
            last_usage_at = token_info.get('last_usage_at')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            last_usage_text = ""
            if last_usage_at:
                if isinstance(last_usage_at, str):
                    last_usage_text = f"\n<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {last_usage_at}"
                else:
                    last_usage_text = f"\n<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {last_usage_at.strftime('%d.%m.%Y %H:%M')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = f"""
üö® <b>–¢–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!</b>

<b>–ë–æ—Ç:</b> @{bot_username}
<b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name}

üí∞ <b>–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤:</b>
<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {tokens_used:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–õ–∏–º–∏—Ç:</b> {tokens_limit:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ:</b> {(tokens_used - tokens_limit):,} —Ç–æ–∫–µ–Ω–æ–≤{last_usage_text}

‚ùå <b>–ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.

‚ö° <b>–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ

üîî <i>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤.</i>
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=admin_chat_id,
                text=notification_text,
                parse_mode=ParseMode.HTML,
                disable_notification=False  # –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Å–æ –∑–≤—É–∫–æ–º
            )
            
            logger.info("‚úÖ Token exhausted notification sent successfully", 
                       admin_chat_id=admin_chat_id,
                       bot_id=bot_info.get('bot_id'),
                       tokens_used=tokens_used,
                       tokens_limit=tokens_limit)
            
            return True
            
        except TelegramForbiddenError:
            logger.warning("‚ùå Admin blocked bot - cannot send token notification", 
                          admin_chat_id=admin_chat_id,
                          bot_id=bot_info.get('bot_id'))
            return False
            
        except TelegramBadRequest as e:
            logger.error("‚ùå Bad request when sending token notification", 
                        admin_chat_id=admin_chat_id,
                        bot_id=bot_info.get('bot_id'),
                        error=str(e))
            return False
            
        except Exception as e:
            logger.error("üí• Failed to send token exhausted notification", 
                        admin_chat_id=admin_chat_id,
                        bot_id=bot_info.get('bot_id'),
                        error=str(e),
                        exc_info=True)
            return False
    
    async def send_token_warning_notification(
        self, 
        admin_chat_id: int, 
        bot_info: Dict[str, Any],
        token_info: Dict[str, Any],
        warning_threshold: float = 0.9
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        
        Args:
            admin_chat_id: Chat ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            bot_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (bot_id, bot_username, agent_name)
            token_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö (tokens_used, tokens_limit, etc.)
            warning_threshold: –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.9 = 90%)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üìß Sending token warning notification", 
                       admin_chat_id=admin_chat_id,
                       bot_id=bot_info.get('bot_id'),
                       tokens_used=token_info.get('tokens_used', 0),
                       threshold=warning_threshold)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            bot_username = bot_info.get('bot_username', 'unknown')
            agent_name = bot_info.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
            tokens_used = token_info.get('tokens_used', 0)
            tokens_limit = token_info.get('tokens_limit', 500000)
            remaining_tokens = tokens_limit - tokens_used
            usage_percent = (tokens_used / tokens_limit) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if usage_percent >= 95:
                warning_emoji = "üî¥"
                urgency_text = "–ö–†–ò–¢–ò–ß–ù–û"
            elif usage_percent >= 90:
                warning_emoji = "üü°"
                urgency_text = "–í–ù–ò–ú–ê–ù–ò–ï"
            else:
                warning_emoji = "üü¢"
                urgency_text = "–£–í–ï–î–û–ú–õ–ï–ù–ò–ï"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ ~100 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            estimated_messages = remaining_tokens // 100
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = f"""
{warning_emoji} <b>{urgency_text}: –¢–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è!</b>

<b>–ë–æ—Ç:</b> @{bot_username}
<b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name}

üí∞ <b>–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤:</b>
<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {tokens_used:,} —Ç–æ–∫–µ–Ω–æ–≤ ({usage_percent:.1f}%)
<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–õ–∏–º–∏—Ç:</b> {tokens_limit:,} —Ç–æ–∫–µ–Ω–æ–≤

üìä <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b>
<b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å:</b> ~{estimated_messages:,}

‚ö° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

üîî <i>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {warning_threshold*100:.0f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</i>
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=admin_chat_id,
                text=notification_text,
                parse_mode=ParseMode.HTML,
                disable_notification=(usage_percent < 95)  # –¢–∏—Ö–æ –µ—Å–ª–∏ < 95%
            )
            
            logger.info("‚úÖ Token warning notification sent successfully", 
                       admin_chat_id=admin_chat_id,
                       bot_id=bot_info.get('bot_id'),
                       usage_percent=usage_percent,
                       remaining_tokens=remaining_tokens)
            
            return True
            
        except TelegramForbiddenError:
            logger.warning("‚ùå Admin blocked bot - cannot send warning notification", 
                          admin_chat_id=admin_chat_id,
                          bot_id=bot_info.get('bot_id'))
            return False
            
        except TelegramBadRequest as e:
            logger.error("‚ùå Bad request when sending warning notification", 
                        admin_chat_id=admin_chat_id,
                        bot_id=bot_info.get('bot_id'),
                        error=str(e))
            return False
            
        except Exception as e:
            logger.error("üí• Failed to send token warning notification", 
                        admin_chat_id=admin_chat_id,
                        bot_id=bot_info.get('bot_id'),
                        error=str(e),
                        exc_info=True)
            return False
    
    async def send_token_replenished_notification(
        self, 
        admin_chat_id: int, 
        bot_info: Dict[str, Any],
        old_limit: int,
        new_limit: int
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        
        Args:
            admin_chat_id: Chat ID –∞–¥–º–∏–Ω–∞
            bot_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            old_limit: –°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            new_limit: –ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üìß Sending token replenished notification", 
                       admin_chat_id=admin_chat_id,
                       old_limit=old_limit,
                       new_limit=new_limit)
            
            bot_username = bot_info.get('bot_username', 'unknown')
            agent_name = bot_info.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
            added_tokens = new_limit - old_limit
            
            notification_text = f"""
‚úÖ <b>–¢–æ–∫–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!</b>

<b>–ë–æ—Ç:</b> @{bot_username}
<b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name}

üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>
<b>–ë—ã–ª–æ:</b> {old_limit:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{added_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–°—Ç–∞–ª–æ:</b> {new_limit:,} —Ç–æ–∫–µ–Ω–æ–≤

üéâ <b>–ê–≥–µ–Ω—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.

üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤.</i>
"""
            
            await self.bot.send_message(
                chat_id=admin_chat_id,
                text=notification_text,
                parse_mode=ParseMode.HTML,
                disable_notification=True  # –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Ç–∏—Ö–æ
            )
            
            logger.info("‚úÖ Token replenished notification sent successfully", 
                       admin_chat_id=admin_chat_id,
                       added_tokens=added_tokens)
            
            return True
            
        except Exception as e:
            logger.error("üí• Failed to send token replenished notification", 
                        admin_chat_id=admin_chat_id,
                        error=str(e),
                        exc_info=True)
            return False
    
    @staticmethod
    def format_token_info(token_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            token_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
        """
        tokens_used = token_info.get('tokens_used', 0)
        tokens_limit = token_info.get('tokens_limit', 500000)
        remaining_tokens = tokens_limit - tokens_used
        usage_percent = (tokens_used / tokens_limit) * 100 if tokens_limit > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if remaining_tokens <= 0:
            status = "‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã"
        elif usage_percent >= 90:
            status = "‚ö†Ô∏è –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è"
        elif usage_percent >= 70:
            status = "üü° –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
        else:
            status = "‚úÖ –í –Ω–æ—Ä–º–µ"
        
        return f"""
üí∞ <b>–¢–æ–∫–µ–Ω—ã:</b> {status}
<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {tokens_used:,} ({usage_percent:.1f}%)
<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_tokens:,}
<b>–õ–∏–º–∏—Ç:</b> {tokens_limit:,}
"""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
_notification_service: Optional[TokenNotificationService] = None


def get_notification_service(bot: Bot) -> TokenNotificationService:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    Returns:
        TokenNotificationService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    global _notification_service
    
    if _notification_service is None:
        _notification_service = TokenNotificationService(bot)
        logger.info("TokenNotificationService instance created")
    
    return _notification_service


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def send_token_exhausted_notification(
    bot: Bot,
    admin_chat_id: int, 
    bot_info: Dict[str, Any],
    token_info: Dict[str, Any]
) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        admin_chat_id: Chat ID –∞–¥–º–∏–Ω–∞
        bot_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        token_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    service = get_notification_service(bot)
    return await service.send_token_exhausted_notification(admin_chat_id, bot_info, token_info)


async def send_token_warning_notification(
    bot: Bot,
    admin_chat_id: int, 
    bot_info: Dict[str, Any],
    token_info: Dict[str, Any],
    warning_threshold: float = 0.9
) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        admin_chat_id: Chat ID –∞–¥–º–∏–Ω–∞
        bot_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        token_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
        warning_threshold: –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    service = get_notification_service(bot)
    return await service.send_token_warning_notification(admin_chat_id, bot_info, token_info, warning_threshold)
