import asyncio
import uuid
from datetime import datetime
from typing import List, Dict, Any, Optional
import structlog

from aiogram import Bot
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest, TelegramForbiddenError
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio

from config import settings
from database import db
from utils.media_handler import MediaHandler, BroadcastMedia

logger = structlog.get_logger()


class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        
    def is_super_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º"""
        return user_id == settings.super_admin_chat_id
    
    async def get_admin_statistics(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            stats = await db.get_admin_statistics()
            
            if 'error' in stats:
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n{stats['error']}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–§–û–†–ú–´</b>

üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>
‚îú –í—Å–µ–≥–æ: <b>{stats['users']['total']}</b>
‚îú –ù–æ–≤—ã—Ö –∑–∞ 24—á: <b>{stats['users']['new_24h']}</b> 
‚îú –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: <b>{stats['users']['new_7d']}</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{stats['users']['active_subscriptions']}</b>
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫—É: <b>{stats['users']['subscription_rate']}%</b>

ü§ñ <b>–ë–û–¢–´:</b>
‚îú –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: <b>{stats['bots']['total']}</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['bots']['active']}</b>
‚îú –° –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏: <b>{stats['bots']['ai_enabled']}</b>
‚îú –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{stats['bots']['activity_rate']}%</b>
‚îî –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò: <b>{stats['bots']['ai_adoption_rate']}%</b>

üîã <b>–¢–û–ö–ï–ù–´ OPENAI:</b>
‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{stats['tokens']['total_used']:,}</b>
‚îú –û–±—â–∏–π –ª–∏–º–∏—Ç: <b>{stats['tokens']['total_limit']:,}</b>
‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{stats['tokens']['usage_rate']}%</b>
‚îî –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —é–∑–µ—Ä–∞: <b>{stats['tokens']['average_per_user']:,.0f}</b>
"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º
            if stats['top_users']['by_tokens']:
                text += "\nüèÜ <b>–¢–û–ü –ü–û –¢–û–ö–ï–ù–ê–ú:</b>\n"
                for i, user in enumerate(stats['top_users']['by_tokens'][:5], 1):
                    name = user['first_name'] or user['username'] or f"ID{user['user_id']}"
                    text += f"{i}. <b>{name}</b>: {user['tokens_used']:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–æ—Ç–∞–º
            if stats['top_users']['by_bots']:
                text += "\nüèÜ <b>–¢–û–ü –ü–û –ë–û–¢–ê–ú:</b>\n"
                for i, user in enumerate(stats['top_users']['by_bots'][:5], 1):
                    name = user['first_name'] or user['username'] or f"ID{user['user_id']}"
                    text += f"{i}. <b>{name}</b>: {user['bot_count']} –±–æ—Ç–æ–≤\n"
            
            text += f"\n‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.fromisoformat(stats['generated_at']).strftime('%d.%m.%Y %H:%M')}"
            
            return text
            
        except Exception as e:
            logger.error("Failed to format admin statistics", error=str(e))
            return f"‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n{str(e)}"
    
    async def validate_broadcast_media(self, broadcast_media: BroadcastMedia) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        return MediaHandler.validate_media_for_broadcast(broadcast_media)
    
    async def start_admin_broadcast_with_media(self, admin_user_id: int, broadcast_media: BroadcastMedia) -> Dict[str, Any]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞
            validation = await self.validate_broadcast_media(broadcast_media)
            if not validation['valid']:
                return {
                    'success': False,
                    'error': f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞: {'; '.join(validation['errors'])}"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await db.get_all_active_master_bot_users()
            
            if not users:
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'
                }
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            broadcast_log_id = str(uuid.uuid4())
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º –ª–æ–≥–µ
            logger.info("üì® Admin media broadcast started", 
                       admin_user_id=admin_user_id,
                       broadcast_id=broadcast_log_id,
                       total_users=len(users),
                       has_media=broadcast_media.has_media,
                       is_album=broadcast_media.is_album,
                       media_count=broadcast_media.media_count,
                       total_size=validation.get('total_size', 0))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self._execute_media_broadcast(
                users=users,
                broadcast_media=broadcast_media,
                admin_user_id=admin_user_id,
                broadcast_log_id=broadcast_log_id
            ))
            
            return {
                'success': True,
                'total_users': len(users),
                'broadcast_id': broadcast_log_id,
                'media_info': {
                    'has_media': broadcast_media.has_media,
                    'is_album': broadcast_media.is_album,
                    'media_count': broadcast_media.media_count,
                    'total_size': validation['total_size']
                },
                'message': f'–ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            }
            
        except Exception as e:
            logger.error("Failed to start admin media broadcast", 
                        admin_id=admin_user_id,
                        error=str(e))
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}'
            }
    
    async def start_admin_broadcast(self, admin_user_id: int, message_text: str) -> Dict[str, Any]:
        """–ù–∞—á–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        from utils.media_handler import BroadcastMedia
        
        # –°–æ–∑–¥–∞–µ–º BroadcastMedia –∏–∑ —Ç–µ–∫—Å—Ç–∞
        broadcast_media = BroadcastMedia(
            media_items=[],
            text_content=message_text,
            is_album=False
        )
        
        return await self.start_admin_broadcast_with_media(admin_user_id, broadcast_media)
    
    async def _execute_media_broadcast(self, users: List[Dict], broadcast_media: BroadcastMedia, 
                                     admin_user_id: int, broadcast_log_id: str):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å rate limiting"""
        sent_count = 0
        failed_count = 0
        start_time = datetime.now()
        
        media_preview = MediaHandler.get_media_preview_text(broadcast_media)
        
        logger.info("üì® Starting admin media broadcast execution", 
                   total_users=len(users),
                   admin_id=admin_user_id,
                   log_id=broadcast_log_id,
                   has_media=broadcast_media.has_media,
                   is_album=broadcast_media.is_album,
                   media_count=broadcast_media.media_count)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–∞—á–∞–ª–µ
            await self.bot.send_message(
                chat_id=admin_user_id,
                text=f"üì® <b>–ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
                     f"üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}\n"
                     f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n\n"
                     f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...",
                parse_mode="HTML"
            )
            
            # –†–∞—Å—Å—ã–ª–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞
            for i, user in enumerate(users, 1):
                try:
                    success = await self._send_media_to_user(user['user_id'], broadcast_media)
                    
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if i % 100 == 0:
                        progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n" \
                                      f"üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}\n" \
                                      f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}\n" \
                                      f"–û—à–∏–±–æ–∫: {failed_count}\n" \
                                      f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {(i/len(users)*100):.1f}%"
                        
                        await self.bot.send_message(
                            chat_id=admin_user_id,
                            text=progress_text,
                            parse_mode="HTML"
                        )
                    
                except Exception as e:
                    logger.error("Error sending media to user", 
                               user_id=user['user_id'],
                               error=str(e))
                    failed_count += 1
                
                # Rate limiting –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(settings.admin_broadcast_delay)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            final_report = f"""
‚úÖ <b>–ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìé <b>–ö–û–ù–¢–ï–ù–¢:</b> {media_preview}

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢:</b>
‚îú –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent_count}</b>
‚îú –û—à–∏–±–æ–∫: <b>{failed_count}</b>  
‚îú –û–±—â–∏–π –æ—Ö–≤–∞—Ç: <b>{len(users)}</b>
‚îú –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{(sent_count/len(users)*100):.1f}%</b>
‚îî –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{duration:.1f}—Å–µ–∫</b>

üöÄ –†–∞—Å—Å—ã–ª–∫–∞ ID: <code>{broadcast_log_id}</code>
"""
            
            await self.bot.send_message(
                chat_id=admin_user_id,
                text=final_report,
                parse_mode="HTML"
            )
            
            logger.info("‚úÖ Admin media broadcast completed", 
                       total=len(users),
                       sent=sent_count,
                       failed=failed_count,
                       duration=duration,
                       log_id=broadcast_log_id,
                       media_count=broadcast_media.media_count,
                       success_rate=f"{(sent_count/len(users)*100):.1f}%")
            
        except Exception as e:
            logger.error("üí• Admin media broadcast execution failed", 
                        admin_id=admin_user_id,
                        log_id=broadcast_log_id,
                        error=str(e))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É
            try:
                await self.bot.send_message(
                    chat_id=admin_user_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{str(e)}",
                    parse_mode="HTML"
                )
            except Exception:
                pass
    
    async def _send_media_to_user(self, user_id: int, broadcast_media: BroadcastMedia) -> bool:
        """‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if not broadcast_media.has_media:
                if broadcast_media.text_content:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=broadcast_media.text_content,
                        parse_mode="HTML"
                    )
                    return True
                return False
            
            # –ú–µ–¥–∏–∞–∞–ª—å–±–æ–º
            if broadcast_media.is_album and len(broadcast_media.media_items) > 1:
                return await self._send_media_group(user_id, broadcast_media)
            
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞
            elif len(broadcast_media.media_items) == 1:
                return await self._send_single_media(user_id, broadcast_media.media_items[0], broadcast_media.text_content)
            
            return False
            
        except TelegramRetryAfter as e:
            # –ñ–¥–µ–º –ø—Ä–∏ rate limit –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            logger.warning("Rate limit hit in media send, waiting", wait_time=e.retry_after, user_id=user_id)
            await asyncio.sleep(e.retry_after)
            return await self._send_media_to_user(user_id, broadcast_media)
            
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç
            logger.debug("User blocked bot or deleted account", user_id=user_id, error=str(e))
            return False
            
        except Exception as e:
            logger.error("Failed to send media to user", user_id=user_id, error=str(e))
            return False
    
    async def _send_media_group(self, user_id: int, broadcast_media: BroadcastMedia) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–∞–ª—å–±–æ–º"""
        try:
            input_media = []
            
            for i, media_item in enumerate(broadcast_media.media_items[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 –≤ –∞–ª—å–±–æ–º–µ
                # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∞–ª—å–±–æ–º–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ caption
                caption = broadcast_media.text_content if i == 0 else None
                
                if media_item.media_type == 'photo':
                    input_media.append(InputMediaPhoto(
                        media=media_item.file_id,
                        caption=caption,
                        parse_mode="HTML" if caption else None
                    ))
                elif media_item.media_type == 'video':
                    input_media.append(InputMediaVideo(
                        media=media_item.file_id,
                        caption=caption,
                        parse_mode="HTML" if caption else None
                    ))
                elif media_item.media_type == 'document':
                    input_media.append(InputMediaDocument(
                        media=media_item.file_id,
                        caption=caption,
                        parse_mode="HTML" if caption else None
                    ))
                elif media_item.media_type == 'audio':
                    input_media.append(InputMediaAudio(
                        media=media_item.file_id,
                        caption=caption,
                        parse_mode="HTML" if caption else None
                    ))
            
            if input_media:
                await self.bot.send_media_group(
                    chat_id=user_id,
                    media=input_media
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error("Failed to send media group", user_id=user_id, error=str(e))
            return False
    
    async def _send_single_media(self, user_id: int, media_item, caption: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞"""
        try:
            if media_item.media_type == 'photo':
                await self.bot.send_photo(
                    chat_id=user_id,
                    photo=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'video':
                await self.bot.send_video(
                    chat_id=user_id,
                    video=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'document':
                await self.bot.send_document(
                    chat_id=user_id,
                    document=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'audio':
                await self.bot.send_audio(
                    chat_id=user_id,
                    audio=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'voice':
                await self.bot.send_voice(
                    chat_id=user_id,
                    voice=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'video_note':
                await self.bot.send_video_note(
                    chat_id=user_id,
                    video_note=media_item.file_id
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ video_note –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç caption
                if caption:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=caption,
                        parse_mode="HTML"
                    )
            elif media_item.media_type == 'animation':
                await self.bot.send_animation(
                    chat_id=user_id,
                    animation=media_item.file_id,
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
            elif media_item.media_type == 'sticker':
                await self.bot.send_sticker(
                    chat_id=user_id,
                    sticker=media_item.file_id
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ sticker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç caption
                if caption:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=caption,
                        parse_mode="HTML"
                    )
            else:
                return False
            
            return True
            
        except Exception as e:
            logger.error("Failed to send single media", 
                        user_id=user_id, 
                        media_type=media_item.media_type,
                        error=str(e))
            return False
    
    async def get_broadcast_history(self, admin_user_id: int) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                history = await db.get_admin_broadcast_history(limit=10)
            except AttributeError:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                logger.warning("get_admin_broadcast_history method not found in db")
                return """
üì≠ <b>–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏.

üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ª–æ–≥–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
            
            if not history:
                return "üì≠ <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞</b>\n\n–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–æ–∫."
            
            text = "üì® <b>–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö</b>\n\n"
            
            for i, broadcast in enumerate(history, 1):
                created_at = datetime.fromisoformat(broadcast['created_at'])
                data = broadcast.get('data', {})
                recipients = data.get('total_recipients', 0)
                preview = data.get('message_preview', '–ù–µ—Ç –ø—Ä–µ–≤—å—é')
                media_info = data.get('media_info', {})
                status = "‚úÖ" if broadcast.get('success', True) else "‚ùå"
                
                text += f"{status} <b>#{broadcast['id']}</b>\n"
                text += f"üìÖ {created_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"üë• {recipients} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –º–µ–¥–∏–∞
                if media_info.get('has_media'):
                    media_desc = []
                    if media_info.get('is_album'):
                        media_desc.append(f"üì∏ –ê–ª—å–±–æ–º ({media_info.get('media_count', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                    else:
                        media_type = media_info.get('primary_media_type', '–º–µ–¥–∏–∞')
                        try:
                            emoji = MediaHandler._get_media_emoji(media_type)
                            name = MediaHandler._get_media_name_ru(media_type)
                            media_desc.append(f"{emoji} {name}")
                        except:
                            media_desc.append(f"üìé {media_type}")
                    
                    total_size = media_info.get('total_size', 0)
                    if total_size > 0:
                        media_desc.append(f"({total_size / 1024 / 1024:.1f}MB)")
                    
                    text += f"üìé {' '.join(media_desc)}\n"
                
                text += f"üìù {preview}\n\n"
            
            return text
            
        except Exception as e:
            logger.error("Failed to get broadcast history", error=str(e))
            return f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:</b>

{str(e)}

üí° <b>–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</b>
–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏. 
–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ –ª–æ–≥–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
