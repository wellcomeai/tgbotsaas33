"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å UserBot –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚úÖ –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô –ü–û–î–•–û–î: –í—Å—è –ò–ò –ª–æ–≥–∏–∫–∞ –≤ ai_handlers.py
‚úÖ –ß–ò–°–¢–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ê–¥–º–∏–Ω + –ò–ò –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, —Å–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
"""

import asyncio
import re
from datetime import datetime
from typing import Optional, Dict, Any, TYPE_CHECKING
import structlog
from services.notifications import get_notification_service
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from utils.access_control import check_user_access
from database.managers.user_manager import UserManager

from config import settings
from database import db as database

from .handlers import (
    register_admin_handlers,
    register_settings_handlers,
    register_ai_handlers,
    register_funnel_handlers,
    register_channel_handlers,
    register_content_handlers,
    register_mass_broadcast_handlers,
    register_message_limit_handlers  # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
)
from .formatters import MessageFormatter

if TYPE_CHECKING:
    from services.bot_manager import BotManager

logger = structlog.get_logger()


class UserBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, config: dict, bot_manager: 'BotManager'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ –ë–î
            bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤
        """
        self.config = config
        self.bot_manager = bot_manager
        self.bot_id = config['bot_id']
        self.token = config['token']
        self.bot_username = config['bot_username']
        self.owner_user_id = config['user_id']
        
        # Debug: Log owner info
        logger.info("UserBot initialized", 
                   bot_id=self.bot_id, 
                   bot_username=self.bot_username,
                   owner_user_id=self.owner_user_id)
        
        # Bot instances
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.polling_task: Optional[asyncio.Task] = None
        
        # Status tracking
        self.is_running = False
        self.last_activity: Optional[datetime] = None
        self.error_count = 0
        
        # Message configuration
        self.welcome_message = config.get('welcome_message')
        self.welcome_button_text = config.get('welcome_button_text')
        self.confirmation_message = config.get('confirmation_message')
        self.goodbye_message = config.get('goodbye_message')
        self.goodbye_button_text = config.get('goodbye_button_text')
        self.goodbye_button_url = config.get('goodbye_button_url')
        
        # AI Assistant configuration
        self.ai_assistant_id = config.get('ai_assistant_id')
        self.ai_assistant_settings = config.get('ai_assistant_settings', {})
        
        # Extended statistics
        self.stats = {
            'welcome_sent': 0,
            'welcome_blocked': 0,
            'welcome_buttons_sent': 0,
            'confirmation_sent': 0,
            'confirmation_blocked': 0,
            'goodbye_sent': 0,
            'goodbye_blocked': 0,
            'goodbye_buttons_sent': 0,
            'button_clicks': 0,
            'funnel_starts': 0,
            'total_attempts': 0,
            'join_requests_processed': 0,
            'admin_adds_processed': 0,
            'user_chat_id_available': 0,
            'user_chat_id_missing': 0,
            'admin_sessions': 0
        }
    
    async def check_owner_access(self) -> tuple[bool, dict]:
        """‚úÖ –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞"""
        try:
            return await check_user_access(self.owner_user_id, "user_bot_functions")
        except Exception as e:
            logger.error("Failed to check owner access", 
                        bot_id=self.bot_id, 
                        owner_user_id=self.owner_user_id, 
                        error=str(e))
            return False, {'status': 'error', 'error': str(e)}

    async def send_owner_access_denied(self, message_or_callback, status: dict):
        """‚úÖ –ù–û–í–´–ô: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–æ—Ç–∞"""
        from config import settings, Emoji
        
        if status.get('trial_expired'):
            text = f"""
{Emoji.WARNING} <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (@{self.bot_username}) –∑–∞–∫–æ–Ω—á–∏–ª—Å—è 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ Bot Factory.

üíé <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
- –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç Factory
- –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN –∑–∞ {settings.robokassa_payment_amount}‚ÇΩ
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —ç—Ç–æ—Ç –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è≥ <b>–ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞.</b>

üë§ <b>–°–æ–æ–±—â–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã!</b>
"""
        elif status.get('status') == 'expired':
            text = f"""
{Emoji.WARNING} <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>

–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (@{self.bot_username}) –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Bot Factory.

üíé <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
- –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN
- –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.robokassa_payment_amount}‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è

‚è≥ <b>–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –æ–ø–ª–∞—Ç—ã.</b>

üë§ <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏!</b>
"""
        else:
            text = f"""
{Emoji.ERROR} <b>–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
"""
        
        try:
            if hasattr(message_or_callback, 'message'):
                # Callback query
                await message_or_callback.message.answer(text)
            else:
                # Regular message  
                await message_or_callback.answer(text)
                
            logger.info("Access denied message sent to user", 
                       bot_id=self.bot_id,
                       user_id=getattr(message_or_callback, 'from_user', {}).get('id'),
                       reason=status.get('status'))
                       
        except Exception as e:
            logger.error("Failed to send access denied message", 
                        bot_id=self.bot_id, 
                        error=str(e))
    
    def has_ai_agent(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        return bool(self.ai_assistant_id)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting user bot with UNIFIED AI APPROACH", 
                       bot_id=self.bot_id, 
                       bot_username=self.bot_username,
                       owner_user_id=self.owner_user_id)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            self.bot = Bot(
                token=self.token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            bot_info = await self.bot.get_me()
            if bot_info.username != self.bot_username:
                raise ValueError(f"Bot username mismatch: expected {self.bot_username}, got {bot_info.username}")
            
            logger.info("Bot token verified", 
                       bot_id=self.bot_id, 
                       verified_username=bot_info.username)
            
            # ‚úÖ –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self.bot.set_my_commands([
                BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
            ])
            
            logger.info("Bot commands set", bot_id=self.bot_id)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM storage
            self.dp = Dispatcher(storage=MemoryStorage())
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –ò–ò
            self._setup_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ—Ä–æ–Ω–∫—É
            await self._initialize_funnel()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            self.polling_task = asyncio.create_task(self._start_polling())
            self.is_running = True
            self.last_activity = datetime.now()
            
            logger.info(
                "‚úÖ User bot started with UNIFIED AI APPROACH", 
                bot_id=self.bot_id,
                bot_username=self.bot_username,
                owner_user_id=self.owner_user_id,
                has_welcome_button=bool(self.welcome_button_text),
                has_confirmation=bool(self.confirmation_message),
                has_goodbye_button=bool(self.goodbye_button_text),
                has_ai_agent=self.has_ai_agent(),
                ai_unified=True,
                channel_events_only=True,
                message_limits_enabled=True,  # ‚úÖ –ù–û–í–û–ï
                owner_access_control_enabled=True,  # ‚úÖ –ù–û–í–û–ï
                bot_commands_set=True  # ‚úÖ –ù–û–í–û–ï
            )
            
        except Exception as e:
            logger.error(
                "Failed to start user bot", 
                bot_id=self.bot_id,
                error=str(e),
                exc_info=True
            )
            await self._cleanup()
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping user bot", bot_id=self.bot_id)
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É polling
        if self.polling_task:
            self.polling_task.cancel()
            try:
                await self.polling_task
            except asyncio.CancelledError:
                pass
        
        # –û—á–∏—Å—Ç–∫–∞
        await self._cleanup()
        
        logger.info("User bot stopped", bot_id=self.bot_id)
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if self.dp:
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
                if hasattr(self.dp, '_running') and getattr(self.dp, '_running', False):
                    await self.dp.stop_polling()
                
                # –û—á–∏—â–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "Router is already attached"
                if hasattr(self.dp, '_routers'):
                    for router in self.dp._routers:
                        if hasattr(router, 'parent_router'):
                            router.parent_router = None
                    self.dp._routers.clear()
                    
                logger.info("Dispatcher routers cleared", bot_id=self.bot_id)
            except Exception as e:
                logger.warning("Error clearing dispatcher routers", bot_id=self.bot_id, error=str(e))
        
        if self.bot:
            try:
                await self.bot.session.close()
            except Exception as e:
                logger.error("Error closing bot session", bot_id=self.bot_id, error=str(e))
        
        self.bot = None
        self.dp = None
        self.polling_task = None
    
    async def _initialize_funnel(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
        try:
            from services.funnel_manager import funnel_manager
            success = await funnel_manager.initialize_bot_funnel(self.bot_id)
            logger.info("Funnel initialization", bot_id=self.bot_id, success=success)
        except Exception as e:
            logger.error("Failed to initialize funnel", bot_id=self.bot_id, error=str(e))
    
    def _setup_handlers(self):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Setup handlers with OWNER ACCESS CONTROL + UNIFIED AI APPROACH + MESSAGE LIMITS"""
        logger.info("üéØ Setting up handlers with OWNER ACCESS CONTROL + UNIFIED AI APPROACH + MESSAGE LIMITS", bot_id=self.bot_id)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            from services.funnel_manager import funnel_manager
            from services.ai_assistant import ai_client
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            bot_config = {
                'bot': self.bot,
                'bot_id': self.bot_id,
                'bot_username': self.bot_username,
                'owner_user_id': self.owner_user_id,
                'welcome_message': self.welcome_message,
                'welcome_button_text': self.welcome_button_text,
                'confirmation_message': self.confirmation_message,
                'goodbye_message': self.goodbye_message,
                'goodbye_button_text': self.goodbye_button_text,
                'goodbye_button_url': self.goodbye_button_url,
                'ai_assistant_id': self.ai_assistant_id,
                'ai_assistant_settings': self.ai_assistant_settings,
                'stats': self.stats,
                'bot_manager': self.bot_manager
            }
            
            # ‚úÖ –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            access_control = {
                'check_owner_access': self.check_owner_access,
                'send_access_denied': self.send_owner_access_denied
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            deps = {
                'db': database,
                'bot_config': bot_config,
                'funnel_manager': funnel_manager,
                'ai_assistant': ai_client if self.has_ai_agent() else None,
                'formatter': MessageFormatter(),
                'user_bot': self,
                'access_control': access_control  # ‚úÖ –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
            }
            
            # ===== ‚úÖ –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô –ü–û–†–Ø–î–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê =====
            
            # üèÜ 1. –ê–î–ú–ò–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("1Ô∏è‚É£ Registering ADMIN handlers with OWNER ACCESS CONTROL (HIGHEST PRIORITY)", bot_id=self.bot_id)
            register_admin_handlers(self.dp, **deps)
            
            # ü§ñ 2. –í–°–Ø –ò–ò –õ–û–ì–ò–ö–ê - –ê–î–ú–ò–ù + –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–û–ë–™–ï–î–ò–ù–ï–ù–û!) (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("2Ô∏è‚É£ Registering UNIFIED AI handlers with OWNER ACCESS CONTROL (ADMIN + USERS IN ONE)", bot_id=self.bot_id)
            register_ai_handlers(self.dp, **deps)
            
            # üìä 3. –õ–ò–ú–ò–¢–´ –°–û–û–ë–©–ï–ù–ò–ô (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("3Ô∏è‚É£ Registering MESSAGE LIMIT handlers with OWNER ACCESS CONTROL", bot_id=self.bot_id)
            register_message_limit_handlers(self.dp, **deps)
            
            # üìù 4. –ö–û–ù–¢–ï–ù–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("4Ô∏è‚É£ Registering content handlers with OWNER ACCESS CONTROL", bot_id=self.bot_id)
            register_content_handlers(self.dp, **deps)
            
            # ‚öôÔ∏è 5. –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("5Ô∏è‚É£ Registering settings handlers with OWNER ACCESS CONTROL", bot_id=self.bot_id)
            register_settings_handlers(self.dp, **deps)
            
            # üìä 6. –í–û–†–û–ù–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("6Ô∏è‚É£ Registering funnel handlers with OWNER ACCESS CONTROL", bot_id=self.bot_id)
            register_funnel_handlers(self.dp, **deps)
            
            # üì® 7. –ú–ê–°–°–û–í–´–ï –†–ê–°–°–´–õ–ö–ò (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("7Ô∏è‚É£ Registering mass broadcast handlers with OWNER ACCESS CONTROL", bot_id=self.bot_id)
            register_mass_broadcast_handlers(self.dp, **deps)
            
            # üé™ 8. –°–û–ë–´–¢–ò–Ø –ö–ê–ù–ê–õ–ê - –¢–û–õ–¨–ö–û –°–û–ë–´–¢–ò–Ø (–ë–ï–ó –ò–ò –õ–û–ì–ò–ö–ò!) (–° –ö–û–ù–¢–†–û–õ–ï–ú –î–û–°–¢–£–ü–ê)
            logger.info("8Ô∏è‚É£ Registering channel handlers with OWNER ACCESS CONTROL (EVENTS ONLY - NO AI LOGIC)", bot_id=self.bot_id)
            register_channel_handlers(self.dp, **deps)
            
            logger.info("‚úÖ ALL HANDLERS REGISTERED WITH OWNER ACCESS CONTROL + UNIFIED AI APPROACH + MESSAGE LIMITS!", 
                       bot_id=self.bot_id,
                       owner_user_id=self.owner_user_id,
                       total_handlers=8,
                       access_control_enabled=True,  # ‚úÖ –ù–û–í–û–ï
                       admin_first=True,
                       ai_unified_second=True,
                       message_limits_third=True,
                       channel_events_last=True,
                       architecture="UNIFIED_AI_WITH_ACCESS_CONTROL")
            
        except Exception as e:
            logger.error("üí• CRITICAL: Failed to setup unified handlers with owner access control", 
                        bot_id=self.bot_id, 
                        owner_user_id=self.owner_user_id,
                        error=str(e), 
                        exc_info=True)
            raise
    
    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        retry_count = 0
        max_retries = 5
        
        while self.is_running and retry_count < max_retries:
            try:
                logger.info("Starting polling", bot_id=self.bot_id)
                await self.dp.start_polling(
                    self.bot, 
                    handle_signals=False,
                    allowed_updates=["message", "chat_member", "chat_join_request", "callback_query"]
                )
                break
                
            except asyncio.CancelledError:
                break
                
            except Exception as e:
                retry_count += 1
                self.error_count += 1
                
                logger.error(
                    "Polling error", 
                    bot_id=self.bot_id,
                    error=str(e),
                    retry_count=retry_count
                )
                
                if retry_count < max_retries:
                    await asyncio.sleep(min(retry_count * 5, 30))
                else:
                    logger.error("Max retries exceeded", bot_id=self.bot_id)
                    self.is_running = False
                    await database.update_bot_status(self.bot_id, "error", False)
    
    # =====================================================
    # –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–î–ï–†–ñ–ö–ê–ú–ò –ò –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
    # =====================================================
    
    def _parse_delay(self, delay_text: str) -> Optional[float]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Å—ã
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - "5m", "30min", "45 minutes" -> –≤ —á–∞—Å—ã
        - "2h", "3 hours" -> —á–∞—Å—ã
        - "1d", "2 days" -> –≤ —á–∞—Å—ã (24h = 1d)
        - "1w", "2 weeks" -> –≤ —á–∞—Å—ã (168h = 1w)
        - –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ -> –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—ã
        
        Args:
            delay_text: –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
            
        Returns:
            float: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        """
        if not delay_text:
            return None
        
        delay_text = delay_text.strip().lower()
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        patterns = [
            # –ú–∏–Ω—É—Ç—ã: 5m, 30min, 45 minutes
            (r'(\d+(?:\.\d+)?)\s*(?:m|min|minutes?)', lambda x: float(x) / 60),
            # –ß–∞—Å—ã: 2h, 3 hours
            (r'(\d+(?:\.\d+)?)\s*(?:h|hours?)', lambda x: float(x)),
            # –î–Ω–∏: 1d, 2 days
            (r'(\d+(?:\.\d+)?)\s*(?:d|days?)', lambda x: float(x) * 24),
            # –ù–µ–¥–µ–ª–∏: 1w, 2 weeks
            (r'(\d+(?:\.\d+)?)\s*(?:w|weeks?)', lambda x: float(x) * 168),
            # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—ã)
            (r'^(\d+(?:\.\d+)?)$', lambda x: float(x))
        ]
        
        for pattern, converter in patterns:
            match = re.match(pattern, delay_text)
            if match:
                try:
                    value = match.group(1)
                    hours = converter(value)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
                    if 0 <= hours <= 8760:  # –ú–∞–∫—Å–∏–º—É–º –≥–æ–¥
                        return hours
                except (ValueError, IndexError):
                    continue
        
        logger.warning("Could not parse delay", delay_text=delay_text, bot_id=self.bot_id)
        return None
    
    def _format_delay(self, hours: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
            
        Returns:
            str: –ß–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        """
        if hours <= 0:
            return "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
        if hours < 1:
            minutes = int(hours * 60)
            if minutes == 1:
                return "1 –º–∏–Ω—É—Ç–∞"
            elif minutes < 5:
                return f"{minutes} –º–∏–Ω—É—Ç—ã"
            else:
                return f"{minutes} –º–∏–Ω—É—Ç"
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —á–∞—Å–∞—Ö
        elif hours < 24:
            if hours == 1:
                return "1 —á–∞—Å"
            elif hours < 5:
                return f"{int(hours)} —á–∞—Å–∞"
            else:
                return f"{int(hours)} —á–∞—Å–æ–≤"
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–Ω—è—Ö
        elif hours < 168:  # 7 * 24
            days = int(hours / 24)
            if days == 1:
                return "1 –¥–µ–Ω—å"
            elif days < 5:
                return f"{days} –¥–Ω—è"
            else:
                return f"{days} –¥–Ω–µ–π"
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –Ω–µ–¥–µ–ª—è—Ö
        else:
            weeks = int(hours / 168)
            if weeks == 1:
                return "1 –Ω–µ–¥–µ–ª—è"
            elif weeks < 5:
                return f"{weeks} –Ω–µ–¥–µ–ª–∏"
            else:
                return f"{weeks} –Ω–µ–¥–µ–ª—å"
    
    def _format_message(self, template: str, user) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
        - {first_name} - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - {last_name} - —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - {full_name} - –ø–æ–ª–Ω–æ–µ –∏–º—è
        - {username} - username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @)
        - {user_id} - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - {mention} - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            template: –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not template:
            return ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name = getattr(user, 'first_name', '') or ''
            last_name = getattr(user, 'last_name', '') or ''
            username = getattr(user, 'username', '') or ''
            user_id = getattr(user, 'id', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
            variables = {
                'first_name': first_name,
                'last_name': last_name,
                'full_name': f"{first_name} {last_name}".strip() or first_name,
                'username': f"@{username}" if username else '',
                'user_id': str(user_id),
                'mention': f'<a href="tg://user?id={user_id}">{first_name}</a>' if first_name else f"User {user_id}"
            }
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
            formatted_message = template
            for var_name, var_value in variables.items():
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {var}, {{var}}, $var
                formatted_message = formatted_message.replace(f"{{{var_name}}}", var_value)
                formatted_message = formatted_message.replace(f"{{{{{var_name}}}}}", var_value)
                formatted_message = formatted_message.replace(f"${var_name}", var_value)
            
            return formatted_message
            
        except Exception as e:
            logger.error("Error formatting message", 
                        template=template, 
                        user_id=getattr(user, 'id', None),
                        error=str(e),
                        bot_id=self.bot_id)
            return template  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    # =====================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    # =====================================================
    
    async def update_welcome_settings(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if 'welcome_message' in kwargs:
            self.welcome_message = kwargs['welcome_message']
        if 'welcome_button_text' in kwargs:
            self.welcome_button_text = kwargs['welcome_button_text']
        if 'confirmation_message' in kwargs:
            self.confirmation_message = kwargs['confirmation_message']
        
        logger.info("Welcome settings updated in UserBot", bot_id=self.bot_id)
    
    async def update_goodbye_settings(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—â–∞–Ω–∏—è"""
        if 'goodbye_message' in kwargs:
            self.goodbye_message = kwargs['goodbye_message']
        if 'goodbye_button_text' in kwargs:
            self.goodbye_button_text = kwargs['goodbye_button_text']
        if 'goodbye_button_url' in kwargs:
            self.goodbye_button_url = kwargs['goodbye_button_url']
        
        logger.info("Goodbye settings updated in UserBot", bot_id=self.bot_id)
    
    async def update_ai_settings(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        if 'ai_assistant_id' in kwargs:
            self.ai_assistant_id = kwargs['ai_assistant_id']
        if 'ai_assistant_settings' in kwargs:
            self.ai_assistant_settings = kwargs['ai_assistant_settings']
        
        logger.info("AI settings updated in UserBot", bot_id=self.bot_id)
    
    # =====================================================
    # PUBLIC API –ú–ï–¢–û–î–´
    # =====================================================
    
    def get_message_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            **self.stats,
            'success_rate': self._get_success_rate(),
            'blocked_rate': self._get_blocked_rate()
        }
    
    def get_detailed_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            **self.get_message_stats(),
            'bot_info': {
                'bot_id': self.bot_id,
                'bot_username': self.bot_username,
                'owner_user_id': self.owner_user_id,
                'is_running': self.is_running,
                'error_count': self.error_count,
                'last_activity': self.last_activity.isoformat() if self.last_activity else None
            },
            'config': {
                'has_welcome_message': bool(self.welcome_message),
                'has_welcome_button': bool(self.welcome_button_text),
                'has_confirmation_message': bool(self.confirmation_message),
                'has_goodbye_message': bool(self.goodbye_message),
                'has_goodbye_button': bool(self.goodbye_button_text and self.goodbye_button_url),
                'has_ai_agent': self.has_ai_agent()
            }
        }
    
    def update_config(self, new_config: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        self.config = new_config
        self.welcome_message = new_config.get('welcome_message')
        self.welcome_button_text = new_config.get('welcome_button_text')
        self.confirmation_message = new_config.get('confirmation_message')
        self.goodbye_message = new_config.get('goodbye_message')
        self.goodbye_button_text = new_config.get('goodbye_button_text')
        self.goodbye_button_url = new_config.get('goodbye_button_url')
        
        # AI settings
        self.ai_assistant_id = new_config.get('ai_assistant_id')
        self.ai_assistant_settings = new_config.get('ai_assistant_settings', {})
        
        logger.info("Bot config updated", bot_id=self.bot_id)
    
    # =====================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =====================================================
    
    def _get_success_rate(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞"""
        if self.stats['total_attempts'] == 0:
            return 0.0
        
        successful = (self.stats['welcome_sent'] + 
                     self.stats['goodbye_sent'] + 
                     self.stats['confirmation_sent'])
        return (successful / self.stats['total_attempts']) * 100
    
    def _get_blocked_rate(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        if self.stats['total_attempts'] == 0:
            return 0.0
        
        blocked = (self.stats['welcome_blocked'] + 
                  self.stats['goodbye_blocked'] + 
                  self.stats.get('confirmation_blocked', 0))
        return (blocked / self.stats['total_attempts']) * 100
