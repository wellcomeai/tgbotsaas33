"""
Voice Handlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç + –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –ò–ò –∞–≥–µ–Ω—Ç—ã
‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –ò–ò
‚úÖ FSM –ü–û–î–î–ï–†–ñ–ö–ê: –†–∞–±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤
‚úÖ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∞
"""

import structlog
from typing import Optional
from aiogram import Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from services.whisper_service import whisper_service, WhisperServiceError
from ..states import AISettingsStates

logger = structlog.get_logger()


def register_voice_handlers(dp: Dispatcher, **kwargs):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ü–ï–†–ï–î ai_handlers –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≥–æ–ª–æ—Å–∞
    """
    
    logger = structlog.get_logger()
    logger.info("üé§ Registering voice handlers with Whisper integration")
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    user_bot = kwargs.get('user_bot')
    
    logger.info("üé§ Voice handler registration parameters", 
               bot_id=bot_config.get('bot_id', 'unknown'),
               has_db=bool(db),
               has_user_bot=bool(user_bot),
               whisper_available=whisper_service.is_available())
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = VoiceHandler(db, bot_config, user_bot)
        
        # ===== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
        
        # üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞)
        dp.message.register(
            handler.handle_voice_message,
            F.voice,  # ‚úÖ –¢–û–õ–¨–ö–û –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            F.chat.type == "private"  # –¢–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
        )
        
        logger.info("‚úÖ Voice handlers registered successfully", 
                   bot_id=bot_config['bot_id'],
                   total_handlers=1,
                   whisper_integration=True,
                   ai_integration=True)
        
    except Exception as e:
        logger.error("üí• Failed to register voice handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class VoiceHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Whisper + –ò–ò –∞–≥–µ–Ω—Ç—ã"""
    
    def __init__(self, db, bot_config: dict, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.user_bot = user_bot
        self.logger = structlog.get_logger()
        
        self.logger.info("üé§ VoiceHandler initialized with AI integration", 
                        bot_id=self.bot_id,
                        bot_username=self.bot_username,
                        owner_user_id=self.owner_user_id,
                        whisper_available=whisper_service.is_available())
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞"""
        is_owner = user_id == self.owner_user_id
        self.logger.debug("üë§ Owner check for voice", 
                         bot_id=self.bot_id,
                         user_id=user_id,
                         owner_user_id=self.owner_user_id,
                         is_owner=is_owner)
        return is_owner
    
    async def handle_voice_message(self, message: Message, state: FSMContext):
        """
        üé§ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å ‚Üí –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ò–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        user_id = message.from_user.id
        voice_file_id = message.voice.file_id
        voice_duration = message.voice.duration
        
        self.logger.info("üé§ Voice message received", 
                        user_id=user_id,
                        bot_id=self.bot_id,
                        voice_duration=voice_duration,
                        file_id=voice_file_id,
                        is_owner=self._is_owner(user_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Whisper
        if not whisper_service.is_available():
            self.logger.warning("üé§ Whisper service unavailable", 
                              bot_id=self.bot_id,
                              user_id=user_id)
            await message.answer(
                "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
                "Whisper API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏)
        if voice_duration > 300:  # 5 –º–∏–Ω—É—Ç
            await message.answer(
                "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n"
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice_duration // 60}:{voice_duration % 60:02d}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑–±–µ–π—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            f"üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice_duration}—Å\n"
            f"ü§ñ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —á–µ—Ä–µ–∑ Whisper...\n\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 —Å–µ–∫—É–Ω–¥</i>"
        )
        
        try:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcription_result = await whisper_service.transcribe_voice_message(
                bot=message.bot,
                file_id=voice_file_id,
                language="ru"  # –†—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if not transcription_result['success']:
                # –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                error_message = transcription_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                await message.answer(
                    f"üé§ <b>–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞</b>\n\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}\n\n"
                    f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                    f"‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —à—É–º\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                
                self.logger.error("üé§ Voice transcription failed", 
                                bot_id=self.bot_id,
                                user_id=user_id,
                                error=error_message,
                                voice_duration=voice_duration)
                return
            
            transcribed_text = transcription_result['transcription']
            
            if not transcribed_text or len(transcribed_text.strip()) < 2:
                await message.answer(
                    "üé§ <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å</b>\n\n"
                    "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç."
                )
                return
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ü–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            original_text = message.text
            message.text = transcribed_text.strip()
            
            self.logger.info("üé§ ‚úÖ Voice transcribed successfully", 
                           bot_id=self.bot_id,
                           user_id=user_id,
                           voice_duration=voice_duration,
                           transcription_length=len(transcribed_text),
                           transcription_time=transcription_result['timing']['total_time'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n\n"
                f"<i>¬´{transcribed_text}¬ª</i>\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {transcription_result['timing']['total_time']}—Å\n"
                f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –ò–ò –∞–≥–µ–Ω—Ç—É..."
            )
            
            # ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô –ò–ò =====
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å
            current_state = await state.get_state()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ò–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            from .ai_handlers import AIHandler
            
            ai_handler = AIHandler(
                db=self.db,
                bot_config=self.bot_config,
                user_bot=self.user_bot
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if current_state == AISettingsStates.admin_in_ai_conversation:
                # –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò
                self.logger.info("üé§ ‚Üí ü§ñ Delegating to ADMIN AI conversation", 
                               user_id=user_id, bot_id=self.bot_id)
                await ai_handler.handle_admin_ai_conversation(message, state)
                
            elif current_state == AISettingsStates.user_in_ai_conversation:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ò–ò
                self.logger.info("üé§ ‚Üí ü§ñ Delegating to USER AI conversation", 
                               user_id=user_id, bot_id=self.bot_id)
                await ai_handler.handle_user_ai_conversation(message, state)
                
            elif self._is_owner(user_id):
                # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ - –º–æ–∂–µ—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.logger.info("üé§ ‚Üí ü§ñ Delegating to OWNER (no active conversation)", 
                               user_id=user_id, bot_id=self.bot_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å admin –∫–æ–º–∞–Ω–¥—ã)
                await message.answer(
                    f"üé§ ‚û°Ô∏è üìù <b>–ì–æ–ª–æ—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ç–µ–∫—Å—Ç</b>\n\n"
                    f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ò–ò –∞–≥–µ–Ω—Ç—É - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."
                )
                
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
                self.logger.info("üé§ ‚Üí ü§ñ User outside conversation, offering to start", 
                               user_id=user_id, bot_id=self.bot_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ò–ò –∞–≥–µ–Ω—Ç —É –±–æ—Ç–∞
                try:
                    fresh_ai_config = await self.db.get_ai_config(self.bot_id)
                    has_ai_agent = bool(fresh_ai_config and fresh_ai_config.get('enabled'))
                    
                    if has_ai_agent:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="ü§ñ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ò–ò –∞–≥–µ–Ω—Ç—É", callback_data="start_ai_conversation")]
                        ])
                        
                        await message.answer(
                            f"üé§ ‚û°Ô∏è üìù <b>–ì–æ–ª–æ—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ç–µ–∫—Å—Ç:</b>\n\n"
                            f"<i>¬´{transcribed_text}¬ª</i>\n\n"
                            f"–•–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –ò–ò –∞–≥–µ–Ω—Ç—É?",
                            reply_markup=keyboard
                        )
                    else:
                        await message.answer(
                            f"üé§ ‚û°Ô∏è üìù <b>–ì–æ–ª–æ—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ç–µ–∫—Å—Ç:</b>\n\n"
                            f"<i>¬´{transcribed_text}¬ª</i>\n\n"
                            f"–ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
                        )
                        
                except Exception as db_error:
                    self.logger.error("Error checking AI config", error=str(db_error))
                    await message.answer(
                        f"üé§ ‚û°Ô∏è üìù <b>–ì–æ–ª–æ—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ç–µ–∫—Å—Ç:</b>\n\n"
                        f"<i>¬´{transcribed_text}¬ª</i>"
                    )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ö–æ—Ç—è —ç—Ç–æ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            message.text = original_text
            
        except WhisperServiceError as e:
            # Whisper-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            try:
                await processing_msg.delete()
            except:
                pass
            
            await message.answer(
                f"üé§ <b>–û—à–∏–±–∫–∞ Whisper —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            self.logger.error("üé§ Whisper service error", 
                            bot_id=self.bot_id,
                            user_id=user_id,
                            error=str(e))
            
        except Exception as e:
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            try:
                await processing_msg.delete()
            except:
                pass
            
            await message.answer(
                f"üé§ <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            
            self.logger.error("üé§ Unexpected voice processing error", 
                            bot_id=self.bot_id,
                            user_id=user_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

async def handle_start_ai_conversation_callback(callback_query, **kwargs):
    """
    Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ò–ò –∞–≥–µ–Ω—Ç—É" –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    –ú–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ ai_handlers.py
    # –∏–ª–∏ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    pass
