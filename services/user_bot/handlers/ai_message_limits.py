"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤ (OpenAI, ChatForYou, ProTalk)
"""

import structlog
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ..states import AISettingsStates

logger = structlog.get_logger()


class MessageLimitManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, db, bot_config: dict):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        
        # –•—Ä–∞–Ω–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self._ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        logger.info("üìä MessageLimitManager initialized", 
                   bot_id=self.bot_id,
                   owner_user_id=self.owner_user_id)

    # ===== –°–í–û–ô–°–¢–í–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ê–ö–¢–£–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú =====
    
    @property 
    def ai_assistant_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_settings
    
    @ai_assistant_settings.setter
    def ai_assistant_settings(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_settings = value

    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–û–í =====
    
    async def check_daily_message_limit(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("üìä Checking daily message limit", 
                       user_id=user_id,
                       bot_id=self.bot_id)
            
            can_send, used_today, daily_limit = await self.db.check_daily_message_limit(
                self.bot_id, user_id
            )
            
            logger.info("üìä Daily message limit check result", 
                       user_id=user_id,
                       can_send=can_send,
                       used_today=used_today,
                       daily_limit=daily_limit)
            
            if not can_send:
                error_message = f"""
üìä <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_today} / {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π

–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ 00:00 –ú–°–ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!

üí° <i>–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞</i>
"""
                return False, error_message
            
            return True, ""
            
        except Exception as e:
            logger.error("üí• Error checking daily message limit", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return True, ""  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

    async def increment_daily_message_usage(self, user_id: int) -> bool:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("üìà Incrementing daily message usage", 
                       user_id=user_id,
                       bot_id=self.bot_id)
            
            success = await self.db.increment_daily_message_usage(self.bot_id, user_id)
            
            if success:
                logger.info("‚úÖ Daily message usage incremented successfully")
            else:
                logger.error("‚ùå Failed to increment daily message usage")
            
            return success
            
        except Exception as e:
            logger.error("üí• Error incrementing daily message usage", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –õ–ò–ú–ò–¢–û–í =====
    
    async def handle_message_limit_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if callback.from_user.id != self.owner_user_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üìä Showing message limit settings", 
                       user_id=callback.from_user.id,
                       bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
            current_limit = await self.db.get_daily_message_limit(self.bot_id)
            
            limit_text = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if current_limit == 0 else f"{current_limit} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            text = f"""
üìä <b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å</b>

<b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:</b> {limit_text}

–≠—Ç–æ—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞. –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç—É –¥–æ 00:00 –ú–°–ö —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
- –°—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –ò–ò
- –õ–∏–º–∏—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö
- –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
"""
            
            keyboard_buttons = []
            
            if current_limit > 0:
                keyboard_buttons.extend([
                    [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="ai_set_message_limit")],
                    [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="ai_disable_message_limit")]
                ])
            else:
                keyboard_buttons.append([InlineKeyboardButton(text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="ai_set_message_limit")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            logger.info("‚úÖ Message limit settings displayed", 
                       current_limit=current_limit)
            
        except Exception as e:
            logger.error("üí• Error showing message limit settings", 
                        error=str(e),
                        error_type=type(e).__name__)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

    async def handle_set_message_limit(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if callback.from_user.id != self.owner_user_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        logger.info("üìù Setting message limit", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await state.set_state(AISettingsStates.waiting_for_message_limit)
        
        text = """
üìä <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ò–ò –∞–≥–µ–Ω—Ç—É –≤ –¥–µ–Ω—å.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- 10 - –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ª–∏–º–∏—Ç–∞
- 50 - –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
- 100 - –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç

<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ai_message_limit")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_disable_message_limit(self, callback: CallbackQuery):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if callback.from_user.id != self.owner_user_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üö´ Disabling message limit", 
                       user_id=callback.from_user.id,
                       bot_id=self.bot_id)
            
            success = await self.db.set_daily_message_limit(self.bot_id, 0)
            
            if success:
                # ‚úÖ –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
                from database.managers.message_manager import MessageManager
                clear_success = await MessageManager.clear_bot_usage_logs(self.bot_id)
                
                if clear_success:
                    await callback.answer("‚úÖ –õ–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                    logger.info("‚úÖ Message limit disabled and logs cleared")
                else:
                    await callback.answer("‚úÖ –õ–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                    logger.warning("‚ö†Ô∏è Message limit disabled but logs not cleared")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–∏–º–∏—Ç–∞
                await self.handle_message_limit_settings(callback)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞", show_alert=True)
                logger.error("‚ùå Failed to disable message limit")
                
        except Exception as e:
            logger.error("üí• Error disabling message limit", 
                        error=str(e),
                        error_type=type(e).__name__)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞", show_alert=True)

    async def handle_message_limit_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not is_owner_check(message.from_user.id):
            return
        
        logger.info("üìù Processing message limit input", 
                   user_id=message.from_user.id,
                   input_text=message.text,
                   bot_id=self.bot_id)
        
        if message.text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        try:
            limit = int(message.text.strip())
            
            if limit < 0:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0:")
                return
            
            if limit > 10000:
                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 10000). –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
                return
            
            logger.info("‚úÖ Valid message limit input", 
                       limit=limit,
                       user_id=message.from_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç
            success = await self.db.set_daily_message_limit(self.bot_id, limit)
            
            if success:
                if limit == 0:
                    result_text = "‚úÖ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω, —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
                    
                    # ‚úÖ –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ = 0
                    from database.managers.message_manager import MessageManager
                    await MessageManager.clear_bot_usage_logs(self.bot_id)
                else:
                    result_text = f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å"
                
                # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–∏–º–∏—Ç–∞", callback_data="ai_message_limit")],
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
                
                await message.answer(result_text, reply_markup=keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                agent_type = self.ai_assistant_settings.get('agent_type', 'none')
                if agent_type == 'openai':
                    if 'openai_settings' not in self.ai_assistant_settings:
                        self.ai_assistant_settings['openai_settings'] = {}
                    self.ai_assistant_settings['openai_settings']['daily_message_limit'] = limit
                elif agent_type in ['chatforyou', 'protalk']:
                    if 'external_settings' not in self.ai_assistant_settings:
                        self.ai_assistant_settings['external_settings'] = {}
                    self.ai_assistant_settings['external_settings']['daily_message_limit'] = limit
                
                logger.info("‚úÖ Message limit set successfully", 
                           limit=limit,
                           bot_id=self.bot_id)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error("‚ùå Failed to save message limit")
            
            await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 50")
            logger.warning("‚ùå Invalid number format for message limit", input_text=message.text)
        except Exception as e:
            logger.error("üí• Error handling message limit input", 
                        error=str(e),
                        error_type=type(e).__name__)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()

    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =====
    
    async def get_message_usage_stats(self, user_id: int = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("üìà Getting message usage statistics", 
                       user_id=user_id,
                       bot_id=self.bot_id)
            
            if user_id:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stats = await self.db.get_user_daily_message_stats(self.bot_id, user_id)
            else:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É
                stats = await self.db.get_bot_daily_message_stats(self.bot_id)
            
            logger.info("‚úÖ Message usage statistics retrieved", 
                       stats_keys=list(stats.keys()) if stats else None)
            
            return stats
            
        except Exception as e:
            logger.error("üí• Error getting message usage statistics", 
                        error=str(e),
                        error_type=type(e).__name__)
            return {}

    async def reset_daily_limits(self) -> bool:
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ 00:00 –ú–°–ö)"""
        try:
            logger.info("üîÑ Resetting daily message limits", 
                       bot_id=self.bot_id)
            
            success = await self.db.reset_daily_message_limits(self.bot_id)
            
            if success:
                logger.info("‚úÖ Daily message limits reset successfully")
            else:
                logger.error("‚ùå Failed to reset daily message limits")
            
            return success
            
        except Exception as e:
            logger.error("üí• Error resetting daily message limits", 
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    # ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø =====
    
    async def check_limit_warnings(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É"""
        try:
            logger.info("‚ö†Ô∏è Checking for limit warnings", 
                       user_id=user_id,
                       bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            can_send, used_today, daily_limit = await self.db.check_daily_message_limit(
                self.bot_id, user_id
            )
            
            if daily_limit > 0:
                usage_percentage = (used_today / daily_limit) * 100
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –ª–∏–º–∏—Ç–∞
                if usage_percentage >= 80 and usage_percentage < 100:
                    logger.info("‚ö†Ô∏è User approaching message limit", 
                               user_id=user_id,
                               usage_percentage=usage_percentage)
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    return True
            
            return False
            
        except Exception as e:
            logger.error("üí• Error checking limit warnings", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    async def send_limit_warning(self, user_id: int, message: Message) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É"""
        try:
            logger.info("üì¢ Sending limit warning", 
                       user_id=user_id,
                       bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            can_send, used_today, daily_limit = await self.db.check_daily_message_limit(
                self.bot_id, user_id
            )
            
            if daily_limit > 0:
                remaining = daily_limit - used_today
                
                warning_text = f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_today} / {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π
–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π

üí° <i>–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ 00:00 –ú–°–ö</i>
"""
                
                await message.answer(warning_text)
                
                logger.info("‚úÖ Limit warning sent successfully")
                return True
            
            return False
            
        except Exception as e:
            logger.error("üí• Error sending limit warning", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    # ===== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
    
    async def override_user_limit(self, user_id: int, new_limit: int) -> bool:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("üîß Overriding user message limit", 
                       user_id=user_id,
                       new_limit=new_limit,
                       bot_id=self.bot_id)
            
            success = await self.db.set_user_daily_message_limit(self.bot_id, user_id, new_limit)
            
            if success:
                logger.info("‚úÖ User message limit overridden successfully")
            else:
                logger.error("‚ùå Failed to override user message limit")
            
            return success
            
        except Exception as e:
            logger.error("üí• Error overriding user message limit", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    async def get_top_users_by_usage(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("üìä Getting top users by message usage", 
                       limit=limit,
                       bot_id=self.bot_id)
            
            top_users = await self.db.get_top_users_by_message_usage(self.bot_id, limit)
            
            logger.info("‚úÖ Top users by usage retrieved", 
                       users_count=len(top_users) if top_users else 0)
            
            return top_users
            
        except Exception as e:
            logger.error("üí• Error getting top users by usage", 
                        error=str(e),
                        error_type=type(e).__name__)
            return []

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _cancel_and_show_ai(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        logger.info("‚ùå Cancelling message limit operation", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π callback_data
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
        ])
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)

    def format_limit_display(self, limit: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        if limit == 0:
            return "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        elif limit == 1:
            return "1 —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif limit < 5:
            return f"{limit} —Å–æ–æ–±—â–µ–Ω–∏—è"
        else:
            return f"{limit} —Å–æ–æ–±—â–µ–Ω–∏–π"

    def get_limit_recommendation(self, user_count: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ª–∏–º–∏—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if user_count <= 10:
            return {
                "recommended_limit": 100,
                "description": "–î–ª—è –Ω–µ–±–æ–ª—å—à–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç"
            }
        elif user_count <= 100:
            return {
                "recommended_limit": 50,
                "description": "–î–ª—è —Å—Ä–µ–¥–Ω–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç"
            }
        else:
            return {
                "recommended_limit": 20,
                "description": "–î–ª—è –±–æ–ª—å—à–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç"
            }

    # ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –î–†–£–ì–ò–ú–ò –ú–û–î–£–õ–Ø–ú–ò =====
    
    async def sync_with_agent_settings(self, agent_type: str, agent_settings: dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("üîÑ Syncing message limits with agent settings", 
                       agent_type=agent_type,
                       bot_id=self.bot_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.ai_assistant_settings = agent_settings
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞
            current_db_limit = await self.db.get_daily_message_limit(self.bot_id)
            
            settings_limit = None
            if agent_type == 'openai':
                settings_limit = agent_settings.get('openai_settings', {}).get('daily_message_limit')
            elif agent_type in ['chatforyou', 'protalk']:
                settings_limit = agent_settings.get('external_settings', {}).get('daily_message_limit')
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
            if settings_limit is not None and settings_limit != current_db_limit:
                await self.db.set_daily_message_limit(self.bot_id, settings_limit)
                logger.info("‚úÖ Message limit synced from agent settings", 
                           new_limit=settings_limit)
            
        except Exception as e:
            logger.error("üí• Error syncing message limits", 
                        error=str(e),
                        error_type=type(e).__name__)

    async def update_references(self, ai_assistant_settings):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üîÑ Updating message limit manager references", 
                   bot_id=self.bot_id)
        
        self.ai_assistant_settings = ai_assistant_settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤ –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        try:
            agent_type = ai_assistant_settings.get('agent_type', 'none')
            if agent_type != 'none':
                await self.sync_with_agent_settings(agent_type, ai_assistant_settings)
        except Exception as e:
            logger.error("‚ö†Ô∏è Failed to sync limits during reference update", error=str(e))


def register_message_limit_handlers(dp, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from aiogram.filters import StateFilter
    from aiogram import F
    
    message_limit_manager = MessageLimitManager(
        db=kwargs['db'],
        bot_config=kwargs['bot_config']
    )
    
    owner_user_id = kwargs['bot_config']['owner_user_id']
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    dp.callback_query.register(
        message_limit_manager.handle_message_limit_settings,
        F.data == "ai_message_limit",
        F.from_user.id == owner_user_id
    )
    
    dp.callback_query.register(
        message_limit_manager.handle_set_message_limit,
        F.data == "ai_set_message_limit", 
        F.from_user.id == owner_user_id
    )
    
    dp.callback_query.register(
        message_limit_manager.handle_disable_message_limit,
        F.data == "ai_disable_message_limit",
        F.from_user.id == owner_user_id
    )
    
    from ..states import AISettingsStates
    
    is_owner_check = lambda user_id: user_id == owner_user_id
    
    dp.message.register(
        lambda msg, state: message_limit_manager.handle_message_limit_input(msg, state, is_owner_check),
        StateFilter(AISettingsStates.waiting_for_message_limit),
        F.from_user.id == owner_user_id
    )
