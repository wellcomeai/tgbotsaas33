"""
Conversation Mixin –¥–ª—è OpenAI Handler
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Responses API
"""

import structlog
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ...states import AISettingsStates

logger = structlog.get_logger()


class ConversationMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å OpenAI –∞–≥–µ–Ω—Ç–∞–º–∏"""

    # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
    
    async def _test_openai_assistant(self, callback: CallbackQuery, state: FSMContext):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API"""
        logger.info("üß™ Starting OpenAI assistant test via Responses API", 
                   bot_id=self.bot_id)
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await self._sync_with_db_state()
        
        agent_type = self.ai_assistant_settings.get('agent_type', 'none')
        openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
        
        if not openai_assistant_id:
            logger.warning("‚ùå No OpenAI agent created for testing")
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ OpenAI –∞–≥–µ–Ω—Ç–∞", show_alert=True)
            return
        
        logger.info("‚úÖ Starting OpenAI test mode via Responses API", 
                   openai_assistant_id=openai_assistant_id)
        
        await state.set_state(AISettingsStates.admin_in_ai_conversation)
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–∏–µ –∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        await state.update_data(agent_type='openai', user_id=callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        settings = self.ai_assistant_settings.get('openai_settings', {})
        enabled_tools = []
        if settings.get('enable_web_search'):
            enabled_tools.append("üåê –í–µ–±-–ø–æ–∏—Å–∫")
        if settings.get('enable_code_interpreter'):
            enabled_tools.append("üêç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–¥–∞")
        if settings.get('enable_file_search'):
            enabled_tools.append("üìÅ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º")
        if settings.get('enable_image_generation'):
            enabled_tools.append("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        tools_text = ""
        if enabled_tools:
            tools_text = f"\n<b>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b> {', '.join(enabled_tools)}"
        
        text = f"""
üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞ (Responses API)</b>

<b>–ê–≥–µ–Ω—Ç ID:</b> {openai_assistant_id[:15]}...
<b>–ú–æ–¥–µ–ª—å:</b> GPT-4o (Responses API)
<b>–†–µ–∂–∏–º:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç{tools_text}

‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Responses API:</b>
- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
- –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –î–ò–ê–õ–û–ì –° OPENAI =====
    
    async def handle_openai_conversation(self, message: Message, data: dict) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≥–µ–Ω—Ç–∞ + —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
        logger.info("üé® OpenAI conversation processing via Responses API", 
                   user_id=message.from_user.id,
                   has_text=self._is_text_message(message),
                   message_length=len(message.text) if message.text else 0)
        
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self._is_text_message(message):
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–∞–∂–µ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                try:
                    await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                    logger.info("üí∞ Tokens charged for unsupported message", 
                               bot_id=self.bot_id, 
                               user_id=message.from_user.id)
                except Exception as stats_error:
                    logger.warning("‚ö†Ô∏è Failed to update token usage for unsupported message", error=str(stats_error))
                
                message_type_display = self._get_message_text(message)
                return f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_type_display}"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–∏–∞–ª–æ–≥–æ–º
            await self._sync_with_db_state()
            
            agent_type = self.ai_assistant_settings.get('agent_type', 'none')
            openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
            
            if not openai_assistant_id:
                logger.error("‚ùå No OpenAI assistant ID available",
                            cached_id=self.ai_assistant_id,
                            agent_type=agent_type)
                return "‚ùå OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            logger.info("üìä OpenAI Responses API conversation parameters", 
                       openai_assistant_id=openai_assistant_id,
                       user_id=message.from_user.id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI Responses API —Å–µ—Ä–≤–∏—Å
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                # –°–û–ó–î–ê–ï–ú –£–ü–†–û–©–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ (–ë–ï–ó previous_response_id)
                context = OpenAIResponsesContext(
                    user_id=message.from_user.id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=message.from_user.id == self.owner_user_id
                )
                
                logger.info("üìù Responses API context prepared", 
                           user_name=context.user_name,
                           is_admin=context.is_admin)
                
                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ß–ï–†–ï–ó RESPONSES API
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                logger.info("üì° Sending message to OpenAI Responses API service")
                
                response = await openai_client.send_message(
                    assistant_id=openai_assistant_id,
                    message=message.text,
                    user_id=message.from_user.id,
                    context=context
                )
                
                logger.info("‚úÖ OpenAI Responses API response received", 
                           response_length=len(response) if response else 0)
                
                if response:
                    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –í–°–ï–• (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
                    try:
                        await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                        logger.info("üí∞ Tokens charged", 
                                   bot_id=self.bot_id, 
                                   user_id=message.from_user.id,
                                   is_admin=message.from_user.id == self.owner_user_id)
                    except Exception as stats_error:
                        logger.warning("‚ö†Ô∏è Failed to update token usage", error=str(stats_error))
                    
                    logger.info("üìä Responses API conversation completed successfully")
                    return response
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
                    
            except ImportError:
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("üì¶ OpenAI Responses API service not available, using fallback")
                agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–∞–∂–µ –¥–ª—è fallback –æ—Ç–≤–µ—Ç–æ–≤
                try:
                    await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                    logger.info("üí∞ Tokens charged (fallback)", 
                               bot_id=self.bot_id, 
                               user_id=message.from_user.id)
                except Exception as stats_error:
                    logger.warning("‚ö†Ô∏è Failed to update token usage (fallback)", error=str(stats_error))
                
                return f"ü§ñ {agent_name}: –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}'. Responses API —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        except Exception as e:
            logger.error("üí• Error in OpenAI Responses API conversation", 
                        error=str(e),
                        error_type=type(e).__name__)
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π –≤–º–µ—Å—Ç–æ None
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò"

    async def handle_openai_conversation_with_text(self, message: Message, data: dict, text: str) -> str:
        """‚úÖ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å OpenAI —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        logger.info("üé® OpenAI conversation processing with custom text", 
                   user_id=message.from_user.id,
                   text_length=len(text) if text else 0,
                   is_admin=message.from_user.id == self.owner_user_id)
        
        try:
            if not text:
                logger.warning("‚ùå Empty text provided to OpenAI handler")
                return "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–∏–∞–ª–æ–≥–æ–º
            await self._sync_with_db_state()
            
            agent_type = self.ai_assistant_settings.get('agent_type', 'none')
            openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
            
            if not openai_assistant_id:
                logger.error("‚ùå No OpenAI assistant ID available",
                            cached_id=self.ai_assistant_id,
                            agent_type=agent_type)
                return "‚ùå OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            logger.info("üìä OpenAI Responses API conversation parameters", 
                       openai_assistant_id=openai_assistant_id,
                       user_id=message.from_user.id,
                       text_preview=text[:50] if text else "EMPTY")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI Responses API —Å–µ—Ä–≤–∏—Å
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                # –°–û–ó–î–ê–ï–ú –£–ü–†–û–©–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢
                context = OpenAIResponsesContext(
                    user_id=message.from_user.id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=message.from_user.id == self.owner_user_id
                )
                
                logger.info("üìù Responses API context prepared", 
                           user_name=context.user_name,
                           is_admin=context.is_admin)
                
                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô –¢–ï–ö–°–¢ –ß–ï–†–ï–ó RESPONSES API
                logger.info("üì° Sending custom text to OpenAI Responses API service")
                
                response = await openai_client.send_message(
                    assistant_id=openai_assistant_id,
                    message=text,  # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
                    user_id=message.from_user.id,
                    context=context
                )
                
                logger.info("‚úÖ OpenAI Responses API response received", 
                           response_length=len(response) if response else 0)
                
                if response:
                    # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –í–°–ï–• (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
                    try:
                        await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                        logger.info("üí∞ Tokens charged for admin", 
                                   bot_id=self.bot_id, 
                                   user_id=message.from_user.id,
                                   is_admin=context.is_admin)
                    except Exception as stats_error:
                        logger.warning("‚ö†Ô∏è Failed to update token usage for admin", error=str(stats_error))
                    
                    logger.info("üìä Admin Responses API conversation completed successfully")
                    return response
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
                    
            except ImportError:
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("üì¶ OpenAI Responses API service not available, using admin fallback")
                agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                # ‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–∞–∂–µ –¥–ª—è fallback –æ—Ç–≤–µ—Ç–æ–≤
                try:
                    await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                    logger.info("üí∞ Tokens charged (admin fallback)", 
                               bot_id=self.bot_id, 
                               user_id=message.from_user.id)
                except Exception as stats_error:
                    logger.warning("‚ö†Ô∏è Failed to update token usage (admin fallback)", error=str(stats_error))
                
                return f"ü§ñ {agent_name}: [–ê–î–ú–ò–ù –¢–ï–°–¢] –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{text[:100]}{'...' if len(text) > 100 else ''}'. Responses API —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        except Exception as e:
            logger.error("üí• Error in admin OpenAI conversation with custom text", 
                        error=str(e),
                        error_type=type(e).__name__)
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò"
