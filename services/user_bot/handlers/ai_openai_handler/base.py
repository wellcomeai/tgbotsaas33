"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è OpenAI Handler
–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, —Å–≤–æ–π—Å—Ç–≤–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã
"""

import structlog
from datetime import datetime
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

logger = structlog.get_logger()


class OpenAIHandlerBase:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, db, bot_config: dict, ai_assistant, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.ai_assistant = ai_assistant
        self.user_bot = user_bot
        
        # –•—Ä–∞–Ω–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self._ai_assistant_id = bot_config.get('ai_assistant_id')
        self._ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._current_state_data = {}
        
        logger.info("üé® OpenAIHandler initialized", 
                   bot_id=self.bot_id,
                   has_openai_agent=bool(self._ai_assistant_id))

    # ===== –°–í–û–ô–°–¢–í–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ê–ö–¢–£–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú =====
    
    @property
    def ai_assistant_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ ID –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_id
    
    @ai_assistant_id.setter
    def ai_assistant_id(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_id = value
    
    @property 
    def ai_assistant_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_settings
    
    @ai_assistant_settings.setter
    def ai_assistant_settings(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_settings = value

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def _get_message_text(self, message: Message) -> str:
        """‚úÖ –ù–û–í–´–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
        if message.text:
            return message.text
        elif message.voice:
            return "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        elif message.video_note:
            return "[–í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ]"
        elif message.audio:
            return "[–ê—É–¥–∏–æ-—Ñ–∞–π–ª]"
        elif message.document:
            return "[–î–æ–∫—É–º–µ–Ω—Ç]"
        elif message.photo:
            return "[–§–æ—Ç–æ]"
        elif message.video:
            return "[–í–∏–¥–µ–æ]"
        elif message.sticker:
            return "[–°—Ç–∏–∫–µ—Ä]"
        else:
            return "[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]"
    
    def _is_text_message(self, message: Message) -> bool:
        """‚úÖ –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º"""
        return bool(message.text)

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
    
    async def _sync_with_db_state(self, force: bool = False) -> bool:
        """‚úÖ –ù–û–í–´–ô: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ë–î"""
        try:
            logger.info("üîÑ Syncing local state with database", 
                       bot_id=self.bot_id,
                       force=force,
                       current_agent_id=self.ai_assistant_id)
            
            fresh_bot = await self.db.get_bot_by_id(self.bot_id, fresh=True)
            
            if fresh_bot:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                old_agent_id = self.ai_assistant_id
                old_ai_type = self.ai_assistant_settings.get('agent_type', 'none')
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
                self.ai_assistant_id = fresh_bot.openai_agent_id
                
                if fresh_bot.openai_settings:
                    self.ai_assistant_settings = fresh_bot.openai_settings.copy()
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    if fresh_bot.ai_assistant_type == 'openai':
                        self.ai_assistant_settings['agent_type'] = 'openai'
                else:
                    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –Ω–æ —Ç–∏–ø –µ—Å—Ç—å
                    if fresh_bot.ai_assistant_type == 'openai' and fresh_bot.openai_agent_id:
                        self.ai_assistant_settings = {
                            'agent_type': 'openai',
                            'agent_name': fresh_bot.openai_agent_name or 'AI –ê–≥–µ–Ω—Ç',
                            'agent_role': fresh_bot.openai_agent_instructions or '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
                        }
                    else:
                        self.ai_assistant_settings = {'agent_type': 'none'}
                
                logger.info("‚úÖ State synchronized with database", 
                           bot_id=self.bot_id,
                           old_agent_id=old_agent_id,
                           new_agent_id=self.ai_assistant_id,
                           old_ai_type=old_ai_type,
                           new_ai_type=self.ai_assistant_settings.get('agent_type'),
                           ai_enabled=fresh_bot.ai_assistant_enabled,
                           db_ai_type=fresh_bot.ai_assistant_type)
                
                return True
            else:
                logger.warning("‚ö†Ô∏è Could not get fresh bot data from DB")
                return False
                
        except Exception as e:
            logger.error("üí• Failed to sync with database state", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    
    def _has_openai_agent(self) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞"""
        return (
            self.ai_assistant_settings.get('agent_type') == 'openai' and
            bool(self.ai_assistant_id) and
            self.ai_assistant_settings.get('creation_method') in ['responses_api', 'real_openai_api']
        )

    async def show_settings(self, callback: CallbackQuery, has_ai_agent: bool):
        """‚úÖ –£–ü–†–û–©–ï–ù–û: –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ OpenAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("üìã Displaying OpenAI settings", 
                   bot_id=self.bot_id,
                   has_ai_agent=has_ai_agent)
        
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        await self._sync_with_db_state()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞
        agent_type = self.ai_assistant_settings.get('agent_type', 'none')
        openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
        has_real_agent = bool(openai_assistant_id)
        
        logger.info("üîç OpenAI interface check", 
                   agent_type=agent_type,
                   openai_assistant_id=openai_assistant_id,
                   has_real_agent=has_real_agent)
        
        if not has_real_agent:
            # ‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞
            await self._show_create_openai_menu(callback)
        else:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞)
            await self._show_existing_agent_settings(callback, openai_assistant_id)

    async def _show_create_openai_menu(self, callback: CallbackQuery):
        """‚úÖ –ù–û–í–û–ï: –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞"""
        text = """
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –±–∞–∑–µ OpenAI</b>

<b>üöÄ OpenAI GPT-4o + Responses API</b>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:</b>
‚ú® –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
üß† –°–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å GPT-4o
üõ†Ô∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–≤–µ–±-–ø–æ–∏—Å–∫, –∫–æ–¥, —Ñ–∞–π–ª—ã)
‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
üìä –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ –∏–º—è –∏ —Ä–æ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
2. –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI —á–µ—Ä–µ–∑ Responses API
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—â–∞—é—Ç—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º –ø—Ä—è–º–æ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
4. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞?</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å OpenAI –∞–≥–µ–Ω—Ç–∞", callback_data="openai_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def _show_existing_agent_settings(self, callback: CallbackQuery, openai_assistant_id: str):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞)"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent_name = self.ai_assistant_settings.get('agent_name')
        creation_method = self.ai_assistant_settings.get('creation_method', 'unknown')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        settings = self.ai_assistant_settings
        enabled_tools_count = sum([
            settings.get('enable_web_search', False),
            settings.get('enable_code_interpreter', False),
            settings.get('enable_file_search', False),
            settings.get('enable_image_generation', False)
        ])
        
        logger.info("üîç OpenAI agent info", 
                   openai_assistant_id=openai_assistant_id,
                   agent_name=agent_name,
                   creation_method=creation_method,
                   enabled_tools_count=enabled_tools_count)
        
        agent_info = f"ID: {openai_assistant_id[:15]}..."
        agent_details = ""
        
        if agent_name:
            agent_info = f"{agent_name} (ID: {openai_assistant_id[:15]}...)"
        
        if creation_method == 'fallback_stub':
            agent_details += "\n‚ö†Ô∏è –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        elif creation_method == 'responses_api':
            agent_details += "\n‚úÖ –†–µ–∂–∏–º: Responses API (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)"
        elif creation_method == 'real_openai_api':
            agent_details += "\n‚úÖ –†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω—ã–π OpenAI"
        
        if enabled_tools_count > 0:
            agent_details += f"\nüß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {enabled_tools_count} –≤–∫–ª—é—á–µ–Ω–æ"
        
        text = f"""
üé® <b>–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–ò –ê–≥–µ–Ω—Ç</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üéØ –ê–≥–µ–Ω—Ç: {agent_info}{agent_details}
üß† –ú–æ–¥–µ–ª—å: GPT-4o (Responses API)
üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚ö° –õ–∏–º–∏—Ç—ã: –£–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Responses API:</b>
- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–ø–æ–∏—Å–∫, –∫–æ–¥, —Ñ–∞–π–ª—ã)
- –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 24/7

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º:</b>
"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        from ..keyboards import AIKeyboards
        keyboard = AIKeyboards.openai_settings_menu(True)
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô =====

    async def handle_openai_action(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π OpenAI + –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò VECTOR STORES"""
        logger.info("üéØ OpenAI action callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data.replace("openai_", "")
        
        # ‚úÖ –ó–ê–©–ò–¢–ê: –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º confirm_delete —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
        if action == "confirm_delete":
            logger.warning("‚ö†Ô∏è confirm_delete reached general handler, ignoring")
            return
        
        logger.info("üîÑ Processing OpenAI action", 
                   action=action,
                   bot_id=self.bot_id)
        
        # ===== –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø OPENAI =====
        if action == "create":
            await self._create_openai_agent(callback, state)
        elif action == "test":
            await self._test_openai_assistant(callback, state)
        elif action == "delete":
            await self._delete_openai_agent(callback)
        elif action == "tools_settings":
            await self.handle_tools_settings(callback, is_owner_check)
        elif action == "toggle_web_search":
            await self.handle_toggle_web_search(callback, is_owner_check)
        elif action == "toggle_code_interpreter":
            await self.handle_toggle_code_interpreter(callback, is_owner_check)
        elif action == "toggle_file_search":
            await self.handle_toggle_file_search(callback, is_owner_check)
        elif action == "upload_files":
            await self.handle_upload_files(callback, is_owner_check)
        elif action == "start_upload":
            await self.handle_start_upload(callback, state, is_owner_check)
        elif action == "finish_upload":
            await self.handle_finish_upload(callback, state, is_owner_check)
        elif action == "manage_files":
            await self.handle_manage_files(callback, is_owner_check)
        elif action == "clear_knowledge":
            await self.handle_clear_knowledge(callback, is_owner_check)
        elif action == "edit":
            await self.handle_edit_agent(callback, is_owner_check)
        elif action == "edit_name":
            await self.handle_edit_name(callback, state)
        elif action == "edit_prompt":
            await self.handle_edit_prompt(callback, state)
        elif action == "sync_data":
            await self.handle_sync_agent_data(callback, is_owner_check)
        # ‚úÖ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò VECTOR STORES
        elif action == "verify_file_search":
            await self.handle_verify_file_search(callback, is_owner_check)
        elif action == "force_sync_vectors":
            await self.handle_force_sync_vectors(callback, is_owner_check)
        elif action == "confirm_clear_knowledge":
            await self.handle_confirm_clear_knowledge(callback, is_owner_check)
        else:
            logger.warning("‚ö†Ô∏è Unknown OpenAI action", action=action)
    
    async def handle_navigation_action(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """‚úÖ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        logger.info("üß≠ Navigation action callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data
        
        logger.info("üîÑ Processing navigation action", 
                   action=action,
                   bot_id=self.bot_id)
        
        # ===== –ö–†–ò–¢–ò–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò =====
        if action == "admin_panel":
            await self.handle_admin_panel(callback, state)
        elif action == "admin_ai":
            await self.handle_admin_ai(callback, state)
        elif action == "admin_main":
            await self.handle_admin_main(callback, state)
        else:
            logger.warning("‚ö†Ô∏è Unknown navigation action", action=action)

    # ===== –ë–ï–ó–û–ü–ê–°–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====
    
    async def _safe_update_user_bot(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UserBot"""
        logger.info("üîÑ Attempting UserBot update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            if self.user_bot and hasattr(self.user_bot, 'update_ai_settings'):
                await self.user_bot.update_ai_settings(**kwargs)
                logger.info("‚úÖ UserBot update successful")
            else:
                logger.warning("‚ö†Ô∏è UserBot doesn't have update_ai_settings method", 
                             bot_id=self.bot_id,
                             has_user_bot=bool(self.user_bot),
                             has_method=hasattr(self.user_bot, 'update_ai_settings') if self.user_bot else False)
        except Exception as e:
            logger.error("üí• Failed to update UserBot settings", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
    
    async def _safe_update_bot_manager(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot_manager"""
        logger.info("üîÑ Attempting BotManager update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            bot_manager = self.bot_config.get('bot_manager')
            if bot_manager and hasattr(bot_manager, 'update_bot_config'):
                await bot_manager.update_bot_config(self.bot_id, **kwargs)
                logger.info("‚úÖ BotManager update successful")
            else:
                logger.warning("‚ö†Ô∏è BotManager doesn't have update_bot_config method", 
                             bot_id=self.bot_id,
                             has_bot_manager=bool(bot_manager),
                             has_method=hasattr(bot_manager, 'update_bot_config') if bot_manager else False)
        except Exception as e:
            logger.error("üí• Failed to update BotManager config", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)

    # ===== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ =====

    def _safe_extract_file_counts(self, file_counts) -> tuple[int, int]:
        """‚úÖ –ù–û–í–´–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            total_files = 0
            processed_files = 0
            
            if file_counts is None:
                return 0, 0
            
            # –¢–∏–ø 1: –°–ª–æ–≤–∞—Ä—å
            if isinstance(file_counts, dict):
                total_files = file_counts.get('total', 0)
                processed_files = file_counts.get('completed', 0)
                logger.debug("üìä File counts from dict", total=total_files, completed=processed_files)
                return total_files, processed_files
            
            # –¢–∏–ø 2: –û–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            if hasattr(file_counts, 'total'):
                total_files = getattr(file_counts, 'total', 0)
                processed_files = getattr(file_counts, 'completed', 0)
                logger.debug("üìä File counts from object attributes", total=total_files, completed=processed_files)
                return total_files, processed_files
            
            # –¢–∏–ø 3: –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            possible_total_attrs = ['total', 'count', 'total_count', 'size']
            possible_completed_attrs = ['completed', 'processed', 'done', 'finished']
            
            for attr in possible_total_attrs:
                if hasattr(file_counts, attr):
                    total_files = getattr(file_counts, attr, 0)
                    break
            
            for attr in possible_completed_attrs:
                if hasattr(file_counts, attr):
                    processed_files = getattr(file_counts, attr, 0)
                    break
            
            if total_files > 0 or processed_files > 0:
                logger.debug("üìä File counts from alternative attributes", 
                           total=total_files, completed=processed_files)
                return total_files, processed_files
            
            # –¢–∏–ø 4: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            file_counts_str = str(file_counts)
            logger.warning("‚ö†Ô∏è Unknown file_counts type, attempting string conversion", 
                         type_name=type(file_counts).__name__,
                         string_value=file_counts_str,
                         attributes=[attr for attr in dir(file_counts) if not attr.startswith('_')])
            
            return 0, 0
            
        except Exception as e:
            logger.error("üí• Error extracting file counts", 
                        error=str(e),
                        file_counts_type=type(file_counts).__name__ if file_counts else 'None')
            return 0, 0

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _cancel_and_show_ai(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        logger.info("‚ùå Cancelling OpenAI operation", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
        ])
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
