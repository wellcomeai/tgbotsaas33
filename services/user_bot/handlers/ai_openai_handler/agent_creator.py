"""
Agent Creator Mixin –¥–ª—è OpenAI Handler
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö OpenAI –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Responses API
"""

import structlog
import time
from datetime import datetime
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ...states import AISettingsStates

logger = structlog.get_logger()


class AgentCreatorMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤"""

    # ===== –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê =====
    
    async def _create_openai_agent(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        logger.info("üé® Starting OpenAI agent creation flow", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        logger.info("üîÑ Pre-creation state sync check", 
                   current_agent_id=self.ai_assistant_id,
                   current_agent_type=self.ai_assistant_settings.get('agent_type'))
        
        sync_success = await self._sync_with_db_state(force=True)
        
        if sync_success:
            logger.info("‚úÖ Pre-creation sync completed", 
                       synced_agent_id=self.ai_assistant_id,
                       synced_agent_type=self.ai_assistant_settings.get('agent_type'))
        else:
            logger.warning("‚ö†Ô∏è Pre-creation sync failed, continuing with fallback cleanup")
            # Fallback - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'openai'}
        
        await state.set_state(AISettingsStates.admin_waiting_for_openai_name)
        
        text = f"""
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 1/2: –ò–º—è –∞–≥–µ–Ω—Ç–∞</b>

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–º–µ–Ω:</b>
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ú–∞—Ä–∏—è
- –ü–æ–º–æ—â–Ω–∏–∫ –ê–ª–µ–∫—Å
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
- –¢—Ä–µ–Ω–µ—Ä –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_name_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info("üìù OpenAI agent name input", 
                   user_id=message.from_user.id,
                   has_text=self._is_text_message(message),
                   message_type=type(message).__name__,
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            return
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not self._is_text_message(message):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∞–≥–µ–Ω—Ç–∞.")
            return
        
        message_text = message.text.strip()
        
        if message_text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        agent_name = message_text
        
        logger.info("üîç Validating agent name", 
                   agent_name=agent_name,
                   name_length=len(agent_name))
        
        if len(agent_name) < 2:
            await message.answer("‚ùå –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(agent_name) > 100:
            await message.answer("‚ùå –ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(agent_name=agent_name)
        await state.set_state(AISettingsStates.admin_waiting_for_openai_role)
        
        logger.info("‚úÖ Agent name accepted, moving to role input", 
                   agent_name=agent_name)
        
        text = f"""
‚úÖ <b>–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {agent_name}

<b>–®–∞–≥ 2/2: –†–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>

–û–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ —Ç–æ, –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤!

<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Ä–æ–ª–µ–π:</b>
- "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –ø–∏—Ç–∞–Ω–∏—é."
- "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
- "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í—ã—Å–ª—É—à–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–∞–≤–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–≤–µ—Ç—ã."

<b>–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def handle_role_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
        logger.info("üìù OpenAI agent role input", 
                   user_id=message.from_user.id,
                   has_text=self._is_text_message(message),
                   input_length=len(message.text) if message.text else 0,
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            return
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not self._is_text_message(message):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞.")
            return
        
        message_text = message.text.strip()
        
        if message_text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        agent_role = message_text
        
        logger.info("üîç Validating agent role", 
                   role_length=len(agent_role))
        
        if len(agent_role) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(agent_role) > 1000:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            admin_chat_id = message.chat.id
            await state.update_data(admin_chat_id=admin_chat_id)
            
            logger.info("üì± Admin chat ID captured for token tracking", 
                       admin_chat_id=admin_chat_id, user_id=message.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            
            logger.info("üìä Agent creation data", 
                       agent_name=agent_name,
                       agent_role=agent_role)
            
            if not agent_name:
                logger.error("‚ùå Agent name lost from state")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∞–≥–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            progress_message = await message.answer("üîÑ –°–æ–∑–¥–∞—é –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ _create_agent_in_openai
            self._current_state_data = data
            
            logger.info("üöÄ Calling _create_agent_in_openai")
            success, response_data = await self._create_agent_in_openai(agent_name, agent_role)
            
            logger.info("üìä Agent creation result", 
                       success=success,
                       response_keys=list(response_data.keys()) if response_data else None)
            
            if success:
                creation_method = response_data.get('creation_method', 'unknown')
                duration = response_data.get('total_duration', 'unknown')
                
                success_message = f"üéâ <b>–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                success_message += f"<b>–ò–º—è:</b> {agent_name}\n"
                success_message += f"<b>–†–æ–ª—å:</b> {agent_role[:100]}{'...' if len(agent_role) > 100 else ''}\n"
                
                if creation_method == 'responses_api':
                    success_message += f"\n‚úÖ <b>–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Responses API</b> –∑–∞ {duration}\n"
                    success_message += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
                    success_message += f"‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã OpenAI\n"
                elif creation_method == 'fallback_stub':
                    success_message += f"\n‚ö†Ô∏è <b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</b> (Responses API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n"
                
                success_message += f"\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞!"
                
                await progress_message.edit_text(
                    success_message,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="openai_test")],
                        [InlineKeyboardButton(text="üß∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="openai_tools_settings")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            else:
                error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                if "500" in error_msg or "server_error" in error_msg:
                    user_friendly_error = """
‚ùå <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å OpenAI</b>

–°–µ—Ä–≤–µ—Ä—ã OpenAI —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –≠—Ç–æ —á–∞—Å—Ç–∞—è —Å–∏—Ç—É–∞—Ü–∏—è.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã
- –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ
- –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–≠—Ç–æ –ù–ï –æ—à–∏–±–∫–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!</b>
"""
                elif "429" in error_msg or "rate" in error_msg:
                    user_friendly_error = """
‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>

OpenAI –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
- –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å–Ω–æ–≤–∞
- –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
"""
                elif "401" in error_msg or "unauthorized" in error_msg:
                    user_friendly_error = """
‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º</b>

–í–æ–∑–º–æ–∂–Ω–æ API –∫–ª—é—á OpenAI –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.

<b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>
"""
                else:
                    user_friendly_error = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞</b>

{error_msg}

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</b>
"""
                
                logger.error("‚ùå Agent creation failed", error=error_msg)
                
                await progress_message.edit_text(
                    user_friendly_error,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="openai_create")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Failed to create OpenAI agent", 
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
            )
            await state.clear()

    async def _create_agent_in_openai(self, name: str, role: str) -> tuple[bool, dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API"""
        logger.info("üé¨ Starting OpenAI agent creation via Responses API", 
                   bot_id=self.bot_id,
                   owner_user_id=self.owner_user_id,
                   agent_name=name,
                   agent_role=role)
        
        overall_start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            logger.info("üì¶ Importing OpenAI Responses API service...")
            
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesRequest
                
                logger.info("‚úÖ OpenAI Responses API service imported successfully", 
                           client_type=type(openai_client).__name__)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
                if not openai_client.is_available():
                    logger.warning("‚ö†Ô∏è OpenAI client reports not available")
                    return False, {"error": "OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
                # –ü–æ–ª—É—á–∞–µ–º admin_chat_id –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
                admin_chat_id = None
                try:
                    if hasattr(self, '_current_state_data'):
                        admin_chat_id = self._current_state_data.get('admin_chat_id')
                    
                    if not admin_chat_id:
                        admin_chat_id = self.owner_user_id
                        
                    logger.info("üì± Admin chat ID for Responses API", 
                               admin_chat_id=admin_chat_id)
                        
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Could not determine admin_chat_id", error=str(e))
                    admin_chat_id = self.owner_user_id
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Responses API
                logger.info("üìã Creating Responses API agent request...")
                
                system_prompt = f"–¢—ã - {role}. –¢–≤–æ–µ –∏–º—è {name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
                
                request = OpenAIResponsesRequest(
                    bot_id=self.bot_id,
                    agent_name=name,
                    agent_role=role,
                    system_prompt=system_prompt,
                    model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è Responses API
                    temperature=0.7,
                    max_tokens=4000,
                    store_conversations=True,    # –í–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    conversation_retention=30,   # –•—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π
                    enable_streaming=True,       # –ü–æ—Ç–æ–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                    enable_web_search=False,     # –ü–æ–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    enable_code_interpreter=False,
                    enable_file_search=False,
                    enable_image_generation=False
                )
                
                logger.info("‚úÖ Responses API request created", 
                           agent_name=request.agent_name,
                           model=request.model,
                           store_conversations=request.store_conversations,
                           tools_enabled=sum([
                               request.enable_web_search,
                               request.enable_code_interpreter,
                               request.enable_file_search,
                               request.enable_image_generation
                           ]))
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
                logger.info("üîç Validating Responses API request...")
                
                is_valid, error_msg = openai_client.validate_create_request(request)
                
                if not is_valid:
                    logger.error("‚ùå Responses API request validation failed", 
                               validation_error=error_msg)
                    return False, {"error": error_msg}
                
                logger.info("‚úÖ Request validation passed")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞–≥–µ–Ω—Ç–∞
                agent = request.to_agent()
                
                logger.info("‚úÖ Agent object created for Responses API", 
                           agent_name=agent.agent_name,
                           store_conversations=agent.store_conversations,
                           enable_streaming=agent.enable_streaming)
                
                # –û–°–ù–û–í–ù–û–ô –í–´–ó–û–í –°–û–ó–î–ê–ù–ò–Ø –ß–ï–†–ï–ó RESPONSES API
                logger.info("üöÄ Calling OpenAI Responses API assistant creation...")
                
                creation_start_time = time.time()
                
                response = await openai_client.create_assistant(agent)
                
                creation_duration = time.time() - creation_start_time
                
                logger.info("üì° OpenAI Responses API call completed", 
                           duration=f"{creation_duration:.2f}s",
                           response_success=response.success,
                           response_text=response.output_text if response.success else None,
                           response_error=response.error if not response.success else None,
                           response_id=response.response_id if response.success else None)
                
                if response.success:
                    # –£–°–ü–ï–®–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ß–ï–†–ï–ó RESPONSES API
                    logger.info("üéâ OpenAI agent created successfully via Responses API")
                    
                    assistant_id = response.response_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º response_id –∫–∞–∫ assistant_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞ —Å Responses API –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    save_success = await self._save_agent_with_responses_api(
                        assistant_id=assistant_id,
                        name=name,
                        role=role,
                        system_prompt=system_prompt,
                        agent=agent,
                        admin_chat_id=admin_chat_id
                    )
                    
                    if not save_success:
                        logger.error("‚ùå Failed to save Responses API agent")
                        return False, {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞"}
                    
                    logger.info("‚úÖ Responses API agent created and saved")
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    await self._sync_with_db_state(force=True)
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    try:
                        await self._safe_update_user_bot(
                            ai_assistant_id=assistant_id,
                            ai_assistant_settings=self.ai_assistant_settings
                        )
                        logger.info("‚úÖ UserBot updated for Responses API")
                    except Exception as update_error:
                        logger.error("‚ö†Ô∏è UserBot update failed", error=str(update_error))
                    
                    try:
                        await self._safe_update_bot_manager(
                            ai_assistant_id=assistant_id,
                            ai_assistant_settings=self.ai_assistant_settings
                        )
                        logger.info("‚úÖ BotManager updated for Responses API")
                    except Exception as update_error:
                        logger.error("‚ö†Ô∏è BotManager update failed", error=str(update_error))
                    
                    total_duration = time.time() - overall_start_time
                    
                    logger.info("üèÅ Responses API agent creation completed successfully", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               assistant_id=assistant_id,
                               total_duration=f"{total_duration:.2f}s",
                               creation_duration=f"{creation_duration:.2f}s")
                    
                    return True, {
                        "assistant_id": assistant_id,
                        "message": response.output_text,
                        "creation_method": "responses_api",
                        "creation_duration": creation_duration,
                        "total_duration": total_duration
                    }
                    
                else:
                    # –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø
                    logger.error("üí• OpenAI Responses API creation failed", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               error=response.error,
                               duration=f"{creation_duration:.2f}s")
                    
                    return False, {"error": response.error}
                    
            except ImportError as import_error:
                # FALLBACK –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ò OPENAI –°–ï–†–í–ò–°–ê
                logger.warning("üì¶ OpenAI Responses API service not available, using fallback", 
                              import_error=str(import_error))
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                fake_assistant_id = f"asst_fallback_{int(datetime.now().timestamp())}"
                
                ai_settings = self.ai_assistant_settings.copy()
                ai_settings.update({
                    'agent_type': 'openai',
                    'agent_name': name,
                    'agent_role': role,
                    'created_at': datetime.now().isoformat(),
                    'status': 'stub_created',
                    'creation_method': 'fallback_stub',
                    'reason': 'responses_api_service_not_available',
                    'import_error': str(import_error)
                })
                
                try:
                    await self.db.update_ai_assistant(
                        self.bot_id, 
                        assistant_id=fake_assistant_id,
                        settings=ai_settings
                    )
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è fallback
                    await self._sync_with_db_state(force=True)
                    
                    total_duration = time.time() - overall_start_time
                    
                    logger.info("‚úÖ Stub agent created (Responses API unavailable)", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               fake_assistant_id=fake_assistant_id,
                               total_duration=f"{total_duration:.2f}s")
                    
                    return True, {
                        "message": "–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - Responses API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                        "assistant_id": fake_assistant_id,
                        "creation_method": "fallback_stub",
                        "total_duration": total_duration
                    }
                    
                except Exception as db_error:
                    logger.error("üí• Failed to save stub configuration", error=str(db_error))
                    return False, {"error": f"Fallback creation failed: {str(db_error)}"}
                    
        except Exception as e:
            # –û–ë–©–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
            total_duration = time.time() - overall_start_time
            
            logger.error("üí• Exception in _create_agent_in_openai (Responses API)", 
                        bot_id=self.bot_id,
                        agent_name=name,
                        exception_type=type(e).__name__,
                        exception_message=str(e),
                        total_duration=f"{total_duration:.2f}s",
                        exc_info=True)
            
            return False, {"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _save_agent_with_responses_api(self, assistant_id: str, name: str, role: str, 
                                           system_prompt: str, agent: any, admin_chat_id: int) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("üíæ Saving OpenAI agent via new DatabaseManager architecture", 
                       assistant_id=assistant_id, 
                       admin_chat_id=admin_chat_id,
                       bot_id=self.bot_id)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å agent_type
            agent_settings = {
                'agent_type': 'openai',  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
                'agent_name': name,
                'agent_role': role,
                'system_prompt': system_prompt,
                'model_used': agent.model,
                'model': agent.model,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'admin_chat_id': admin_chat_id,
                'created_at': datetime.now().isoformat(),
                'creation_method': 'responses_api',
                
                # Responses API —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                'store_conversations': agent.store_conversations,
                'conversation_retention': agent.conversation_retention,
                'enable_streaming': getattr(agent, 'enable_streaming', True),
                'enable_web_search': False,
                'enable_code_interpreter': False,
                'enable_file_search': False,
                'enable_image_generation': False,
                
                # ‚úÖ –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                'openai_settings': {
                    'api_type': 'responses',
                    'store_conversations': agent.store_conversations,
                    'conversation_retention': agent.conversation_retention,
                    'enable_streaming': getattr(agent, 'enable_streaming', True),
                    'enable_web_search': False,
                    'enable_code_interpreter': False,
                    'enable_file_search': False,
                    'enable_image_generation': False,
                    'temperature': 0.7,
                    'max_tokens': 4000,
                    'top_p': 1.0,
                    'frequency_penalty': 0.0,
                    'presence_penalty': 0.0,
                    # ‚úÖ –ù–û–í–û–ï: –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
                    'uploaded_files': [],
                    'files_last_updated': datetime.now().isoformat()
                }
            }
            
            logger.info("üìä Agent settings prepared", 
                       agent_type=agent_settings['agent_type'],
                       agent_name=agent_settings['agent_name'],
                       creation_method=agent_settings['creation_method'])
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥
                if hasattr(self.db, 'create_or_update_user_with_tokens'):
                    user_data = {'id': self.owner_user_id}
                    await self.db.create_or_update_user_with_tokens(
                        user_data=user_data,
                        admin_chat_id=admin_chat_id
                    )
                    logger.info("‚úÖ Token balance initialized")
                else:
                    logger.warning("‚ö†Ô∏è Token balance initialization method not available")
            except Exception as token_error:
                logger.warning("‚ö†Ô∏è Failed to initialize token balance", error=str(token_error))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            from database.managers.ai_manager import AIManager
            
            success = await AIManager.save_openai_agent_config_responses_api(
                bot_id=self.bot_id,
                agent_id=assistant_id,
                config=agent_settings
            )
            
            if success:
                logger.info("‚úÖ OpenAI agent saved via new DatabaseManager")
                
                # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –±–æ—Ç–∞
                await self.db.expire_bot_cache(self.bot_id)
                
                return True
            else:
                logger.error("‚ùå Failed to save OpenAI agent via DatabaseManager")
                return False
                
        except Exception as e:
            logger.error("üí• Failed to save OpenAI agent", 
                        bot_id=self.bot_id,
                        assistant_id=assistant_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            return False
