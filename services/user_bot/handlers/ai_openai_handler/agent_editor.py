"""
Agent Editor Mixin –¥–ª—è OpenAI Handler
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö OpenAI –∞–≥–µ–Ω—Ç–æ–≤
"""

import structlog
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ...states import AISettingsStates

logger = structlog.get_logger()


class AgentEditorMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤"""

    # ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê =====

    async def handle_edit_agent(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
            agent_role = self.ai_assistant_settings.get('agent_role', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')
            system_prompt = self.ai_assistant_settings.get('system_prompt', '')
            
            text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ "{agent_name}"</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üìù <b>–ò–º—è:</b> {agent_name}
üé≠ <b>–†–æ–ª—å:</b> {agent_role}
üìã <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b> {system_prompt[:100]}{'...' if len(system_prompt) > 100 else ''}

<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="openai_edit_name")],
                [InlineKeyboardButton(text="üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏ –ø—Ä–æ–º–ø—Ç", callback_data="openai_edit_prompt")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("üí• Error showing edit menu", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

    async def handle_edit_name(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏"""
        await callback.answer()
        await state.set_state(AISettingsStates.admin_editing_agent_name)
        
        current_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
        
        text = f"""
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {current_name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_edit")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_edit_prompt(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
        await callback.answer()
        await state.set_state(AISettingsStates.admin_editing_agent_prompt)
        
        current_role = self.ai_assistant_settings.get('agent_role', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')
        
        text = f"""
üé≠ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
- "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä."

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_edit")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_name_edit_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
        if not is_owner_check(message.from_user.id):
            return
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not self._is_text_message(message):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∞–≥–µ–Ω—Ç–∞.")
            return
        
        message_text = message.text.strip()
        
        if message_text == "/cancel":
            await self._cancel_and_show_edit(message, state)
            return
        
        new_name = message_text
        
        if len(new_name) < 2 or len(new_name) > 100:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞)
            current_settings = self.ai_assistant_settings.copy()
            current_settings['agent_name'] = new_name
            
            await self.db.update_ai_assistant(
                self.bot_id,
                settings=current_settings
            )
            
            self.ai_assistant_settings = current_settings
            
            await message.answer(
                f"‚úÖ –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="openai_edit")],
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
            )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Error updating agent name", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

    async def handle_prompt_edit_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
        if not is_owner_check(message.from_user.id):
            return
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not self._is_text_message(message):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é –∞–≥–µ–Ω—Ç–∞.")
            return
        
        message_text = message.text.strip()
        
        if message_text == "/cancel":
            await self._cancel_and_show_edit(message, state)
            return
        
        new_role = message_text
        
        if len(new_role) < 10 or len(new_role) > 1000:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            progress_message = await message.answer("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            agent_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
            old_assistant_id = self.ai_assistant_id
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            success, response_data = await self._recreate_agent_with_new_prompt(
                agent_name, new_role, old_assistant_id
            )
            
            if success:
                new_assistant_id = response_data.get('assistant_id')
                
                await progress_message.edit_text(
                    f"""‚úÖ <b>–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

<b>–ò–º—è:</b> {agent_name}
<b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {new_role[:100]}{'...' if len(new_role) > 100 else ''}
<b>–ù–æ–≤—ã–π ID:</b> {new_assistant_id[:15]}...

–ê–≥–µ–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="openai_test")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            else:
                error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await progress_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {error_msg}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="openai_edit_prompt")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Error updating agent prompt", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞")

    async def _recreate_agent_with_new_prompt(self, name: str, role: str, old_assistant_id: str) -> tuple[bool, dict]:
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–∑ OpenAI
            if old_assistant_id:
                try:
                    from services.openai_assistant import openai_client
                    await openai_client.delete_assistant(old_assistant_id)
                    logger.info("‚úÖ Old agent deleted from OpenAI")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Could not delete old agent", error=str(e))
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            success, response_data = await self._create_agent_in_openai(name, role)
            
            if success:
                new_assistant_id = response_data.get('assistant_id')
                
                # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._sync_with_db_state(force=True)
                
                # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                await self._safe_update_user_bot(
                    ai_assistant_id=new_assistant_id,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                await self._safe_update_bot_manager(
                    ai_assistant_id=new_assistant_id,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                
                logger.info("‚úÖ Agent recreated successfully", 
                           old_id=old_assistant_id,
                           new_id=new_assistant_id)
                
                return True, response_data
            
            return False, response_data
            
        except Exception as e:
            logger.error("üí• Error recreating agent", error=str(e))
            return False, {"error": str(e)}

    async def _cancel_and_show_edit(self, message: Message, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="openai_edit")]
        ])
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)

    # ===== –£–î–ê–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê =====
    
    async def _delete_openai_agent(self, callback: CallbackQuery):
        """‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï: –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        logger.info("üóëÔ∏è Showing OpenAI agent deletion confirmation", 
                   bot_id=self.bot_id)
        
        agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –∞–≥–µ–Ω—Ç–∞')
        
        text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ "{agent_name}"</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.

–í—ã —É–≤–µ—Ä–µ–Ω—ã?
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="openai_confirm_delete")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_confirm_delete(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        
        logger.info("üóëÔ∏è Simple OpenAI agent deletion", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_name = self.ai_assistant_settings.get('agent_name', '–∞–≥–µ–Ω—Ç–∞')
            await callback.message.edit_text("üîÑ –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞...")
            
            # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
            await self.db.clear_ai_configuration(self.bot_id)
            
            # –õ–æ–∫–∞–ª—å–Ω–æ —Ç–æ–∂–µ –æ—á–∏—â–∞–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'none'}
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin_main)
            text = f"""
‚úÖ <b>OpenAI –∞–≥–µ–Ω—Ç "{agent_name}" —É–¥–∞–ª–µ–Ω!</b>

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            logger.info("‚úÖ OpenAI agent deleted successfully (simple method)")
            
        except Exception as e:
            logger.error("üí• Error in simple deletion", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    # ===== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• =====
    
    async def handle_sync_agent_data(self, callback: CallbackQuery, is_owner_check):
        """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üîÑ Manual agent data sync requested", bot_id=self.bot_id)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            success = await self.db.sync_agent_data_fields(bot_id=self.bot_id)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                validation = await self.db.validate_agent_data_consistency(self.bot_id)
                
                status = validation.get('overall_status', 'unknown')
                if status == 'consistent':
                    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    recommendations = validation.get('recommendations', [])
                    await callback.answer(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(recommendations)}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error("üí• Error in manual sync", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)
