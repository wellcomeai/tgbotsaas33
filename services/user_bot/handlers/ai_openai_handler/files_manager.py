"""
Files Manager Mixin –¥–ª—è OpenAI Handler
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ Vector Stores –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
–í–∫–ª—é—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Vector Store
"""

import structlog
from datetime import datetime
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ...states import AISettingsStates

logger = structlog.get_logger()


class FilesManagerMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ Vector Stores"""

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò –ò VECTOR STORES =====

    async def handle_upload_files(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è file_search —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö vector stores
            from services.openai_assistant import openai_client
            
            success, vector_stores = await openai_client.list_vector_stores()
            
            # –ò—â–µ–º vector store –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_vector_store = None
            vector_store_name = f"Bot_{self.bot_id}_Knowledge"
            
            if success:
                for store in vector_stores:
                    if store['name'] == vector_store_name:
                        bot_vector_store = store
                        break
            
            files_info = ""
            if bot_vector_store:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ file_counts –æ–±—ä–µ–∫—Ç–∞
                file_counts = bot_vector_store.get('file_counts', {})
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è file_counts
                total_files, processed_files = self._safe_extract_file_counts(file_counts)
                
                files_info = f"\n\nüìä <b>–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:</b>\n‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}"
                
                logger.info("üìä Vector store file counts", 
                           vector_store_id=bot_vector_store.get('id', 'unknown'),
                           total_files=total_files,
                           processed_files=processed_files)
            
            text = f"""
üìÅ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞</b>

<b>üîç File Search - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º</b>

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
- Word —Ñ–∞–π–ª—ã (.docx)
- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)
- Markdown —Ñ–∞–π–ª—ã (.md)

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
2. OpenAI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –∏—Ö
3. –ê–≥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤{files_info}

<b>–õ–∏–º–∏—Ç—ã:</b>
- –ú–∞–∫—Å–∏–º—É–º 512 –ú–ë –Ω–∞ —Ñ–∞–π–ª  
- –î–æ 10,000 —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
- –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.10/–ì–ë/–¥–µ–Ω—å + $2.50 –∑–∞ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
"""
            
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            keyboard_buttons.append([
                InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="openai_start_upload")
            ])
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ —Ñ–∞–π–ª—ã" –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            openai_settings = self.ai_assistant_settings.get('openai_settings', {})
            uploaded_files = openai_settings.get('uploaded_files', [])

            if bot_vector_store or uploaded_files:
                files_text = f"üìÅ –ú–æ–∏ —Ñ–∞–π–ª—ã ({len(uploaded_files)})" if uploaded_files else "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏"
                keyboard_buttons.append([
                    InlineKeyboardButton(text=files_text, callback_data="openai_manage_files")
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            logger.info("‚úÖ Upload files menu displayed successfully", 
                       bot_id=self.bot_id,
                       has_existing_store=bool(bot_vector_store))
            
        except Exception as e:
            logger.error("üí• Error showing upload files menu", 
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)

    async def handle_start_upload(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(AISettingsStates.admin_uploading_documents)
        await state.update_data(uploaded_files=[])
        
        text = """
üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
- PDF (.pdf)
- Word (.docx)  
- –¢–µ–∫—Å—Ç (.txt)
- Markdown (.md)

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º –≤ —ç—Ç–æ—Ç —á–∞—Ç
2. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="openai_finish_upload")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_upload_files")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_document_upload(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        if not is_owner_check(message.from_user.id):
            return
        
        if not message.document:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —Ñ–∞–π–ª")
            return
        
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        allowed_extensions = ['.pdf', '.docx', '.txt', '.md']
        file_extension = None
        
        if document.file_name:
            file_extension = '.' + document.file_name.split('.')[-1].lower()
        
        if not file_extension or file_extension not in allowed_extensions:
            await message.answer(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(allowed_extensions)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 512 –ú–ë)
        max_size = 512 * 1024 * 1024  # 512 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
        if document.file_size > max_size:
            await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 512 –ú–ë")
            return
        
        try:
            progress_msg = await message.answer(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {document.file_name}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            bot = message.bot
            file_info = await bot.get_file(document.file_id)
            
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
                temp_file_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
            await bot.download_file(file_info.file_path, temp_file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ OpenAI
            from services.openai_assistant import openai_client
            
            success, file_data = await openai_client.upload_file_to_openai(
                temp_file_path, 
                document.file_name
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                data = await state.get_data()
                uploaded_files = data.get('uploaded_files', [])
                
                uploaded_files.append({
                    'file_id': file_data['id'],
                    'filename': file_data['filename'],
                    'size': file_data['bytes']
                })
                
                await state.update_data(uploaded_files=uploaded_files)
                
                file_size_mb = round(file_data['bytes'] / (1024 * 1024), 2)
                
                # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–∫–∞–∑–æ–º –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                await progress_msg.edit_text(
                    f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {document.file_name} ({file_size_mb} –ú–ë)\n\n"
                    f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}\n"
                    f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {sum(f['size']/(1024*1024) for f in uploaded_files):.1f} –ú–ë\n\n"
                    f"üîÑ <b>–ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É\"",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="openai_finish_upload")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_upload_files")]
                    ])
                )
                
            else:
                error_msg = file_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {error_msg}")
            
        except Exception as e:
            logger.error("üí• Error uploading document", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

    async def handle_finish_upload(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            data = await state.get_data()
            uploaded_files = data.get('uploaded_files', [])
            
            if not uploaded_files:
                await callback.answer("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", show_alert=True)
                return
            
            progress_msg = await callback.message.edit_text("üîÑ –°–æ–∑–¥–∞—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
            
            from services.openai_assistant import openai_client
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º vector store
            vector_store_name = f"Bot_{self.bot_id}_Knowledge"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ vector store
            success, vector_stores = await openai_client.list_vector_stores()
            existing_store = None
            
            if success:
                for store in vector_stores:
                    if store['name'] == vector_store_name:
                        existing_store = store
                        break
            
            if existing_store:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π vector store
                vector_store_id = existing_store['id']
                logger.info("üìÅ Using existing vector store", vector_store_id=vector_store_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π vector store
                success, store_data = await openai_client.create_vector_store(vector_store_name)
                
                if not success:
                    await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {store_data.get('error')}")
                    return
                
                vector_store_id = store_data['id']
                logger.info("‚úÖ Created new vector store", vector_store_id=vector_store_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ vector store
            file_ids = [f['file_id'] for f in uploaded_files]
            
            success, result = await openai_client.add_files_to_vector_store(vector_store_id, file_ids)
            
            if success:
                # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î
                files_info = []
                for file_data in uploaded_files:
                    files_info.append({
                        "filename": file_data['filename'],
                        "openai_file_id": file_data['file_id'],
                        "uploaded_at": datetime.now().isoformat(),
                        "size_bytes": file_data['size'],
                        "size_mb": round(file_data['size'] / (1024 * 1024), 2)
                    })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º vector store –ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
                save_success = await self._save_vector_store_and_files(vector_store_id, files_info)
                
                if not save_success:
                    await progress_msg.edit_text(
                        "‚ùå –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ OpenAI, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∞–≥–µ–Ω—Ç—É. "
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                total_files = len(uploaded_files)
                total_size = sum(f['size'] for f in uploaded_files)
                total_size_mb = round(total_size / (1024 * 1024), 2)
                
                success_text = f"""
‚úÖ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–≥–µ–Ω—Ç—É!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_files}
- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb} –ú–ë
- Vector Store ID: {vector_store_id[:15]}...

üß∞ <b>File Search –≤–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>
–í–∞—à –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.

<b>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:</b>
"""
                
                for i, file_info in enumerate(uploaded_files, 1):
                    filename = file_info['filename']
                    size_mb = round(file_info['size'] / (1024 * 1024), 2)
                    success_text += f"{i}. {filename} ({size_mb} –ú–ë)\n"
                
                await progress_msg.edit_text(
                    success_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="openai_test")],
                        [InlineKeyboardButton(text="üìÅ –ö –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", callback_data="openai_upload_files")]
                    ])
                )
                
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {error_msg}")
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Error finishing upload", error=str(e), exc_info=True)
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            await state.clear()

    async def _save_vector_store_and_files(self, vector_store_id: str, files_info: list) -> bool:
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ù–û–í–´–ô –º–µ—Ç–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è vector store + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –º–µ–Ω—é"""
        try:
            logger.info("üíæ Saving vector store with files info", 
                       vector_store_id=vector_store_id,
                       files_count=len(files_info),
                       bot_id=self.bot_id)
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º vector store (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            from database.managers.ai_manager import AIManager
            success = await AIManager.save_vector_store_ids(self.bot_id, [vector_store_id])
            
            if not success:
                logger.error("‚ùå Failed to save vector store")
                return False
            
            # 2. –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ openai_settings
            settings = self.ai_assistant_settings.copy()
            openai_settings = settings.get('openai_settings', {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
            existing_files = openai_settings.get('uploaded_files', [])
            existing_files.extend(files_info)
            openai_settings['uploaded_files'] = existing_files
            openai_settings['files_last_updated'] = datetime.now().isoformat()
            
            settings['openai_settings'] = openai_settings
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_ai_assistant(self.bot_id, settings=settings)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.ai_assistant_settings = settings
            
            logger.info("‚úÖ Vector store and files info saved", 
                       total_files=len(existing_files),
                       new_files=len(files_info))
            
            return True
            
        except Exception as e:
            logger.error("üí• Failed to save vector store and files", 
                        error=str(e), exc_info=True)
            return False

    async def _save_and_enable_vector_store(self, vector_store_id: str) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ vector store ID –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ file_search"""
        try:
            logger.info("üíæ Saving vector store and enabling file_search", 
                       vector_store_id=vector_store_id,
                       bot_id=self.bot_id)
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ú–ï–¢–û–î –ò–ó AI MANAGER
            from database.managers.ai_manager import AIManager
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º vector store IDs —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            success = await AIManager.save_vector_store_ids(self.bot_id, [vector_store_id])
            
            if not success:
                logger.error("‚ùå Failed to save vector store via AIManager")
                return False
            
            logger.info("‚úÖ Vector store saved via AIManager")
            
            # ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
            sync_success = await self._sync_with_db_state(force=True)
            if sync_success:
                logger.info("‚úÖ State synchronized after vector store save")
            else:
                logger.warning("‚ö†Ô∏è Failed to sync state after vector store save")
            
            # ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            await self._diagnose_vector_store_save(vector_store_id)
            
            return True
            
        except Exception as e:
            logger.error("üí• Failed to save and enable vector store", 
                        vector_store_id=vector_store_id,
                        bot_id=self.bot_id,
                        error=str(e),
                        exc_info=True)
            return False

    async def _diagnose_vector_store_save(self, expected_vector_store_id: str):
        """ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è vector store"""
        try:
            logger.info("ü©∫ Diagnosing vector store save", 
                       expected_id=expected_vector_store_id)
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            local_openai_settings = self.ai_assistant_settings.get('openai_settings', {})
            local_vector_ids = local_openai_settings.get('vector_store_ids', [])
            local_file_search = local_openai_settings.get('enable_file_search', False)
            
            logger.info("üìä Local state check", 
                       local_vector_ids=local_vector_ids,
                       local_file_search=local_file_search,
                       expected_found_locally=expected_vector_store_id in local_vector_ids)
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ AIManager
            from database.managers.ai_manager import AIManager
            vector_info = await AIManager.get_vector_store_info(self.bot_id)
            
            db_vector_ids = vector_info.get('vector_store_ids', [])
            db_file_search = vector_info.get('file_search_enabled', False)
            
            logger.info("üìä Database state check", 
                       db_vector_ids=db_vector_ids,
                       db_file_search=db_file_search,
                       expected_found_in_db=expected_vector_store_id in db_vector_ids)
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            fresh_bot = await self.db.get_bot_by_id(self.bot_id, fresh=True)
            if fresh_bot and fresh_bot.openai_settings:
                raw_settings = fresh_bot.openai_settings
                raw_vector_ids = raw_settings.get('vector_store_ids', [])
                raw_file_search = raw_settings.get('enable_file_search', False)
                
                logger.info("üìä Raw database check", 
                           raw_vector_ids=raw_vector_ids,
                           raw_file_search=raw_file_search,
                           expected_found_raw=expected_vector_store_id in raw_vector_ids)
            else:
                logger.warning("‚ö†Ô∏è Could not get raw database state")
            
            # 4. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if expected_vector_store_id in db_vector_ids and db_file_search:
                logger.info("‚úÖ DIAGNOSIS SUCCESS: Vector store properly saved and configured")
                return True
            else:
                logger.error("‚ùå DIAGNOSIS FAILED: Vector store not properly saved", 
                           expected_id=expected_vector_store_id,
                           found_in_db=expected_vector_store_id in db_vector_ids,
                           file_search_enabled=db_file_search)
                return False
                
        except Exception as e:
            logger.error("üí• Vector store diagnosis failed", error=str(e))
            return False

    async def handle_manage_files(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ü–æ–∫–∞–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            openai_settings = self.ai_assistant_settings.get('openai_settings', {})
            uploaded_files = openai_settings.get('uploaded_files', [])
            vector_store_ids = openai_settings.get('vector_store_ids', [])
            
            logger.info("üìÅ Showing uploaded files", 
                       files_count=len(uploaded_files),
                       vector_stores=len(vector_store_ids))
            
            if not uploaded_files:
                # –ù–µ—Ç —Ñ–∞–π–ª–æ–≤
                text = """
üìÅ <b>–ú–æ–∏ —Ñ–∞–π–ª—ã</b>

üìã <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞</b>

–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç –º–æ–≥ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∏–º.
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="openai_start_upload")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="openai_upload_files")]
                ])
            else:
                # –ï—Å—Ç—å —Ñ–∞–π–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                text = f"""
üìÅ <b>–ú–æ–∏ —Ñ–∞–π–ª—ã ({len(uploaded_files)})</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}
- Vector Stores: {len(vector_store_ids)}

üìã <b>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:</b>
"""
                
                total_size_mb = 0
                for i, file_info in enumerate(uploaded_files, 1):
                    filename = file_info.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')
                    size_mb = file_info.get('size_mb', 0)
                    uploaded_date = file_info.get('uploaded_at', '')
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    try:
                        if uploaded_date:
                            from datetime import datetime
                            date_obj = datetime.fromisoformat(uploaded_date.replace('Z', '+00:00'))
                            date_str = date_obj.strftime('%d.%m.%Y %H:%M')
                        else:
                            date_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    except:
                        date_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    
                    text += f"{i}. <b>{filename}</b>\n"
                    text += f"   üìä {size_mb} –ú–ë ‚Ä¢ üìÖ {date_str}\n\n"
                    total_size_mb += size_mb
                
                text += f"üíæ <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {total_size_mb:.1f} –ú–ë"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="openai_start_upload")],
                    [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π", callback_data="openai_clear_knowledge")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="openai_upload_files")]
                ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("üí• Error showing files", error=str(e), exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤", show_alert=True)

    async def handle_clear_knowledge(self, callback: CallbackQuery, is_owner_check):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = """
üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="openai_confirm_clear_knowledge")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_manage_files")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_verify_file_search(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ file search"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            await self._sync_with_db_state(force=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ vector stores —á–µ—Ä–µ–∑ AIManager
            from database.managers.ai_manager import AIManager
            vector_info = await AIManager.get_vector_store_info(self.bot_id)
            
            vector_store_ids = vector_info.get('vector_store_ids', [])
            file_search_enabled = vector_info.get('file_search_enabled', False)
            vector_stores_count = vector_info.get('vector_stores_count', 0)
            last_updated = vector_info.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            local_settings = self.ai_assistant_settings.get('openai_settings', {})
            local_vector_ids = local_settings.get('vector_store_ids', [])
            local_file_search = local_settings.get('enable_file_search', False)
            
            status_icon = "‚úÖ" if file_search_enabled and vector_store_ids else "‚ùå"
            sync_icon = "‚úÖ" if local_vector_ids == vector_store_ids else "‚ö†Ô∏è"
            
            text = f"""
üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ File Search</b>

{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {'–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if file_search_enabled else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}

üìä <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ Vector Store IDs: {len(vector_store_ids)}
‚Ä¢ File Search: {'–í–∫–ª—é—á–µ–Ω' if file_search_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}

üîÑ <b>–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>
‚Ä¢ Vector Store IDs: {len(local_vector_ids)} 
‚Ä¢ File Search: {'–í–∫–ª—é—á–µ–Ω' if local_file_search else '–í—ã–∫–ª—é—á–µ–Ω'}
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync_icon}

<b>–°–ø–∏—Å–æ–∫ Vector Store IDs:</b>
"""
            
            for i, vs_id in enumerate(vector_store_ids, 1):
                text += f"{i}. {vs_id}\n"
                
            if not vector_store_ids:
                text += "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö vector stores\n"
                
            text += f"\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            
            if not file_search_enabled:
                text += "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ File Search –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
            if not vector_store_ids:
                text += "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
            if local_vector_ids != vector_store_ids:
                text += "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
            
            if file_search_enabled and vector_store_ids and local_vector_ids == vector_store_ids:
                text += "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", 
                                    callback_data="openai_force_sync_vectors")],
                [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã", 
                                    callback_data="openai_start_upload")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º", 
                                    callback_data="openai_tools_settings")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("üí• Error verifying file search", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

    async def handle_force_sync_vectors(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –ù–û–í–´–ô: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è vector stores"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            progress_msg = await callback.message.edit_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
            sync_success = await self._sync_with_db_state(force=True)
            
            if sync_success:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ vector stores
                from database.managers.ai_manager import AIManager
                vector_info = await AIManager.get_vector_store_info(self.bot_id)
                
                vector_store_ids = vector_info.get('vector_store_ids', [])
                
                await progress_msg.edit_text(
                    f"""‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>

üìä –ù–∞–π–¥–µ–Ω–æ vector stores: {len(vector_store_ids)}
üîÑ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                         [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", 
                                            callback_data="openai_test")]
                    ])
                )
            else:
                await progress_msg.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                                            callback_data="openai_verify_file_search")]
                    ])
                )
            
        except Exception as e:
            logger.error("üí• Error in force sync vectors", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)

    async def handle_confirm_clear_knowledge(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º vector store"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            progress_msg = await callback.message.edit_text("üîÑ –û—á–∏—â–∞—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            openai_settings = self.ai_assistant_settings.get('openai_settings', {})
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –Ω–æ –°–û–•–†–ê–ù–Ø–ï–ú vector store
            clear_success = await self._clear_vector_store_files_only()
            
            if clear_success:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._sync_with_db_state(force=True)
                
                await progress_msg.edit_text(
                    f"""‚úÖ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!</b>

üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(openai_settings.get('uploaded_files', []))}
üìÅ –§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ OpenAI Files
üîÑ Vector Store –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–≥—Ä—É–∑–∫–∞–º
üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤—è—Ç—Å—è –≤ —Ç–æ—Ç –∂–µ Vector Store

–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã", 
                                            callback_data="openai_start_upload")],
                        [InlineKeyboardButton(text="üìÅ –ö –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", 
                                            callback_data="openai_upload_files")]
                    ])
                )
            else:
                await progress_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                
        except Exception as e:
            logger.error("üí• Error clearing knowledge base", error=str(e))
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

    # ===== ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê =====

    async def _clear_vector_store_files_only(self) -> bool:
        """‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–æ –°–û–•–†–ê–ù–ï–ù–ò–ï vector store –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            logger.info("üßπ Clearing vector store files (keeping store)", bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏ vector stores
            openai_settings = self.ai_assistant_settings.get('openai_settings', {})
            uploaded_files = openai_settings.get('uploaded_files', [])
            vector_store_ids = openai_settings.get('vector_store_ids', [])
            
            if not vector_store_ids:
                logger.info("‚ÑπÔ∏è No vector stores to clear", bot_id=self.bot_id)
                # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º uploaded_files –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                return await self._clear_uploaded_files_info()
            
            from services.openai_assistant import openai_client
            
            # –£ –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω vector store –Ω–∞ –±–æ—Ç–∞
            vector_store_id = vector_store_ids[0]
            
            logger.info("üîç Processing vector store", 
                       vector_store_id=vector_store_id,
                       files_to_process=len(uploaded_files))
            
            # 1. ‚úÖ –û–ß–ò–©–ê–ï–ú —Ñ–∞–π–ª—ã –∏–∑ vector store (–ù–ï —É–¥–∞–ª—è–µ–º —Å–∞–º store!)
            clear_success = False
            try:
                clear_success = await openai_client.clear_vector_store_files(vector_store_id)
                if clear_success:
                    logger.info("‚úÖ Vector store files cleared successfully", 
                               vector_store_id=vector_store_id)
                else:
                    logger.warning("‚ö†Ô∏è Vector store files clearing returned False", 
                                  vector_store_id=vector_store_id)
            except Exception as e:
                logger.error("üí• Error clearing vector store files", 
                            vector_store_id=vector_store_id, error=str(e))
            
            # 2. ‚úÖ –£–î–ê–õ–Ø–ï–ú —Ñ–∞–π–ª—ã –∏–∑ OpenAI Files storage (—á—Ç–æ–±—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)
            deleted_files = 0
            for file_info in uploaded_files:
                openai_file_id = file_info.get('openai_file_id')
                filename = file_info.get('filename', 'unknown')
                
                if openai_file_id:
                    try:
                        success, message = await openai_client.delete_file(openai_file_id)
                        if success:
                            deleted_files += 1
                            logger.info("‚úÖ File deleted from OpenAI Files", 
                                       file_id=openai_file_id,
                                       filename=filename)
                        else:
                            logger.warning("‚ö†Ô∏è Failed to delete file from OpenAI Files", 
                                         file_id=openai_file_id, 
                                         filename=filename,
                                         error=message)
                    except Exception as e:
                        logger.error("üí• Error deleting file from OpenAI Files", 
                                   file_id=openai_file_id, 
                                   filename=filename,
                                   error=str(e))
            
            # 3. ‚úÖ –û–ß–ò–©–ê–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î (–ù–û –°–û–•–†–ê–ù–Ø–ï–ú vector_store_ids!)
            files_clear_success = await self._clear_uploaded_files_info()
            
            overall_success = (clear_success or len(uploaded_files) == 0) and files_clear_success
            
            logger.info("üéØ Vector store clearing completed", 
                       bot_id=self.bot_id,
                       vector_store_cleared=clear_success,
                       files_deleted_from_openai=deleted_files,
                       files_info_cleared=files_clear_success,
                       overall_success=overall_success,
                       vector_store_preserved=True)  # ‚úÖ Store –æ—Å—Ç–∞–µ—Ç—Å—è!
            
            return overall_success
            
        except Exception as e:
            logger.error("üí• Failed to clear vector store files", 
                        bot_id=self.bot_id,
                        error=str(e),
                        exc_info=True)
            return False

    async def _clear_uploaded_files_info(self) -> bool:
        """‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î (vector stores –æ—Å—Ç–∞—é—Ç—Å—è!)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.ai_assistant_settings.copy()
            openai_settings = settings.get('openai_settings', {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            files_count = len(openai_settings.get('uploaded_files', []))
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –¢–û–õ–¨–ö–û uploaded_files, –ù–ï –¢–†–û–ì–ê–ï–ú vector_store_ids!
            openai_settings['uploaded_files'] = []
            openai_settings['files_cleared_at'] = datetime.now().isoformat()
            # vector_store_ids –û–°–¢–ê–ï–¢–°–Ø –∫–∞–∫ –±—ã–ª!
            
            settings['openai_settings'] = openai_settings
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.update_ai_assistant(self.bot_id, settings=settings)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.ai_assistant_settings = settings
            
            logger.info("‚úÖ Files info cleared from DB (vector stores preserved)", 
                       bot_id=self.bot_id,
                       cleared_files_count=files_count,
                       vector_stores_kept=len(settings.get('openai_settings', {}).get('vector_store_ids', [])))
            
            return True
            
        except Exception as e:
            logger.error("üí• Failed to clear uploaded files info", 
                        bot_id=self.bot_id, error=str(e))
            return False

    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò =====

    async def _clear_vector_stores_completely(self) -> bool:
        """‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ vector stores + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö (–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
        try:
            logger.info("üóëÔ∏è Complete vector stores clearing", bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º vector store IDs –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            from database.managers.ai_manager import AIManager
            vector_info = await AIManager.get_vector_store_info(self.bot_id)
            vector_store_ids = vector_info.get('vector_store_ids', [])
            
            if vector_store_ids:
                from services.openai_assistant import openai_client
                
                # –£–¥–∞–ª—è–µ–º vector stores –∏–∑ OpenAI
                for vs_id in vector_store_ids:
                    try:
                        success, message = await openai_client.delete_vector_store(vs_id)
                        if success:
                            logger.info("‚úÖ Vector store deleted", vector_store_id=vs_id)
                        else:
                            logger.warning("‚ö†Ô∏è Failed to delete vector store", 
                                         vector_store_id=vs_id, error=message)
                    except Exception as e:
                        logger.error("üí• Error deleting vector store", 
                                   vector_store_id=vs_id, error=str(e))
                
                # –û—á–∏—â–∞–µ–º –∏–∑ –ë–î –ò —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
                clear_success = await AIManager.clear_vector_stores(self.bot_id)
                
                if clear_success:
                    # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ settings
                    settings = self.ai_assistant_settings.copy()
                    openai_settings = settings.get('openai_settings', {})
                    
                    files_count = len(openai_settings.get('uploaded_files', []))
                    openai_settings['uploaded_files'] = []
                    openai_settings['files_cleared_at'] = datetime.now().isoformat()
                    
                    settings['openai_settings'] = openai_settings
                    
                    await self.db.update_ai_assistant(self.bot_id, settings=settings)
                    self.ai_assistant_settings = settings
                    
                    logger.info("‚úÖ Vector stores and files completely cleared", 
                               cleared_files_count=files_count)
                    
                    return True
            
            return False
            
        except Exception as e:
            logger.error("üí• Failed to clear vector stores completely", 
                        error=str(e), exc_info=True)
            return False

    # ===== –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ =====

    async def _clear_vector_stores_and_files(self) -> bool:
        """‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ê–ª–∏–∞—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        logger.warning("‚ö†Ô∏è Using deprecated _clear_vector_stores_and_files, consider using _clear_vector_store_files_only for better UX")
        return await self._clear_vector_stores_completely()
