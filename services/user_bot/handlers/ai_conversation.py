"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å TokenManager, MessageLimitManager –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∑–≤–∞—Ç—å –ò–ò", –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
"""

import structlog
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from ..states import AISettingsStates
from ..keyboards import AIKeyboards

logger = structlog.get_logger()


class ConversationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, db, bot_config: dict, ai_assistant, user_bot, token_manager, message_limit_manager):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.ai_assistant = ai_assistant
        self.user_bot = user_bot
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.token_manager = token_manager
        self.message_limit_manager = message_limit_manager
        
        # –•—Ä–∞–Ω–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self._ai_assistant_id = bot_config.get('ai_assistant_id')
        self._ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        logger.info("üí¨ ConversationHandler initialized", 
                   bot_id=self.bot_id,
                   has_token_manager=bool(token_manager),
                   has_message_limit_manager=bool(message_limit_manager))

    # ===== –°–í–û–ô–°–¢–í–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ê–ö–¢–£–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú =====
    
    @property
    def ai_assistant_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ ID –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_id
    
    @ai_assistant_id.setter
    def ai_assistant_id(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_id = value
    
    @property 
    def ai_assistant_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_settings
    
    @ai_assistant_settings.setter
    def ai_assistant_settings(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_settings = value

    # ===== –ö–ù–û–ü–ö–ê "–ü–û–ó–í–ê–¢–¨ –ò–ò" =====
    
    async def handle_ai_button_click(self, message: Message, state: FSMContext, has_ai_agent_check, get_agent_type_check):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ò–ò - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""
        logger.info("ü§ñ AI button clicked", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        try:
            user = message.from_user
            agent_type = get_agent_type_check()
            
            logger.info("üìä AI button click context", 
                       agent_type=agent_type,
                       has_ai_agent=has_ai_agent_check())
            
            # –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –µ—Å—Ç—å –ª–∏ –∞–≥–µ–Ω—Ç –≤–æ–æ–±—â–µ
            if not has_ai_agent_check() or agent_type == 'none':
                logger.warning("‚ùå AI agent not configured")
                
                # –ù–µ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                main_keyboard = await self._restore_main_keyboard()
                await message.answer(
                    "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=main_keyboard
                )
                return
            
            # –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å
            logger.info("‚úÖ Starting AI conversation (no blocking checks)", 
                       user_id=user.id,
                       agent_type=agent_type)
            
            await state.set_state(AISettingsStates.in_ai_conversation)
            await state.update_data(is_test_mode=False, agent_type=agent_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            agent_name = "–ò–ò –ê–≥–µ–Ω—Ç"
            agent_info = ""
            
            if agent_type == 'openai':
                agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                settings = self.ai_assistant_settings.get('openai_settings', {})
                enabled_tools = []
                if settings.get('enable_web_search'):
                    enabled_tools.append("üåê –≤–µ–±-–ø–æ–∏—Å–∫")
                if settings.get('enable_code_interpreter'):
                    enabled_tools.append("üêç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞")
                if settings.get('enable_file_search'):
                    enabled_tools.append("üìÅ –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º")
                
                if enabled_tools:
                    agent_info = f"\n\nüß∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(enabled_tools)}"
                    
            elif agent_type == 'chatforyou':
                platform = self.ai_assistant_settings.get('detected_platform')
                platform_names = {
                    'chatforyou': 'ChatForYou',
                    'protalk': 'ProTalk'
                }
                platform_display = platform_names.get(platform, platform)
                if platform_display:
                    agent_info = f"\n\nüåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_display}"
            
            welcome_text = f"""
ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø {agent_name}</b>

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!{agent_info}

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>
"""
            
            keyboard = AIKeyboards.conversation_menu()
            
            await message.answer(
                welcome_text,
                reply_markup=keyboard
            )
            
            logger.info("‚úÖ AI conversation started successfully (simplified flow)")
            
        except Exception as e:
            logger.error("üí• Error starting AI conversation", 
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            
            # –ù–µ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            main_keyboard = await self._restore_main_keyboard()
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ò–ò –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_keyboard
            )

    # ===== –û–°–ù–û–í–ù–û–ô –î–ò–ê–õ–û–ì =====
    
    async def handle_ai_conversation(self, message: Message, state: FSMContext, is_owner_check, get_agent_type_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º - –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–µ—Å—å + –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üí¨ AI conversation message", 
                   user_id=message.from_user.id,
                   message_length=len(message.text),
                   bot_id=self.bot_id)
        
        # –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        if message.text == "üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò":
            await self.handle_ai_exit(message, state)
            return
        
        try:
            data = await state.get_data()
            is_test_mode = data.get('is_test_mode', False)
            agent_type = data.get('agent_type', get_agent_type_check())
            user_id = message.from_user.id
            
            logger.info("üìä Conversation context", 
                       is_test_mode=is_test_mode,
                       agent_type=agent_type,
                       user_id=user_id)
            
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
            if is_test_mode and not is_owner_check(user_id):
                logger.warning("üö´ Unauthorized test conversation", user_id=user_id)
                return
            
            # ===== –í–°–ï –ü–†–û–í–ï–†–ö–ò –ó–î–ï–°–¨ - –í –î–ò–ê–õ–û–ì–ï =====
            
            # 1. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤)
            if not is_test_mode:  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ª–∏–º–∏—Ç—ã –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—Ç
                can_send, error_message = await self.message_limit_manager.check_daily_message_limit(user_id)
                if not can_send:
                    logger.warning("‚ùå Daily message limit exceeded", 
                                  user_id=user_id,
                                  bot_id=self.bot_id)
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                    ])
                    
                    await message.answer(error_message, reply_markup=keyboard)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    main_keyboard = await self._restore_main_keyboard()
                    await message.answer(
                        "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
                        reply_markup=main_keyboard
                    )
                    return
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤ - —Ç–æ–∫–µ–Ω—ã
            if agent_type == 'openai':
                can_proceed, error_message = await self.token_manager.check_token_limits_before_request(user_id)
                if not can_proceed:
                    logger.warning("‚ùå Token limit exceeded during conversation", 
                                  user_id=user_id)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä—è–º–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–π—Ç–∏
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                    ])
                    
                    # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                    if is_owner_check(user_id):
                        keyboard.inline_keyboard.insert(0, [
                            InlineKeyboardButton(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                                               callback_data="request_token_topup")
                        ])
                    
                    await message.answer(error_message, reply_markup=keyboard)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                    main_keyboard = await self._restore_main_keyboard()
                    await message.answer(
                        "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –ò–ò –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏!",
                        reply_markup=main_keyboard
                    )
                    return
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ChatForYou –∞–≥–µ–Ω—Ç–æ–≤ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            elif agent_type == 'chatforyou':
                platform = self.ai_assistant_settings.get('detected_platform')
                if platform == 'chatforyou' and not self.ai_assistant_settings.get('chatforyou_bot_id'):
                    logger.warning("‚ùå ChatForYou configuration incomplete during conversation")
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                    ])
                    
                    await message.answer(
                        "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞ –Ω–µ–ø–æ–ª–Ω–∞—è.\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChatForYou.",
                        reply_markup=keyboard
                    )
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                    main_keyboard = await self._restore_main_keyboard()
                    await message.answer(
                        "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!",
                        reply_markup=main_keyboard
                    )
                    return
            
            # ===== –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –û–ë–†–ê–©–ê–ï–ú–°–Ø –ö –ò–ò =====
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing
            await message.bot.send_chat_action(message.chat.id, "typing")
            
            ai_response = None
            
            if agent_type == 'chatforyou':
                logger.info("üåê Processing ChatForYou conversation")
                ai_response = await self._handle_chatforyou_conversation(message, data)
            elif agent_type == 'openai':
                logger.info("üé® Processing OpenAI conversation via Responses API")
                ai_response = await self._handle_openai_conversation(message, data)
            else:
                logger.warning("‚ùì Unknown agent type for conversation", agent_type=agent_type)
            
            if ai_response:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
                if is_test_mode:
                    # –î–ª—è –∞–¥–º–∏–Ω–∞ - inline –∫–Ω–æ–ø–∫–∞
                    keyboard_buttons = [
                        [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è OpenAI
                    if agent_type == 'openai':
                        keyboard_buttons.insert(0, [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="openai_clear_context")])
                    
                    keyboard_buttons.append([InlineKeyboardButton(text="üîß –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_ai")])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                else:
                    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - reply –∫–Ω–æ–ø–∫–∞
                    keyboard = AIKeyboards.conversation_menu()
                
                logger.info("‚úÖ AI response received and sent", 
                           response_length=len(ai_response),
                           has_keyboard=bool(keyboard))
                
                await message.answer(ai_response, reply_markup=keyboard)
                
                # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤)
                if not is_test_mode and ai_response:
                    try:
                        await self.message_limit_manager.increment_daily_message_usage(user_id)
                        logger.info("üìä Daily message usage incremented", user_id=user_id)
                    except Exception as usage_error:
                        logger.error("‚ö†Ô∏è Failed to increment message usage", error=str(usage_error))
                
                # –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù–´ –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è OpenAI)
                if agent_type == 'openai' and ai_response:
                    try:
                        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                        input_tokens = len(message.text.split()) * 1.3  # –ø—Ä–∏–º–µ—Ä–Ω–æ
                        output_tokens = len(ai_response.split()) * 1.3
                        
                        await self.token_manager.save_token_usage_after_response(
                            user_id=user_id,
                            input_tokens=int(input_tokens),
                            output_tokens=int(output_tokens),
                            admin_chat_id=message.chat.id if is_test_mode else None
                        )
                        
                        logger.info("üìä Token usage saved", 
                                   input_tokens=int(input_tokens),
                                   output_tokens=int(output_tokens))
                    except Exception as token_error:
                        logger.error("‚ö†Ô∏è Failed to save token usage", error=str(token_error))
                
            else:
                logger.error("‚ùå No AI response received")
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                ])
                
                await message.answer(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=keyboard
                )
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                main_keyboard = await self._restore_main_keyboard()
                await message.answer(
                    "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ!",
                    reply_markup=main_keyboard
                )
                
        except Exception as e:
            logger.error("üí• Error in AI conversation", 
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
            ])
            
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É.",
                reply_markup=keyboard
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            main_keyboard = await self._restore_main_keyboard()
            await message.answer(
                "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!",
                reply_markup=main_keyboard
            )

    # ===== –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –ö –ö–û–ù–ö–†–ï–¢–ù–´–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú =====
    
    async def _handle_chatforyou_conversation(self, message: Message, data: dict) -> str:
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∫ ChatForYouHandler"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ChatForYou
            from .ai_chatforyou_handler import ChatForYouHandler
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            chatforyou_handler = ChatForYouHandler(
                self.db, self.bot_config, self.ai_assistant, self.user_bot
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            chatforyou_handler.ai_assistant_id = self.ai_assistant_id
            chatforyou_handler.ai_assistant_settings = self.ai_assistant_settings
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return await chatforyou_handler.handle_chatforyou_conversation(message, data)
            
        except Exception as e:
            logger.error("üí• Error in ChatForYou conversation delegation", 
                        error=str(e),
                        error_type=type(e).__name__)
            return None
    
    async def _handle_openai_conversation(self, message: Message, data: dict) -> str:
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∫ OpenAIHandler"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI
            from .ai_openai_handler import OpenAIHandler
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            openai_handler = OpenAIHandler(
                self.db, self.bot_config, self.ai_assistant, self.user_bot
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            openai_handler.ai_assistant_id = self.ai_assistant_id
            openai_handler.ai_assistant_settings = self.ai_assistant_settings
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return await openai_handler.handle_openai_conversation(message, data)
            
        except Exception as e:
            logger.error("üí• Error in OpenAI conversation delegation", 
                        error=str(e),
                        error_type=type(e).__name__)
            return None

    # ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ò–ê–õ–û–ì–û–í =====
    
    async def handle_ai_exit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (reply –∫–Ω–æ–ø–∫–∞)"""
        logger.info("üö™ AI conversation exit via reply button", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        try:
            await state.clear()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            main_keyboard = await self._restore_main_keyboard()
            
            await message.answer(
                "üëã –î–∏–∞–ª–æ–≥ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ò–ò –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
                reply_markup=main_keyboard
            )
            
            logger.info("‚úÖ User conversation ended successfully with keyboard restored")
            
        except Exception as e:
            logger.error("üí• Error ending AI conversation", 
                        error=str(e),
                        error_type=type(e).__name__)
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ö–æ—Ç—è –±—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ò–ò
            fallback_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò")]
                ],
                resize_keyboard=True,
                persistent=True
            )
            
            await message.answer(
                "üëã –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=fallback_keyboard
            )

    async def handle_exit_conversation(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        logger.info("üö™ Exit conversation via inline button", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await callback.answer()
        await state.clear()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
            ])
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_keyboard = await self._restore_main_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer(
            "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –ò–ò!",
            reply_markup=main_keyboard
        )
        
        logger.info("‚úÖ Admin conversation ended successfully via inline button with keyboard restored")

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _restore_main_keyboard(self) -> any:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from ..keyboards import UserKeyboards
            main_keyboard = UserKeyboards.main_menu()
            logger.info("‚úÖ Main keyboard restored from UserKeyboards")
            return main_keyboard
        except (ImportError, AttributeError):
            # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò
            main_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò")]
                ],
                resize_keyboard=True,
                persistent=True
            )
            logger.info("‚úÖ Fallback keyboard created with AI button")
            return main_keyboard

    async def _send_error_with_keyboard_restore(self, message: Message, error_text: str, inline_keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
            if inline_keyboard:
                await message.answer(error_text, reply_markup=inline_keyboard)
            else:
                await message.answer(error_text)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            main_keyboard = await self._restore_main_keyboard()
            await message.answer(
                "üîß –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –ò–ò!",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error("üí• Error restoring keyboard", error=str(e))

    # ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–ê–ú–ò =====
    
    async def update_references(self, ai_assistant_id, ai_assistant_settings):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üîÑ Updating conversation handler references", 
                   new_ai_assistant_id=bool(ai_assistant_id))
        
        self.ai_assistant_id = ai_assistant_id
        self.ai_assistant_settings = ai_assistant_settings
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(self.token_manager, 'ai_assistant_settings'):
            self.token_manager.ai_assistant_settings = ai_assistant_settings
        if hasattr(self.message_limit_manager, 'ai_assistant_settings'):
            self.message_limit_manager.ai_assistant_settings = ai_assistant_settings
