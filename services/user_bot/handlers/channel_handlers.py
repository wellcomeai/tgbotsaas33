"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞
‚úÖ –¢–û–õ–¨–ö–û: –°–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ (join_request, chat_member) 
‚úÖ –¢–û–õ–¨–ö–û: –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ò–ò
‚ùå –ë–ï–ó: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (—ç—Ç–æ –≤ ai_handlers.py)

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ò–ò, –Ω–æ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—ë –Ω–∞–∂–∞—Ç–∏–µ
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ –ò–ò –∏ –¥–∏–∞–ª–æ–≥–∞ - –≤ ai_handlers.py  
- –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
- ‚úÖ –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞
- ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–µ–Ω handle_chat_member_join —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π + —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –æ–ø—ã—Ç –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
"""

import asyncio
import structlog
from aiogram import Dispatcher, F
from aiogram.types import (
    ChatMemberUpdated, ChatJoinRequest, Message,
    ReplyKeyboardRemove
)
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER, ChatMemberUpdatedFilter
from aiogram.exceptions import TelegramForbiddenError
from aiogram.enums import ParseMode
from ..keyboards import UserKeyboards
from ..formatters import MessageFormatter

logger = structlog.get_logger()


def register_channel_handlers(dp: Dispatcher, **kwargs):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ + –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ò–ò —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    funnel_manager = kwargs['funnel_manager']
    user_bot = kwargs.get('user_bot')
    owner_user_id = bot_config['owner_user_id']
    access_control = kwargs.get('access_control')  # ‚úÖ –ù–û–í–û–ï
    
    logger.info("üì∫ Registering channel handlers with OWNER ACCESS CONTROL", 
               bot_id=bot_config['bot_id'],
               has_access_control=bool(access_control))
    
    try:
        handler = ChannelHandler(db, bot_config, funnel_manager, user_bot, access_control)  # ‚úÖ –ù–û–í–û–ï
        
        # ===== –°–û–ë–´–¢–ò–Ø –ö–ê–ù–ê–õ–ê =====
        dp.chat_join_request.register(handler.handle_join_request_extended)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º handle_chat_member_join —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        dp.chat_member.register(
            handler.handle_chat_member_join,
            ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER)
        )
        
        dp.chat_member.register(
            handler.handle_chat_member_leave,
            ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER)
        )
        
        # ===== –ö–ù–û–ü–ö–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø (–¢–û–õ–¨–ö–û –ù–ï –ê–î–ú–ò–ù–´) =====
        dp.message.register(
            handler.handle_welcome_button_click,
            F.chat.type == "private",
            F.text.regexp(r'^(?!ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò$).{1,50}$'),
            F.from_user.id != owner_user_id
        )
        
        logger.info("‚úÖ Channel handlers registered successfully with access control", 
                   bot_id=bot_config['bot_id'],
                   owner_user_id=owner_user_id,
                   handlers=["join_request", "chat_member_join", "chat_member_leave", "welcome_button"])
        
    except Exception as e:
        logger.error("üí• Failed to register channel handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class ChannelHandler:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ + –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ò–ò —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    
    def __init__(self, db, bot_config: dict, funnel_manager, user_bot, access_control=None):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.funnel_manager = funnel_manager
        self.formatter = MessageFormatter()
        self.user_bot = user_bot
        self.access_control = access_control  # ‚úÖ –ù–û–í–û–ï
        
        # –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot = bot_config.get('bot')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è)
        self.stats = bot_config.get('stats', {})
        
        logger.info("‚úÖ ChannelHandler initialized with access control", 
                   bot_id=self.bot_id,
                   owner_user_id=self.owner_user_id,
                   has_bot_instance=bool(self.bot),
                   has_access_control=bool(self.access_control))

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _get_fresh_message_config(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î"""
        try:
            bot = await self.db.get_bot_by_id(self.bot_id, fresh=True)
            
            if not bot:
                logger.warning("‚ö†Ô∏è Bot not found for fresh config", bot_id=self.bot_id)
                return {}
            
            config = {
                'welcome_message': bot.welcome_message,
                'welcome_button_text': bot.welcome_button_text,
                'confirmation_message': bot.confirmation_message,
                'goodbye_message': bot.goodbye_message,
                'goodbye_button_text': bot.goodbye_button_text,
                'goodbye_button_url': bot.goodbye_button_url
            }
            
            logger.debug("‚úÖ Fresh message config loaded", 
                        bot_id=self.bot_id,
                        has_welcome=bool(config.get('welcome_message')),
                        has_welcome_button=bool(config.get('welcome_button_text')),
                        has_confirmation=bool(config.get('confirmation_message')))
            
            return config
            
        except Exception as e:
            logger.error("üí• Failed to get fresh message config", 
                        bot_id=self.bot_id, error=str(e))
            return {}
    
    async def _get_fresh_ai_config(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        try:
            ai_config = await self.db.get_ai_config(self.bot_id)
            
            if not ai_config:
                logger.debug("‚ùå No AI config found", bot_id=self.bot_id)
                return {}
            
            logger.debug("‚úÖ Fresh AI config loaded", 
                        bot_id=self.bot_id,
                        ai_enabled=ai_config.get('enabled', False),
                        ai_type=ai_config.get('type'),
                        has_agent_id=bool(ai_config.get('agent_id')))
            
            return ai_config
            
        except Exception as e:
            logger.error("üí• Failed to get fresh AI config", 
                        bot_id=self.bot_id, error=str(e))
            return {}
    
    async def _should_show_ai_button(self, user_id: int) -> tuple[bool, str]:
        """
        ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ò–ò
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò"
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è - –≤ ai_handlers.py
        
        Returns:
            tuple: (should_show, reason)
        """
        try:
            logger.info("üîç Checking AI button visibility", 
                       user_id=user_id, bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            fresh_ai_config = await self._get_fresh_ai_config()
            
            if not fresh_ai_config:
                reason = "No AI config in database"
                logger.debug(f"‚ùå AI button check failed: {reason}", 
                            user_id=user_id, bot_id=self.bot_id)
                return False, reason
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ò–ò –≤–∫–ª—é—á–µ–Ω
            ai_enabled = fresh_ai_config.get('enabled', False)
            if not ai_enabled:
                reason = "AI agent is disabled in config"
                logger.debug(f"‚ùå AI button check failed: {reason}", 
                            user_id=user_id, bot_id=self.bot_id)
                return False, reason
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞
            ai_agent_id = fresh_ai_config.get('agent_id')
            if not ai_agent_id:
                reason = "No AI agent ID configured"
                logger.debug(f"‚ùå AI button check failed: {reason}", 
                            user_id=user_id, bot_id=self.bot_id)
                return False, reason
            
            logger.info("‚úÖ AI button visibility check passed", 
                       user_id=user_id,
                       bot_id=self.bot_id,
                       ai_type=fresh_ai_config.get('type'),
                       agent_id_preview=ai_agent_id[:15] + "..." if len(ai_agent_id) > 15 else ai_agent_id)
            
            return True, "AI agent is available"
            
        except Exception as e:
            reason = f"Error checking AI config: {str(e)}"
            logger.error("üí• Error in AI button visibility check", 
                        bot_id=self.bot_id, 
                        user_id=user_id, 
                        error=str(e))
            return False, reason
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ö–ê–ù–ê–õ–ê =====
    
    async def handle_join_request_extended(self, join_request: ChatJoinRequest):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–û–î–û–ë–†–Ø–ï–ú –í–°–ï, –°–û–û–ë–©–ï–ù–ò–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ö–ê–ù–ê–õ–û–í)"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.warning("Owner access denied for channel event", 
                              bot_id=self.bot_id, 
                              event="join_request",
                              reason=status.get('status'))
                return
        
        try:
            self.stats['join_requests_processed'] += 1
            
            user = join_request.from_user
            chat = join_request.chat
            
            if user.is_bot:
                logger.info("ü§ñ Skipping bot join request", 
                           bot_id=self.bot_id, 
                           user_id=user.id,
                           bot_username=user.username)
                return
            
            logger.info("üö™ Join request received", 
                       bot_id=self.bot_id,
                       user_id=user.id,
                       username=user.username,
                       first_name=user.first_name,
                       chat_type=chat.type,
                       chat_title=chat.title)
            
            # ‚úÖ –í–°–ï–ì–î–ê –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤)
            try:
                await join_request.approve()
                logger.info("‚úÖ Join request approved", 
                           bot_id=self.bot_id, 
                           user_id=user.id,
                           chat_type=chat.type)
            except Exception as e:
                logger.error("‚ùå Failed to approve join request", 
                            bot_id=self.bot_id, 
                            user_id=user.id, 
                            error=str(e))
                return
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–û–õ–¨–ö–û –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            if chat.type == "channel":
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                user_chat_id = getattr(join_request, 'user_chat_id', None)
                if user_chat_id is not None:
                    self.stats['user_chat_id_available'] += 1
                    target_chat_id = user_chat_id
                    contact_method = "user_chat_id"
                else:
                    self.stats['user_chat_id_missing'] += 1
                    target_chat_id = user.id
                    contact_method = "user.id (fallback)"
                
                logger.info("üì∫ Sending welcome for channel join request", 
                           bot_id=self.bot_id,
                           user_id=user.id,
                           contact_method=contact_method)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                await asyncio.sleep(0.5)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                success = await self._send_welcome_message_with_button(user, target_chat_id, contact_method)
                
                if not success and contact_method == "user_chat_id":
                    logger.info("üîÑ Retrying welcome with user.id fallback", 
                               bot_id=self.bot_id, 
                               user_id=user.id)
                    await self._send_welcome_message_with_button(user, user.id, "user.id (retry)")
            else:
                # –î–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø - —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä—è–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç chat_member_join
                logger.info("üë• Group join request approved, message will be sent by chat_member_join", 
                           bot_id=self.bot_id,
                           user_id=user.id,
                           chat_type=chat.type)
            
        except Exception as e:
            logger.error("üí• Critical error in join request handler", 
                        bot_id=self.bot_id, 
                        error=str(e), 
                        exc_info=True)
    
    async def handle_chat_member_join(self, chat_member_update: ChatMemberUpdated):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å join_request)"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.warning("Owner access denied for channel event", 
                              bot_id=self.bot_id, 
                              event="chat_member_join",
                              reason=status.get('status'))
                return
        
        try:
            user = chat_member_update.new_chat_member.user
            chat = chat_member_update.chat
            
            if user.is_bot:
                return
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if chat.type == "channel":
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ join_request
                logger.debug("üë§ Channel member join skipped (handled by join_request)", 
                           bot_id=self.bot_id, 
                           user_id=user.id,
                           chat_type=chat.type)
                return
            
            elif chat.type in ["group", "supergroup"]:
                # –î–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø: –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                logger.info("üë§ Group member joined - sending welcome with button to DM", 
                           bot_id=self.bot_id, 
                           user_id=user.id,
                           username=user.username,
                           chat_type=chat.type,
                           group_title=chat.title)
                
                self.stats['admin_adds_processed'] += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ª–∏—á–∫—É –° –ö–ù–û–ü–ö–û–ô (–∫–∞–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)
                success = await self._send_welcome_message_with_button(user, user.id, "group_join")
            
            else:
                logger.debug("üë§ Unknown chat type for member join", 
                           bot_id=self.bot_id,
                           chat_type=chat.type)
                return
            
        except Exception as e:
            logger.error("‚ùå Error handling user join via chat_member", 
                        bot_id=self.bot_id, 
                        error=str(e))
    
    async def handle_chat_member_leave(self, chat_member_update: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.warning("Owner access denied for channel event", 
                              bot_id=self.bot_id, 
                              event="chat_member_leave",
                              reason=status.get('status'))
                return
        
        try:
            user = chat_member_update.old_chat_member.user
            chat = chat_member_update.chat
            
            if user.is_bot:
                return
            
            logger.info("üö™ User left chat", 
                       bot_id=self.bot_id, 
                       user_id=user.id,
                       username=user.username,
                       chat_type=chat.type,
                       chat_title=chat.title)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
            await self._send_goodbye_message_with_button(user)
            
        except Exception as e:
            logger.error("‚ùå Error handling user leave", 
                        bot_id=self.bot_id, 
                        error=str(e))
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø =====
    
    async def handle_welcome_button_click(self, message: Message):
        """‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ò–ò"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.warning("Owner access denied for channel event", 
                              bot_id=self.bot_id, 
                              event="welcome_button_click",
                              reason=status.get('status'))
                return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            config = await self._get_fresh_message_config()
            welcome_button_text = config.get('welcome_button_text')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            if message.text != welcome_button_text:
                logger.debug("‚ùå Message text doesn't match welcome button", 
                           bot_id=self.bot_id, 
                           user_id=message.from_user.id,
                           expected=welcome_button_text,
                           received=message.text)
                return
            
            user = message.from_user
            logger.info("üîò Welcome button clicked (verified)", 
                       bot_id=self.bot_id, 
                       user_id=user.id,
                       button_text=welcome_button_text)
            
            self.stats['button_clicks'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å chat_id
            await self.db.create_or_update_subscriber(
                bot_id=self.bot_id,
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                chat_id=message.chat.id
            )
            
            logger.info("‚úÖ Subscriber saved with chat_id", 
                       bot_id=self.bot_id,
                       user_id=user.id,
                       chat_id=message.chat.id)
            
            
        
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É
            await self._start_user_funnel(user)
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ò–ò
            has_agent, reason = await self._should_show_ai_button(user.id)
            
            logger.info("üîç AI button availability for confirmation", 
                       user_id=user.id,
                       has_agent=has_agent,
                       reason=reason)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò (–µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å)
            confirmation_message = config.get('confirmation_message')
            if confirmation_message:
                await self._send_confirmation_with_conditional_ai_button(
                    user, message.chat.id, has_agent
                )
            else:
                await self._send_default_confirmation_with_conditional_ai_button(
                    user, message.chat.id, has_agent
                )
                
        except Exception as e:
            logger.error("üí• Error handling welcome button click", 
                        bot_id=self.bot_id, 
                        user_id=message.from_user.id,
                        error=str(e))
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _update_stats(self, event_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if event_type in ['welcome_sent', 'goodbye_sent', 'confirmation_sent']:
                await self.db.increment_bot_messages(self.bot_id)
        except Exception as e:
            logger.error("Failed to update stats", bot_id=self.bot_id, error=str(e))
    
    async def _start_user_funnel(self, user):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            success = await self.funnel_manager.start_user_funnel(
                self.bot_id, user.id, user.first_name
            )
            if success:
                self.stats['funnel_starts'] += 1
                logger.info("‚úÖ Funnel started for user", 
                           bot_id=self.bot_id, 
                           user_id=user.id)
        except Exception as e:
            logger.error("‚ùå Failed to start funnel", 
                        bot_id=self.bot_id, 
                        user_id=user.id, 
                        error=str(e))
    
    # ===== –ú–ï–¢–û–î–´ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –° –£–°–õ–û–í–ù–û–ô –ö–ù–û–ü–ö–û–ô –ò–ò =====
    
    async def _send_confirmation_with_conditional_ai_button(self, user, chat_id: int, has_agent: bool):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å"""
        config = await self._get_fresh_message_config()
        confirmation_message = config.get('confirmation_message')
        
        if not confirmation_message:
            return
        
        try:
            formatted_message = self.formatter.format_message(confirmation_message, user)
            
            if has_agent:
                keyboard = UserKeyboards.ai_button()
                logger.debug("‚úÖ Showing AI button with confirmation", 
                            bot_id=self.bot_id, user_id=user.id)
            else:
                keyboard = ReplyKeyboardRemove()
                logger.debug("‚ùå No AI button - agent not available", 
                            bot_id=self.bot_id, user_id=user.id)
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
                
                self.stats['confirmation_sent'] += 1
                await self._update_stats('confirmation_sent')
            
        except Exception as e:
            logger.error("üí• Failed to send confirmation with conditional AI button", 
                        bot_id=self.bot_id, error=str(e))
    
    async def _send_default_confirmation_with_conditional_ai_button(self, user, chat_id: int, has_agent: bool):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å"""
        try:
            if has_agent:
                keyboard = UserKeyboards.ai_button()
                logger.debug("‚úÖ Showing AI button with default confirmation", 
                            bot_id=self.bot_id, user_id=user.id)
            else:
                keyboard = ReplyKeyboardRemove()
                logger.debug("‚ùå No AI button - agent not available", 
                            bot_id=self.bot_id, user_id=user.id)
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                    reply_markup=keyboard
                )
            
        except Exception as e:
            logger.error("üí• Failed to send default confirmation with conditional AI button", 
                        error=str(e))
    
    async def _send_welcome_message_with_button(self, user, target_chat_id: int, contact_method: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π"""
        config = await self._get_fresh_message_config()
        welcome_message = config.get('welcome_message')
        welcome_button_text = config.get('welcome_button_text')
        
        if not welcome_message:
            logger.debug("No welcome message configured", bot_id=self.bot_id)
            return True
        
        self.stats['total_attempts'] += 1
        
        try:
            formatted_message = self.formatter.format_message(welcome_message, user)
            
            reply_markup = None
            if welcome_button_text:
                reply_markup = UserKeyboards.welcome_button(welcome_button_text)
                self.stats['welcome_buttons_sent'] += 1
            
            if self.bot:
                sent_message = await self.bot.send_message(
                    chat_id=target_chat_id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                
                self.stats['welcome_sent'] += 1
                await self._update_stats('welcome_sent')
                
                logger.info("‚úÖ Welcome message sent", 
                           bot_id=self.bot_id, 
                           user_id=user.id, 
                           has_button=bool(reply_markup),
                           contact_method=contact_method)
                return True
            
        except TelegramForbiddenError:
            self.stats['welcome_blocked'] += 1
            logger.warning("‚ùå Welcome message blocked by user", 
                          bot_id=self.bot_id, 
                          user_id=user.id)
            return False
        except Exception as e:
            logger.error("üí• Failed to send welcome message", 
                        bot_id=self.bot_id, 
                        error=str(e))
            return False

    async def _send_goodbye_message_with_button(self, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π"""
        config = await self._get_fresh_message_config()
        goodbye_message = config.get('goodbye_message')
        goodbye_button_text = config.get('goodbye_button_text')
        goodbye_button_url = config.get('goodbye_button_url')
        
        if not goodbye_message:
            return
        
        try:
            formatted_message = self.formatter.format_message(goodbye_message, user)
            
            reply_markup = None
            if goodbye_button_text and goodbye_button_url:
                reply_markup = UserKeyboards.goodbye_button(
                    goodbye_button_text,
                    goodbye_button_url
                )
                self.stats['goodbye_buttons_sent'] += 1
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=user.id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                
                self.stats['goodbye_sent'] += 1
                await self._update_stats('goodbye_sent')
            
        except TelegramForbiddenError:
            self.stats['goodbye_blocked'] += 1
        except Exception as e:
            logger.error("üí• Failed to send goodbye message", 
                        bot_id=self.bot_id, error=str(e))
