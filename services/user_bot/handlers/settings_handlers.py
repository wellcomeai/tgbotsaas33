"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import structlog
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import Emoji
from ..states import BotSettingsStates
from ..formatters import MessageFormatter

logger = structlog.get_logger()


def register_settings_handlers(dp: Dispatcher, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']  # –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    user_bot = kwargs.get('user_bot')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UserBot
    
    try:
        handler = SettingsHandler(db, bot_config, user_bot)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(handler.cb_settings_action, F.data.startswith("settings_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        dp.message.register(
            handler.handle_welcome_message_input,
            BotSettingsStates.waiting_for_welcome_message
        )
        dp.message.register(
            handler.handle_welcome_button_input,
            BotSettingsStates.waiting_for_welcome_button
        )
        dp.message.register(
            handler.handle_confirmation_message_input,
            BotSettingsStates.waiting_for_confirmation_message
        )
        dp.message.register(
            handler.handle_goodbye_message_input,
            BotSettingsStates.waiting_for_goodbye_message
        )
        dp.message.register(
            handler.handle_goodbye_button_text_input,
            BotSettingsStates.waiting_for_goodbye_button_text
        )
        dp.message.register(
            handler.handle_goodbye_button_url_input,
            BotSettingsStates.waiting_for_goodbye_button_url
        )
        
        logger.info("Settings handlers registered successfully", 
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("Failed to register settings handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class SettingsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, db, bot_config: dict, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.formatter = MessageFormatter()
        self.user_bot = user_bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UserBot
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.welcome_message = bot_config.get('welcome_message')
        self.welcome_button_text = bot_config.get('welcome_button_text')
        self.confirmation_message = bot_config.get('confirmation_message')
        self.goodbye_message = bot_config.get('goodbye_message')
        self.goodbye_button_text = bot_config.get('goodbye_button_text')
        self.goodbye_button_url = bot_config.get('goodbye_button_url')
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        return user_id == self.owner_user_id
    
    async def _cancel_and_show_settings(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
        ])
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    
    async def _handle_database_error(self, message: Message, state: FSMContext, error: Exception, operation: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ë–î"""
        logger.error(f"Failed to update {operation}", error=str(error))
        await message.answer(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {operation}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
    
    async def cb_settings_action(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data.replace("settings_", "")
        
        if action == "welcome":
            await self._handle_welcome_message_setup(callback, state)
        elif action == "welcome_button":
            await self._handle_welcome_button_setup(callback, state)
        elif action == "confirmation":
            await self._handle_confirmation_message_setup(callback, state)
        elif action == "goodbye":
            await self._handle_goodbye_message_setup(callback, state)
        elif action == "goodbye_button":
            await self._handle_goodbye_button_setup(callback, state)
    
    async def _handle_welcome_message_setup(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await state.set_state(BotSettingsStates.waiting_for_welcome_message)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ self
        current_message = self.welcome_message or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        if self.welcome_message:
            example = self.formatter.format_message_template(
                self.welcome_message, 
                username="@example_user", 
                first_name="–ò–≤–∞–Ω"
            )
            current_display = f"<code>{self.welcome_message}</code>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n{example}"
        else:
            current_display = current_message
        
        text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

<b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
{current_display}

<b>–ß—Ç–æ —ç—Ç–æ:</b>
–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
- <code>{{username}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)
- <code>{{first_name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _handle_welcome_button_setup(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        await state.set_state(BotSettingsStates.waiting_for_welcome_button)
        
        current_button = self.welcome_button_text or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        text = f"""
üîò <b>–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>

<b>–¢–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞:</b>
{current_button}

<b>–ß—Ç–æ —ç—Ç–æ:</b>
–ö–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.
- –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "üìã –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"
- "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ!"
- "ü§ù –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _handle_confirmation_message_setup(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        await state.set_state(BotSettingsStates.waiting_for_confirmation_message)
        
        current_message = self.confirmation_message or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        if self.confirmation_message:
            example = self.formatter.format_message_template(
                self.confirmation_message, 
                username="@example_user", 
                first_name="–ò–≤–∞–Ω"
            )
            current_display = f"<code>{self.confirmation_message}</code>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n{example}"
        else:
            current_display = current_message
        
        text = f"""
‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>

<b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
{current_display}

<b>–ß—Ç–æ —ç—Ç–æ:</b>
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
- <code>{{username}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)
- <code>{{first_name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _handle_goodbye_message_setup(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await state.set_state(BotSettingsStates.waiting_for_goodbye_message)
        
        current_message = self.goodbye_message or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        if self.goodbye_message:
            example = self.formatter.format_message_template(
                self.goodbye_message, 
                username="@example_user", 
                first_name="–ò–≤–∞–Ω"
            )
            current_display = f"<code>{self.goodbye_message}</code>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n{example}"
        else:
            current_display = current_message
        
        text = f"""
üëã <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

<b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
{current_display}

<b>–ß—Ç–æ —ç—Ç–æ:</b>
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã. –ü–æ–º–æ–≥–∞–µ—Ç —É–¥–µ—Ä–∂–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
- <code>{{username}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)
- <code>{{first_name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _handle_goodbye_button_setup(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        await state.set_state(BotSettingsStates.waiting_for_goodbye_button_text)
        
        current_text = self.goodbye_button_text or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        current_url = self.goodbye_button_url or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        text = f"""
üîó <b>–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {current_text}
–°—Å—ã–ª–∫–∞: {current_url}

<b>–ß—Ç–æ —ç—Ç–æ:</b>
–ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –ø–æ–¥ –ø—Ä–æ—â–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ–º–æ–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "üîî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
- "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
- "üì± –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
    async def handle_welcome_message_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_welcome_settings(self.bot_id, welcome_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.welcome_message = message.text
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ UserBot
            if self.user_bot:
                await self.user_bot.update_welcome_settings(welcome_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º bot_manager
            if self.bot_config.get('bot_manager'):
                await self.bot_config['bot_manager'].update_bot_config(
                    self.bot_id,
                    welcome_message=message.text
                )
            
            example = self.formatter.format_message_template(message.text, username="@example_user", first_name="–ò–≤–∞–Ω")
            
            success_text = f"""
‚úÖ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>

<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>

<b>–ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
{example}
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("Welcome message updated", bot_id=self.bot_id, owner_user_id=message.from_user.id)
            
        except Exception as e:
            await self._handle_database_error(message, state, e, "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_welcome_button_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_welcome_settings(self.bot_id, welcome_button_text=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.welcome_button_text = message.text
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ UserBot
            if self.user_bot:
                await self.user_bot.update_welcome_settings(welcome_button_text=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º bot_manager
            if self.bot_config.get('bot_manager'):
                await self.bot_config['bot_manager'].update_bot_config(
                    self.bot_id,
                    welcome_button_text=message.text
                )
            
            success_text = f"""
‚úÖ <b>–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>

<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>
{message.text}

<b>–¢–µ–ø–µ—Ä—å:</b>
- –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
- –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("Welcome button updated", bot_id=self.bot_id)
            
        except Exception as e:
            await self._handle_database_error(message, state, e, "–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    
    async def handle_confirmation_message_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_welcome_settings(self.bot_id, confirmation_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.confirmation_message = message.text
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ UserBot
            if self.user_bot:
                await self.user_bot.update_welcome_settings(confirmation_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º bot_manager
            if self.bot_config.get('bot_manager'):
                await self.bot_config['bot_manager'].update_bot_config(
                    self.bot_id,
                    confirmation_message=message.text
                )
            
            example = self.formatter.format_message_template(message.text, username="@example_user", first_name="–ò–≤–∞–Ω")
            
            success_text = f"""
‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!</b>

<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>

<b>–ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
{example}

<b>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("Confirmation message updated", bot_id=self.bot_id)
            
        except Exception as e:
            await self._handle_database_error(message, state, e, "—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    async def handle_goodbye_message_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_goodbye_settings(self.bot_id, goodbye_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.goodbye_message = message.text
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ UserBot
            if self.user_bot:
                await self.user_bot.update_goodbye_settings(goodbye_message=message.text)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º bot_manager
            if self.bot_config.get('bot_manager'):
                await self.bot_config['bot_manager'].update_bot_config(
                    self.bot_id,
                    goodbye_message=message.text
                )
            
            example = self.formatter.format_message_template(message.text, username="@example_user", first_name="–ò–≤–∞–Ω")
            
            success_text = f"""
‚úÖ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>

<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>

<b>–ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
{example}
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("Goodbye message updated", bot_id=self.bot_id)
            
        except Exception as e:
            await self._handle_database_error(message, state, e, "–ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_goodbye_button_text_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É URL
        await state.update_data(goodbye_button_text=message.text)
        await state.set_state(BotSettingsStates.waiting_for_goodbye_button_url)
        
        text = f"""
üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è</b>

<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {message.text}

<b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏:</b>

<b>–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:</b>
- https://t.me/yourchannel
- https://t.me/yoursupport
- https://yourwebsite.com
- https://t.me/+invite_link

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    async def handle_goodbye_button_url_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_settings(message, state)
            return
        
        data = await state.get_data()
        button_text = data.get("goodbye_button_text")
        
        if not button_text:
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        url = message.text.strip()
        if not (url.startswith("http://") or url.startswith("https://") or url.startswith("tg://")):
            await message.answer(
                f"{Emoji.WARNING} <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!</b>\n\n"
                f"–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n"
                f"‚Ä¢ https://\n"
                f"‚Ä¢ http://\n"
                f"‚Ä¢ tg://\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.db.update_goodbye_settings(
                self.bot_id, 
                goodbye_button_text=button_text,
                goodbye_button_url=url
            )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.goodbye_button_text = button_text
            self.goodbye_button_url = url
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ UserBot
            if self.user_bot:
                await self.user_bot.update_goodbye_settings(
                    goodbye_button_text=button_text,
                    goodbye_button_url=url
                )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º bot_manager
            if self.bot_config.get('bot_manager'):
                await self.bot_config['bot_manager'].update_bot_config(
                    self.bot_id,
                    goodbye_button_text=button_text,
                    goodbye_button_url=url
                )
            
            success_text = f"""
‚úÖ <b>–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>

<b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}
<b>–°—Å—ã–ª–∫–∞:</b> {url}

<b>–¢–µ–ø–µ—Ä—å:</b>
- –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –ø—Ä–æ—â–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ
- –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–¥–µ—Ä–∂–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("Goodbye button updated", bot_id=self.bot_id)
            
        except Exception as e:
            await self._handle_database_error(message, state, e, "–∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—â–∞–Ω–∏—è")
