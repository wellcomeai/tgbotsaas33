"""
AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è UserBot - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø + –ü–û–î–î–ï–†–ñ–ö–ê –ì–†–£–ü–ü–û–í–´–• –£–ü–û–ú–ò–ù–ê–ù–ò–ô + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê + –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò + –°–õ–£–ß–ê–ô–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò
‚úÖ –ê–î–ú–ò–ù: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏  
‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ò–ò (–ë–ï–ó –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ - —ç—Ç–æ –≤ channel_handlers)
‚úÖ –ß–ò–°–¢–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï: channel_handlers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É, ai_handlers –µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
‚úÖ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–û–ö: AIAccessChecker
‚úÖ –ò–ù–°–¢–ê–ù–°-–ü–û–î–•–û–î: –ë–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: handle_user_ai_exit() —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ò–ò –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–Ω—ã–µ callback_data –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É—Å—Ç—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç)
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò (–ù–ï –î–û!)
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ increment_ai_usage –∏–∑ _get_openai_response_for_user
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ message.text –≤ handle_admin_ai_conversation
‚úÖ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
‚úÖ –£–õ–£–ß–®–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö (@botname —Å–æ–æ–±—â–µ–Ω–∏–µ)
‚úÖ –ù–û–í–û–ï: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–µ—Ä–µ–∑ access_control
‚úÖ –ù–û–í–û–ï: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –º—ã—à–ª–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
"""

import asyncio
import random  # ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
import structlog
import re
from datetime import datetime
from aiogram import F, Dispatcher
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from ..states import AISettingsStates
from ..keyboards import AIKeyboards, AdminKeyboards
from ..formatters import MessageFormatter

logger = structlog.get_logger()


class AIAccessChecker:
    """–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò"""
    
    def __init__(self, db, bot_config):
        self.db = db
        self.bot_config = bot_config
    
    async def check_subscription(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –ò–õ–ò —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            subscription_settings = await self.db.get_subscription_settings(self.bot_config['bot_id'])
            
            if not subscription_settings or not subscription_settings.get('subscription_check_enabled'):
                return True, ""
            
            channel_id = subscription_settings.get('subscription_channel_id')
            channel_username = subscription_settings.get('subscription_channel_username')
            deny_message = subscription_settings.get('subscription_deny_message', 
                                                    '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.')
            
            if not channel_id:
                return True, ""
            
            bot = self.bot_config.get('bot')
            if not bot:
                return True, ""
            
            # üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–ê–ï–¢ –î–õ–Ø –ö–ê–ù–ê–õ–û–í –ò –ì–†–£–ü–ü –û–î–ò–ù–ê–ö–û–í–û
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            is_member = member.status in ['member', 'administrator', 'creator']
            
            # üìù –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            if not is_member:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    chat_info = await bot.get_chat(channel_id)
                    chat_type_name = "–≥—Ä—É–ø–ø—É" if chat_info.type in ["group", "supergroup"] else "–∫–∞–Ω–∞–ª"
                    
                    if channel_username:
                        deny_message = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {chat_type_name}: @{channel_username}"
                    else:
                        deny_message = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {chat_type_name}."
                except:
                    # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    pass
            
            return is_member, deny_message if not is_member else ""
            
        except Exception as e:
            logger.warning("‚ö†Ô∏è Could not check channel/group membership", error=str(e))
            return True, ""
    
    async def check_ai_agent_availability(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        try:
            fresh_ai_config = await self.db.get_ai_config(self.bot_config['bot_id'])
            
            if not fresh_ai_config or not fresh_ai_config.get('enabled') or not fresh_ai_config.get('agent_id'):
                return False, "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
            return True, ""
            
        except Exception as e:
            logger.error("üí• Error checking AI agent availability", error=str(e))
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞."
    
    async def check_token_limits(self, user_id: int) -> tuple[bool, str, dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            fresh_ai_config = await self.db.get_ai_config(self.bot_config['bot_id'])
            
            if not fresh_ai_config or fresh_ai_config.get('type') != 'openai':
                return True, "", {}
            
            token_info = await self.db.get_user_token_balance(self.bot_config['owner_user_id'])
            
            if not token_info:
                return False, "‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", {}
            
            tokens_used = token_info.get('total_used', 0)
            tokens_limit = token_info.get('limit', 500000)
            remaining_tokens = tokens_limit - tokens_used
            
            if remaining_tokens <= 0:
                return False, f"""
‚ùå <b>–¢–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!</b>

–î–ª—è —ç—Ç–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used:,} –∏–∑ {tokens_limit:,}

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
""", token_info
            
            return True, "", token_info
            
        except Exception as e:
            logger.error("üí• Error checking token limit", error=str(e))
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤", {}
    
    async def check_daily_limits(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            can_send, used_today, daily_limit = await self.db.check_daily_message_limit(
                self.bot_config['bot_id'], user_id
            )
            
            if daily_limit <= 0:
                return True, ""  # –õ–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            
            if not can_send:
                return False, f"""üìä <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_today} / {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π

–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ 00:00 –ú–°–ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!

üí° <i>–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞</i>"""
            
            return True, ""
            
        except Exception as e:
            logger.error("üí• Error checking daily limits", error=str(e))
            return True, ""  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
    
    async def check_full_access(self, user_id: int) -> dict:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        result = {
            'allowed': False,
            'message': '',
            'subscription_ok': False,
            'agent_ok': False, 
            'tokens_ok': False,
            'daily_limit_ok': False,
            'token_info': {}
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_ok, subscription_msg = await self.check_subscription(user_id)
        result['subscription_ok'] = subscription_ok
        if not subscription_ok:
            result['message'] = subscription_msg
            return result
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–∞
        agent_ok, agent_msg = await self.check_ai_agent_availability()
        result['agent_ok'] = agent_ok
        if not agent_ok:
            result['message'] = agent_msg
            return result
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_ok, tokens_msg, token_info = await self.check_token_limits(user_id)
        result['tokens_ok'] = tokens_ok
        result['token_info'] = token_info
        if not tokens_ok:
            result['message'] = tokens_msg
            return result
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        daily_ok, daily_msg = await self.check_daily_limits(user_id)
        result['daily_limit_ok'] = daily_ok
        if not daily_ok:
            result['message'] = daily_msg
            return result
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        result['allowed'] = True
        return result


class AIHandler:
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, db, bot_config, user_bot=None, access_control=None):
        self.db = db
        self.bot_config = bot_config
        self.user_bot = user_bot
        self.formatter = MessageFormatter()
        self.access_checker = AIAccessChecker(db, bot_config)
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_id = bot_config['bot_id']
        self.access_control = access_control  # ‚úÖ –ù–û–í–û–ï
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id == self.owner_user_id

    async def _show_random_thinking(self, message):
        """üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
        
        thinking_variants = [
            ["ü§î –î—É–º–∞—é.", "ü§î –î—É–º–∞—é..", "üß† –†–∞–∑–º—ã—à–ª—è—é...", "üí≠ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."],
            ["‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é.", "‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..", "üîç –ò—â—É –æ—Ç–≤–µ—Ç...", "‚ú® –ì–æ—Ç–æ–≤–æ..."],
            ["üß† –ü–æ–≥—Ä—É–∂–∞—é—Å—å –≤ —Ç–µ–º—É.", "üí° –ò—â—É —Ä–µ—à–µ–Ω–∏–µ..", "‚öôÔ∏è –§–æ—Ä–º—É–ª–∏—Ä—É—é...", "üìù –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç..."],
            ["üéØ –§–æ–∫—É—Å–∏—Ä—É—é—Å—å.", "üîé –ò—Å—Å–ª–µ–¥—É—é –≤–æ–ø—Ä–æ—Å..", "üí´ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é –∏–¥–µ–∏...", "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é..."],
            ["üé≠ –í—Ö–æ–∂—É –≤ —Ä–æ–ª—å.", "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏ –ø–æ–¥—Ö–æ–∂—É..", "‚ú® –°–æ–∑–¥–∞—é –º–∞–≥–∏—é...", "üéÅ –í—Ä—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."],
            ["üî¨ –ò—Å—Å–ª–µ–¥—É—é —Ç–µ–º—É.", "üìö –ò–∑—É—á–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç..", "üß© –°–æ–±–∏—Ä–∞—é –ø–∞–∑–ª...", "üéØ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å..."],
            ["‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã.", "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..", "üíæ –ö–æ–º–ø–∏–ª–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...", "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç..."]
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        animation = random.choice(thinking_variants)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ)
        intervals = [random.uniform(0.6, 1.4) for _ in range(len(animation)-1)]
        
        thinking_msg = await message.answer(animation[0])
        
        try:
            for i in range(1, len(animation)):
                await asyncio.sleep(intervals[i-1])
                await message.bot.send_chat_action(message.chat.id, "typing")
                await thinking_msg.edit_text(animation[i])
            
            return thinking_msg
        except Exception as e:
            logger.warning("‚ö†Ô∏è Animation error", error=str(e))
            return thinking_msg

    async def _show_random_voice_transcription(self, message):
        """üé§ –°–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
        
        voice_variants = [
            ["üé§ –°–ª—É—à–∞—é –∑–∞–ø–∏—Å—å.", "üé§ –°–ª—É—à–∞—é –∑–∞–ø–∏—Å—å..", "üëÇ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", "üìù –ì–æ—Ç–æ–≤–æ..."],
            ["üîä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ.", "üéµ –í—ã–¥–µ–ª—è—é —Ä–µ—á—å..", "üß† –ü–æ–Ω–∏–º–∞—é —Å–º—ã—Å–ª...", "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ..."],
            ["üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–≤—É–∫.", "üîç –ò—â—É —Å–ª–æ–≤–∞..", "üí≠ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...", "üìÑ –ì–æ—Ç–æ–≤ —Ç–µ–∫—Å—Ç..."],
            ["üéôÔ∏è –ü—Ä–∏–Ω–∏–º–∞—é —Å–∏–≥–Ω–∞–ª.", "‚ö° –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ç–µ–∫—Å—Ç..", "üß© –°–æ–±–∏—Ä–∞—é —Ñ—Ä–∞–∑—ã...", "üéØ –ü–æ–Ω—è–ª —Å–º—ã—Å–ª..."],
            ["üîâ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å.", "üé∂ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å..", "üìñ –§–æ—Ä–º–∏—Ä—É—é —Ç–µ–∫—Å—Ç...", "‚ú® –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞..."]
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        animation = random.choice(voice_variants)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö (—á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ)
        intervals = [random.uniform(0.5, 1.2) for _ in range(len(animation)-1)]
        
        thinking_msg = await message.answer(animation[0])
        
        try:
            for i in range(1, len(animation)):
                await asyncio.sleep(intervals[i-1])
                await message.bot.send_chat_action(message.chat.id, "typing")
                await thinking_msg.edit_text(animation[i])
            
            return thinking_msg
        except Exception as e:
            logger.warning("‚ö†Ô∏è Voice animation error", error=str(e))
            return thinking_msg

    async def _create_openai_handler(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenAIHandler"""
        try:
            from .ai_openai_handler import OpenAIHandler
            
            openai_handler = OpenAIHandler(
                db=self.db,
                bot_config=self.bot_config,
                ai_assistant=None,
                user_bot=None
            )
            
            logger.info("‚úÖ OpenAIHandler created", bot_id=self.bot_id)
            return openai_handler
            
        except Exception as e:
            logger.error("üí• Failed to create OpenAIHandler", error=str(e))
            return None

    async def handle_file_management_callbacks(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏"""
        logger.info("üìÅ File management callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            if callback.data == "openai_start_upload":
                await openai_handler.handle_start_upload(callback, state, is_owner_check)
            elif callback.data == "openai_finish_upload":
                await openai_handler.handle_finish_upload(callback, state, is_owner_check)
            elif callback.data == "openai_manage_files":
                await openai_handler.handle_manage_files(callback, is_owner_check)
            elif callback.data == "openai_upload_files":
                await openai_handler.handle_upload_files(callback, is_owner_check)
            logger.info("‚úÖ File management callback handled", callback_data=callback.data)
            
        except Exception as e:
            logger.error("üí• Error in file management callback", error=str(e))
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_document_upload_fsm(self, message: Message, state: FSMContext):
        """FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üìÑ Document upload via FSM", user_id=message.from_user.id)
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_document_upload(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error in document upload", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

    async def _get_fresh_ai_config(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        try:
            ai_config = await self.db.get_ai_config(self.bot_id)
            return ai_config or {}
        except Exception as e:
            logger.error("üí• Failed to get fresh AI config", error=str(e))
            return {}

    def _remove_bot_mention(self, text: str, bot_username: str) -> str:
        """–£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º @bot_username –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –≥–¥–µ —É–≥–æ–¥–Ω–æ
        pattern = rf'@{re.escape(bot_username)}\s*'
        return re.sub(pattern, '', text, flags=re.IGNORECASE).strip()

    async def _transcribe_voice_message(self, voice) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info("üé§ Starting voice transcription process", 
                   voice_file_id=voice.file_id,
                   voice_duration=getattr(voice, 'duration', 'unknown'),
                   voice_file_size=getattr(voice, 'file_size', 'unknown'))
        
        try:
            # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            try:
                from config import settings
                import os
                logger.info("‚úÖ Settings and os imported successfully")
            except ImportError as e:
                logger.error("‚ùå Failed to import settings or os", error=str(e))
                return ""
            
            # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            api_key = None
            key_source = ""
            
            # –°–ø–æ—Å–æ–± 1: –ò–∑ settings.OPENAI_API_KEY
            try:
                api_key = getattr(settings, 'OPENAI_API_KEY', None)
                if api_key:
                    key_source = "settings.OPENAI_API_KEY"
                    logger.info("‚úÖ API key found in settings", source=key_source)
            except Exception as e:
                logger.warning("‚ö†Ô∏è Could not get API key from settings", error=str(e))
            
            # –°–ø–æ—Å–æ–± 2: –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
            if not api_key:
                api_key = os.environ.get('OPENAI_API_KEY')
                if api_key:
                    key_source = "os.environ['OPENAI_API_KEY']"
                    logger.info("‚úÖ API key found in environment", source=key_source)
            
            # –°–ø–æ—Å–æ–± 3: –ò–∑ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if not api_key:
                possible_names = [
                    'OPENAI_TOKEN', 
                    'OPENAI_SECRET_KEY', 
                    'GPT_API_KEY',
                    'OPENAI_API_TOKEN'
                ]
                for name in possible_names:
                    api_key = os.environ.get(name)
                    if api_key:
                        key_source = f"os.environ['{name}']"
                        logger.info("‚úÖ API key found in environment", source=key_source)
                        break
            
            # –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º settings –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            if not api_key:
                possible_attrs = ['openai_api_key', 'OPENAI_TOKEN', 'openai_token']
                for attr in possible_attrs:
                    try:
                        api_key = getattr(settings, attr, None)
                        if api_key:
                            key_source = f"settings.{attr}"
                            logger.info("‚úÖ API key found in settings", source=key_source)
                            break
                    except:
                        continue
            
            if not api_key:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                openai_vars = [k for k in os.environ.keys() if 'OPENAI' in k.upper() or 'GPT' in k.upper()]
                settings_attrs = [attr for attr in dir(settings) if not attr.startswith('_')]
                
                logger.error("‚ùå OpenAI API key not found anywhere", 
                            env_openai_vars=openai_vars,
                            settings_attrs=settings_attrs[:10])  # –ü–µ—Ä–≤—ã–µ 10 –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                return ""
            
            logger.info("‚úÖ OpenAI API key found", 
                       source=key_source,
                       key_length=len(api_key) if api_key else 0,
                       key_preview=f"{api_key[:10]}...{api_key[-4:]}" if api_key and len(api_key) > 14 else "SHORT_KEY")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Whisper
            whisper_model = getattr(settings, 'OPENAI_WHISPER_MODEL', 'whisper-1')
            logger.info("‚úÖ Whisper model", model=whisper_model)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º bot instance
            bot = self.bot_config.get('bot')
            if not bot:
                logger.error("‚ùå Bot instance not available in bot_config", 
                            bot_config_keys=list(self.bot_config.keys()))
                return ""
            
            logger.info("‚úÖ Bot instance available", bot_type=type(bot).__name__)
            
            # 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            try:
                import aiohttp
                import tempfile
                logger.info("‚úÖ Required libraries imported")
            except ImportError as e:
                logger.error("‚ùå Failed to import required libraries", error=str(e))
                return ""
            
            # 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            logger.info("üì• Getting voice file info...")
            try:
                file_info = await bot.get_file(voice.file_id)
                logger.info("‚úÖ Voice file info retrieved", 
                           file_path=file_info.file_path,
                           file_size=getattr(file_info, 'file_size', 'unknown'))
            except Exception as e:
                logger.error("‚ùå Failed to get voice file info", error=str(e))
                return ""
            
            # 7. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            logger.info("üìÅ Creating temporary file...")
            try:
                temp_file = tempfile.NamedTemporaryFile(suffix='.ogg', delete=False)
                temp_file_path = temp_file.name
                temp_file.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞—Ç—å
                logger.info("‚úÖ Temporary file created", path=temp_file_path)
            except Exception as e:
                logger.error("‚ùå Failed to create temporary file", error=str(e))
                return ""
            
            try:
                # 8. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                logger.info("‚¨áÔ∏è Downloading voice file...")
                try:
                    with open(temp_file_path, 'wb') as temp_file_handle:
                        await bot.download_file(file_info.file_path, temp_file_handle)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(temp_file_path)
                    logger.info("‚úÖ Voice file downloaded", size_bytes=file_size)
                    
                    if file_size == 0:
                        logger.error("‚ùå Downloaded file is empty")
                        return ""
                        
                except Exception as e:
                    logger.error("‚ùå Failed to download voice file", error=str(e))
                    return ""
                
                # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper API
                logger.info("üåê Sending to OpenAI Whisper API...")
                try:
                    async with aiohttp.ClientSession() as session:
                        with open(temp_file_path, 'rb') as audio_file:
                            data = aiohttp.FormData()
                            data.add_field('file', audio_file, filename='voice.ogg')
                            data.add_field('model', whisper_model)
                            data.add_field('language', 'ru')
                            
                            headers = {
                                'Authorization': f'Bearer {api_key}'
                            }
                            
                            logger.info("üì° Making API request to Whisper...", 
                                       url='https://api.openai.com/v1/audio/transcriptions',
                                       model=whisper_model,
                                       language='ru')
                            
                            async with session.post(
                                'https://api.openai.com/v1/audio/transcriptions',
                                data=data,
                                headers=headers,
                                timeout=30
                            ) as response:
                                logger.info("üì® Received API response", 
                                          status=response.status,
                                          content_type=response.content_type,
                                          content_length=response.headers.get('content-length', 'unknown'))
                                
                                if response.status == 200:
                                    result = await response.json()
                                    transcribed_text = result.get('text', '').strip()
                                    
                                    logger.info("‚úÖ Voice transcription successful", 
                                              text_length=len(transcribed_text),
                                              preview=transcribed_text[:100] if transcribed_text else "EMPTY")
                                    return transcribed_text
                                elif response.status == 401:
                                    error_text = await response.text()
                                    logger.error("‚ùå Whisper API authentication failed", 
                                               status=response.status,
                                               error=error_text,
                                               key_source=key_source)
                                    return ""
                                elif response.status == 429:
                                    error_text = await response.text()
                                    logger.error("‚ùå Whisper API rate limit exceeded", 
                                               status=response.status,
                                               error=error_text)
                                    return ""
                                else:
                                    error_text = await response.text()
                                    logger.error("‚ùå Whisper API error", 
                                               status=response.status,
                                               error=error_text,
                                               headers=dict(response.headers))
                                    return ""
                                    
                except Exception as e:
                    logger.error("‚ùå API request failed", 
                                error=str(e), 
                                error_type=type(e).__name__)
                    return ""
            finally:
                # 10. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    if os.path.exists(temp_file_path):
                        os.unlink(temp_file_path)
                        logger.info("üóëÔ∏è Temporary file cleaned up")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Failed to cleanup temp file", error=str(e))
            
        except Exception as e:
            logger.error("üí• Unexpected error in voice transcription", 
                        error=str(e), 
                        error_type=type(e).__name__,
                        exc_info=True)
            return ""

    async def _get_openai_response_for_user(self, message: Message, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ë–ï–ó –î–£–ë–õ–ò–†–£–Æ–©–ï–ì–û –ò–ù–ö–†–ï–ú–ï–ù–¢–ê"""
        try:
            fresh_ai_config = await self._get_fresh_ai_config()
            
            if not fresh_ai_config or fresh_ai_config.get('type') != 'openai':
                return "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            agent_id = fresh_ai_config.get('agent_id')
            if not agent_id:
                return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                context = OpenAIResponsesContext(
                    user_id=user_id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=False
                )
                
                response = await openai_client.send_message(
                    assistant_id=agent_id,
                    message=message.text,
                    user_id=user_id,
                    context=context
                )
                
                if response:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–î–ê–õ–ï–ù –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ increment_ai_usage
                    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ handle_user_ai_conversation
                    return response
                else:
                    return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
                    
            except ImportError:
                logger.warning("üì¶ OpenAI service not available", user_id=user_id)
                
                settings = fresh_ai_config.get('settings', {})
                agent_name = settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–î–ê–õ–ï–ù –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ increment_ai_usage
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ handle_user_ai_conversation
                
                return f"ü§ñ {agent_name}: –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                
        except Exception as e:
            logger.error("üí• Error getting OpenAI response", error=str(e))
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã."

    async def _get_openai_response_for_user_with_text(self, message: Message, user_id: int, text: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            fresh_ai_config = await self._get_fresh_ai_config()
            
            if not fresh_ai_config or fresh_ai_config.get('type') != 'openai':
                return "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            agent_id = fresh_ai_config.get('agent_id')
            if not agent_id:
                return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                context = OpenAIResponsesContext(
                    user_id=user_id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=False
                )
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π text –≤–º–µ—Å—Ç–æ message.text
                response = await openai_client.send_message(
                    assistant_id=agent_id,
                    message=text,  # ‚Üê –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ê–†–ê–ú–ï–¢–†
                    user_id=user_id,
                    context=context
                )
                
                if response:
                    return response
                else:
                    return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
                    
            except ImportError:
                logger.warning("üì¶ OpenAI service not available", user_id=user_id)
                
                settings = fresh_ai_config.get('settings', {})
                agent_name = settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                return f"ü§ñ {agent_name}: –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                
        except Exception as e:
            logger.error("üí• Error getting OpenAI response", error=str(e))
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã."

    async def _get_openai_response_for_admin_with_text(self, message: Message, user_id: int, text: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            fresh_ai_config = await self._get_fresh_ai_config()
            
            if not fresh_ai_config or fresh_ai_config.get('type') != 'openai':
                return "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            agent_id = fresh_ai_config.get('agent_id')
            if not agent_id:
                return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                context = OpenAIResponsesContext(
                    user_id=user_id,
                    user_name=message.from_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=True  # ‚úÖ –ê–î–ú–ò–ù –ö–û–ù–¢–ï–ö–°–¢
                )
                
                logger.info("üîß Admin OpenAI request", 
                           user_id=user_id,
                           agent_id=agent_id,
                           text_length=len(text),
                           text_preview=text[:100] + "..." if len(text) > 100 else text)
                
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
                response = await openai_client.send_message(
                    assistant_id=agent_id,
                    message=text,  # ‚Üê –ö–ê–°–¢–û–ú–ù–´–ô –¢–ï–ö–°–¢
                    user_id=user_id,
                    context=context
                )
                
                if response:
                    logger.info("‚úÖ Admin OpenAI response received", 
                               user_id=user_id,
                               response_length=len(response))
                    return response
                else:
                    logger.warning("‚ö†Ô∏è Empty OpenAI response for admin", user_id=user_id)
                    return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
                    
            except ImportError:
                logger.warning("üì¶ OpenAI service not available for admin", user_id=user_id)
                
                settings = fresh_ai_config.get('settings', {})
                agent_name = settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                # Fallback –æ—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
                return f"ü§ñ {agent_name} (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º): –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{text[:50]}{'...' if len(text) > 50 else ''}'. Responses API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                
        except Exception as e:
            logger.error("üí• Error getting OpenAI response for admin", 
                        user_id=user_id, 
                        error=str(e),
                        exc_info=True)
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã."

    # ===== –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

    async def handle_navigation_callbacks(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ callback –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        logger.info("üß≠ Admin navigation callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            await openai_handler.handle_navigation_action(callback, state, is_owner_check)
            
            logger.info("‚úÖ Admin navigation handled", callback_data=callback.data)
            
        except Exception as e:
            logger.error("üí• Error in admin navigation", error=str(e))
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_admin_ai_exit_conversation(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò"""
        logger.info("üö™ Admin AI exit conversation", user_id=callback.from_user.id)
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
                return
            
            await openai_handler.handle_exit_conversation(callback, state)
            logger.info("‚úÖ Admin AI conversation ended", callback_data=callback.data)
            
        except Exception as e:
            logger.error("üí• Error in admin AI exit handler", error=str(e))
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_openai_callbacks(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        logger.info(f"üé® Admin OpenAI callback: {callback.data}", user_id=callback.from_user.id)
        
        try:
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
                return
            
            if callback.data == "openai_confirm_delete":
                await openai_handler.handle_confirm_delete(callback, is_owner_check)
            else:
                await openai_handler.handle_openai_action(callback, state, is_owner_check)
            
            logger.info("‚úÖ Admin OpenAI action handled", callback_data=callback.data)
            
        except Exception as e:
            logger.error("üí• Error in admin OpenAI handler", error=str(e))
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    # ===== FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–ê =====

    async def handle_openai_name_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ (–ê–î–ú–ò–ù)"""
        logger.info("üìù Admin OpenAI name input", user_id=message.from_user.id)
        
        try:
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            await openai_handler.handle_name_input(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error in admin name input", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_openai_role_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ (–ê–î–ú–ò–ù)"""
        logger.info("üìù Admin OpenAI role input", user_id=message.from_user.id)
        
        try:
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            await openai_handler.handle_role_input(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error in admin role input", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_agent_name_edit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ (–ê–î–ú–ò–ù)"""
        logger.info("‚úèÔ∏è Admin agent name edit", user_id=message.from_user.id)
        
        try:
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            await openai_handler.handle_name_edit_input(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error in admin name edit", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_agent_prompt_edit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞ (–ê–î–ú–ò–ù)"""
        logger.info("üé≠ Admin agent prompt edit", user_id=message.from_user.id)
        
        try:
            is_owner_check = lambda user_id: self._is_owner(user_id)
            
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            await openai_handler.handle_prompt_edit_input(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error in admin prompt edit", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_admin_ai_conversation(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò - –° –°–õ–£–ß–ê–ô–ù–´–ú–ò –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò + –ü–û–î–î–ï–†–ñ–ö–û–ô –ì–û–õ–û–°–û–í–´–• –ë–ï–ó FROZEN ERROR + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê"""
        logger.info("üí¨ Admin AI testing conversation", user_id=message.from_user.id)
        
        try:
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if self.access_control:
                has_access, status = await self.access_control['check_owner_access']()
                if not has_access:
                    await self.access_control['send_access_denied'](message, status)
                    return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ text
            if message.text and message.text in ['/exit', '/stop', '/cancel']:
                await state.clear()
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
                ])
                
                await message.answer("üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=keyboard)
                return
            
            if not self._is_owner(message.from_user.id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø message.text
            message_text = None
            
            if message.voice:
                logger.info("üé§ Admin voice message received, transcribing...", user_id=message.from_user.id)
                
                # ‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
                await message.bot.send_chat_action(message.chat.id, "typing")
                thinking_msg = await self._show_random_voice_transcription(message)
                
                try:
                    message_text = await self._transcribe_voice_message(message.voice)
                    
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    await thinking_msg.delete()
                except Exception as e:
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        await thinking_msg.delete()
                    except:
                        pass
                    raise e
                
                if not message_text:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                    return
                
                logger.info("‚úÖ Admin voice transcribed successfully", 
                           user_id=message.from_user.id,
                           transcribed_length=len(message_text))
            elif message.text:
                message_text = message.text
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            if not message_text:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            data = await state.get_data()
            agent_type = data.get('agent_type', 'openai')
            
            if agent_type == 'openai':
                # ‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è
                await message.bot.send_chat_action(message.chat.id, "typing")
                thinking_msg = await self._show_random_thinking(message)
                
                try:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                    response = await self._get_openai_response_for_admin_with_text(message, message.from_user.id, message_text)
                    
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    await thinking_msg.delete()
                except Exception as e:
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        await thinking_msg.delete()
                    except:
                        pass
                    raise e
                
                if response:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="admin_ai_exit_conversation")]
                    ])
                    
                    await message.answer(response, reply_markup=keyboard)
                    logger.info("‚úÖ Admin AI response sent", user_id=message.from_user.id)
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            else:
                await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞")
                
        except Exception as e:
            logger.error("üí• Error in admin AI conversation", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò")

    # ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

    async def handle_user_ai_button_click(self, message: Message, state: FSMContext):
        """ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∑–≤–∞—Ç—å –ò–ò' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê"""
        user = message.from_user
        
        logger.info("ü§ñ User AI button clicked", 
                   bot_id=self.bot_id,
                   user_id=user.id,
                   username=user.username)
        
        try:
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if self.access_control:
                has_access, status = await self.access_control['check_owner_access']()
                if not has_access:
                    await self.access_control['send_access_denied'](message, status)
                    return
            
            # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = await state.get_state()
            if current_state:
                await state.clear()
            
            # ‚úÖ –ï–î–ò–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —á–µ—Ä–µ–∑ AccessChecker
            access_result = await self.access_checker.check_full_access(user.id)
            
            if not access_result['allowed']:
                logger.warning("‚ùå User access denied", 
                             user_id=user.id, 
                             reason=access_result['message'][:50])
                await message.answer(access_result['message'], reply_markup=ReplyKeyboardRemove())
                return
            
            # ===== –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –ó–ê–ü–£–°–ö –î–ò–ê–õ–û–ì–ê =====
            
            await state.set_state(AISettingsStates.user_in_ai_conversation)
            await state.update_data(
                agent_type='openai',
                user_id=user.id,
                bot_id=self.bot_id,
                started_at=datetime.now().isoformat(),
                is_user_conversation=True
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            fresh_ai_config = await self._get_fresh_ai_config()
            agent_settings = fresh_ai_config.get('settings', {})
            agent_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
            remaining_messages = ""
            try:
                can_send, used_today, daily_limit = await self.db.check_daily_message_limit(self.bot_id, user.id)
                if daily_limit > 0:
                    remaining = daily_limit - used_today
                    remaining_messages = f"\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}"
            except:
                pass
            
            welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å {agent_name}!</b>

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.{remaining_messages}

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
"""
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º user_ai_exit_conversation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="user_ai_exit_conversation")]
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
            
            logger.info("üéâ User AI conversation started", user_id=user.id)
            
        except Exception as e:
            logger.error("üí• Error in user AI button handler", user_id=user.id, error=str(e))
            
            try:
                await state.clear()
            except:
                pass
            
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò.")

    async def handle_user_ai_conversation(self, message: Message, state: FSMContext):
        """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ò–ò + —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û + –°–õ–£–ß–ê–ô–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê"""
        user = message.from_user
        
        logger.info("üí¨ User AI conversation message", 
                   user_id=user.id,
                   has_text=bool(message.text),
                   has_voice=bool(message.voice),
                   message_length=len(message.text) if message.text else 0)
        
        try:
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if self.access_control:
                has_access, status = await self.access_control['check_owner_access']()
                if not has_access:
                    await self.access_control['send_access_denied'](message, status)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = await state.get_state()
            if current_state != AISettingsStates.user_in_ai_conversation:
                logger.warning("‚ùå Wrong FSM state", user_id=user.id)
                return
            
            data = await state.get_data()
            is_user_conversation = data.get('is_user_conversation', False)
            
            if not is_user_conversation:
                logger.warning("‚ùå Not a user conversation", user_id=user.id)
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø message.text
            message_text = None
            
            if message.voice:
                logger.info("üé§ Voice message received, transcribing...", user_id=user.id)
                
                # ‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
                await message.bot.send_chat_action(message.chat.id, "typing")
                thinking_msg = await self._show_random_voice_transcription(message)

                try:
                    message_text = await self._transcribe_voice_message(message.voice)
                    
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    await thinking_msg.delete()
                except Exception as e:
                    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        await thinking_msg.delete()
                    except:
                        pass
                    raise e
                
                if not message_text:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                    return
                
                logger.info("‚úÖ Voice transcribed successfully", 
                           user_id=user.id,
                           transcribed_length=len(message_text))
            elif message.text:
                message_text = message.text
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            if not message_text:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            access_result = await self.access_checker.check_full_access(user.id)
            if not access_result['allowed']:
                await message.answer(access_result['message'])
                await state.clear()
                return
            
            # ‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è
            await message.bot.send_chat_action(message.chat.id, "typing")
            thinking_msg = await self._show_random_thinking(message)

            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                ai_response = await self._get_openai_response_for_user_with_text(message, user.id, message_text)
                
                # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                await thinking_msg.delete()
            except Exception as e:
                # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await thinking_msg.delete()
                except:
                    pass
                raise e
            
            if ai_response:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                increment_success = await self.db.increment_daily_message_usage(self.bot_id, user.id)
                if not increment_success:
                    logger.error("Failed to increment message usage", user_id=user.id)
                else:
                    logger.info("‚úÖ Message usage incremented successfully", user_id=user.id)
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="user_ai_exit_conversation")]
                ])
                
                await message.answer(ai_response, reply_markup=keyboard)
                logger.info("‚úÖ User AI response sent", user_id=user.id)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")
                
        except Exception as e:
            logger.error("üí• Error in user AI conversation", user_id=user.id, error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò.")

    async def handle_user_ai_exit(self, callback: CallbackQuery, state: FSMContext):
        """üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        user_id = callback.from_user.id
        
        logger.info("üö™ User AI conversation exit", user_id=user_id)
        
        try:
            await callback.answer()
            
            current_state = await state.get_state()
            if current_state:
                await state.clear()
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            await callback.message.edit_text(
                "üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!"
            )
            
            # ‚úÖ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò
            from ..keyboards import UserKeyboards
            
            await callback.message.answer(
                "üí¨ –í—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ò–ò —Å–Ω–æ–≤–∞!",
                reply_markup=UserKeyboards.ai_button()
            )
            
            logger.info("‚úÖ User AI conversation ended with new AI button", user_id=user_id)
            
        except Exception as e:
            logger.error("üí• Error ending user AI conversation", user_id=user_id, error=str(e))
            
            # Fallback: —Ö–æ—Ç—è –±—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ò–ò
            try:
                from ..keyboards import UserKeyboards
                await callback.message.answer(
                    "üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ò–ò —Å–Ω–æ–≤–∞:",
                    reply_markup=UserKeyboards.ai_button()
                )
            except Exception as fallback_error:
                logger.error("üí• Fallback also failed", error=str(fallback_error))

    async def handle_user_exit_commands(self, message: Message, state: FSMContext):
        """üö™ –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = message.from_user.id
        command = message.text.lower() if message.text else ""
        
        logger.info("üö™ User exit command", user_id=user_id, command=command)
        
        try:
            current_state = await state.get_state()
            
            if current_state == AISettingsStates.user_in_ai_conversation:
                data = await state.get_data()
                is_user_conversation = data.get('is_user_conversation', False)
                
                if is_user_conversation:
                    await state.clear()
                    
                    await message.answer(
                        "üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ.\n\n"
                        "–î–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ \"ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò\"",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    
                    logger.info("‚úÖ User AI conversation ended by command", user_id=user_id)
            
        except Exception as e:
            logger.error("üí• Error handling user exit command", user_id=user_id, error=str(e))

    # ===== –ù–û–í–´–ô –ì–†–£–ü–ü–û–í–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö =====

    async def handle_group_mention(self, message: Message):
        """üè∑Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ - –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò + –°–õ–£–ß–ê–ô–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê"""
        user = message.from_user
        
        logger.info("üè∑Ô∏è Bot mentioned in group", 
                   user_id=user.id,
                   chat_id=message.chat.id,
                   chat_type=message.chat.type,
                   bot_id=self.bot_config['bot_id'])
        
        try:
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if self.access_control:
                has_access, status = await self.access_control['check_owner_access']()
                if not has_access:
                    await self.access_control['send_access_denied'](message, status)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò –∞–≥–µ–Ω—Ç–∞
            access_result = await self.access_checker.check_full_access(user.id)
            
            if not access_result['allowed']:
                logger.warning("‚ùå Group user access denied", 
                             user_id=user.id, 
                             reason=access_result['message'][:50])
                
                # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ
                await message.reply("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –û—á–∏—â–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            clean_text = self._remove_bot_mention(message.text, self.bot_config['bot_username'])
            
            if not clean_text.strip():
                await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –û —á—ë–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")
                return

            # ‚úÖ –ù–û–í–û–ï: –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è
            await message.bot.send_chat_action(message.chat.id, "typing")
            thinking_msg = await self._show_random_thinking(message)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
                ai_response = await self._get_openai_response_for_user_with_text(message, user.id, clean_text)
                
                # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                await thinking_msg.delete()
            except Exception as e:
                # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await thinking_msg.delete()
                except:
                    pass
                raise e
            
            if ai_response:
                # –û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ
                await message.reply(ai_response)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                await self.db.increment_daily_message_usage(self.bot_config['bot_id'], user.id)
                
                logger.info("‚úÖ Group AI response sent", user_id=user.id)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")
                
        except Exception as e:
            logger.error("üí• Error in group mention handler", 
                        user_id=user.id, error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


def _is_bot_mentioned(message: Message, bot_username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞"""
    if not message.text or not message.entities:
        return False
    
    for entity in message.entities:
        if entity.type == "mention":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–µ–∫—Å—Ç–∞
            mention_text = message.text[entity.offset:entity.offset + entity.length]
            if mention_text == f"@{bot_username}":
                return True
    
    return False


def register_ai_handlers(dp: Dispatcher, **kwargs):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π + –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê + –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò + –°–õ–£–ß–ê–ô–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    ai_handler = AIHandler(
        db=kwargs['db'],
        bot_config=kwargs['bot_config'],
        user_bot=kwargs.get('user_bot'),
        access_control=kwargs.get('access_control')  # ‚úÖ –ù–û–í–û–ï
    )
    
    owner_user_id = ai_handler.owner_user_id
    
    try:
        logger.info("üéØ Registering AI handlers with GROUP MENTIONS + VOICE + ACCESS CONTROL + FILE MANAGEMENT + RANDOM ANIMATIONS", 
                   bot_id=ai_handler.bot_id,
                   owner_user_id=owner_user_id,
                   new_features=[
                       "Group mentions support (@botname message)",
                       "Single increment only in handle_user_ai_conversation", 
                       "Enhanced voice transcription diagnostics",
                       "Complete voice support for admins and users",
                       "Owner access control integration",
                       "File management for OpenAI agents",
                       "Random animated thinking dots with variety and natural timing"
                   ])
        
        # ===== üèÜ –ê–î–ú–ò–ù–°–ö–ò–ï –ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¢–û–õ–¨–ö–û –í–õ–ê–î–ï–õ–ï–¶) =====
        
        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
        dp.message.register(
            ai_handler.handle_openai_name_input,
            StateFilter(AISettingsStates.admin_waiting_for_openai_name),
            F.from_user.id == owner_user_id
        )
        
        dp.message.register(
            ai_handler.handle_openai_role_input,
            StateFilter(AISettingsStates.admin_waiting_for_openai_role),
            F.from_user.id == owner_user_id
        )
        
        dp.message.register(
            ai_handler.handle_agent_name_edit,
            StateFilter(AISettingsStates.admin_editing_agent_name),
            F.from_user.id == owner_user_id
        )
        
        dp.message.register(
            ai_handler.handle_agent_prompt_edit,
            StateFilter(AISettingsStates.admin_editing_agent_prompt),
            F.from_user.id == owner_user_id
        )
        
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        dp.message.register(
            ai_handler.handle_admin_ai_conversation,
            StateFilter(AISettingsStates.admin_in_ai_conversation),
            F.from_user.id == owner_user_id,
            F.text
        )
        
        # ‚úÖ –ù–û–í–û–ï: –ê–¥–º–∏–Ω—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        dp.message.register(
            ai_handler.handle_admin_ai_conversation,
            StateFilter(AISettingsStates.admin_in_ai_conversation),
            F.from_user.id == owner_user_id,
            F.voice
        )
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        dp.callback_query.register(
            ai_handler.handle_navigation_callbacks,
            F.data.in_(["admin_panel", "admin_ai", "admin_main"]),
            F.from_user.id == owner_user_id
        )
        
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º admin_ai_exit_conversation –¥–ª—è –∞–¥–º–∏–Ω–∞
        dp.callback_query.register(
            ai_handler.handle_admin_ai_exit_conversation,
            F.data == "admin_ai_exit_conversation",
            F.from_user.id == owner_user_id
        )
        
        dp.callback_query.register(
            ai_handler.handle_openai_callbacks,
            F.data.startswith("openai_"),
            F.from_user.id == owner_user_id
        )
        
        # ===== üìÅ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í (–¢–û–õ–¨–ö–û –í–õ–ê–î–ï–õ–ï–¶) =====
        
        # Callback'—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        dp.callback_query.register(
            ai_handler.handle_file_management_callbacks,
            F.data.in_(["openai_start_upload", "openai_finish_upload", "openai_manage_files","openai_upload_files"]),
            F.from_user.id == owner_user_id
        )
        
        # FSM –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        dp.message.register(
            ai_handler.handle_document_upload_fsm,
            StateFilter(AISettingsStates.admin_uploading_documents),
            F.from_user.id == owner_user_id,
            F.document
        )
        
        # ===== üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–ù–ï –í–õ–ê–î–ï–õ–ï–¶) =====
        
        # –û–ë–†–ê–ë–û–¢–ö–ê –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–≤–∞—Ç—å –ò–ò" (–ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –≤ channel_handlers)
        dp.message.register(
            ai_handler.handle_user_ai_button_click,
            F.text == "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò",
            F.chat.type == "private",
            F.from_user.id != owner_user_id
        )
        
        # –î–∏–∞–ª–æ–≥ —Å –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        dp.message.register(
            ai_handler.handle_user_ai_conversation,
            StateFilter(AISettingsStates.user_in_ai_conversation),
            F.chat.type == "private",
            F.from_user.id != owner_user_id,
            F.text
        )
        
        # ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ª–æ–≥ —Å –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        dp.message.register(
            ai_handler.handle_user_ai_conversation,
            StateFilter(AISettingsStates.user_in_ai_conversation),
            F.chat.type == "private",
            F.from_user.id != owner_user_id,
            F.voice
        )
        
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º user_ai_exit_conversation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        dp.callback_query.register(
            ai_handler.handle_user_ai_exit,
            F.data == "user_ai_exit_conversation",
            F.from_user.id != owner_user_id
        )
        
        # –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        dp.message.register(
            ai_handler.handle_user_exit_commands,
            F.text.lower().in_(['/exit', '/stop', '/cancel', '–≤—ã—Ö–æ–¥', '—Å—Ç–æ–ø']),
            F.chat.type == "private",
            F.from_user.id != owner_user_id
        )
        
        # ===== üè∑Ô∏è –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö =====
        dp.message.register(
            ai_handler.handle_group_mention,
            F.chat.type.in_(["group", "supergroup"]),
            F.text,
            lambda message: _is_bot_mentioned(message, kwargs['bot_config']['bot_username'])
        )
        
        logger.info("‚úÖ AI handlers registered with GROUP MENTIONS + VOICE + ACCESS CONTROL + FILE MANAGEMENT + RANDOM ANIMATIONS", 
                   owner_user_id=owner_user_id,
                   admin_handlers=8,  
                   user_handlers=5,
                   group_handlers=1,
                   file_handlers=2,  # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
                   total_handlers=16,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                   critical_fixes=[
                       "Message increment ONLY in handle_user_ai_conversation - NO DOUBLE INCREMENT",
                       "Safe message.text check in handle_admin_ai_conversation", 
                       "Safe text handling in handle_user_exit_commands",
                       "ENHANCED voice message transcription via OpenAI Whisper API with detailed diagnostics",
                       "COMPLETE VOICE SUPPORT for both users AND admins without frozen instance errors",
                       "New _get_openai_response_for_admin_with_text method for admin voice messages",
                       "GROUP MENTIONS SUPPORT: @botname message triggers AI response in groups",
                       "OWNER ACCESS CONTROL: All AI handlers check owner access before processing",
                       "FILE MANAGEMENT: Complete file upload/management support for OpenAI agents",
                       "RANDOM ANIMATED THINKING: 7 different animation variants with natural timing",
                       "RANDOM VOICE ANIMATIONS: 5 different voice transcription animation variants",
                       "PROPER ANIMATION CLEANUP: Delete thinking messages after response or on error"
                   ])
        
    except Exception as e:
        logger.error("üí• Failed to register AI handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise
