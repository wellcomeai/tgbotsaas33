"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ChatForYou –∏ ProTalk –∞–≥–µ–Ω—Ç–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –≤–Ω–µ—à–Ω–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –ò–ò
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Ç–æ–∫–µ–Ω—É
"""

import structlog
from datetime import datetime
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ..states import AISettingsStates
from ..keyboards import AIKeyboards

logger = structlog.get_logger()


class ChatForYouHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—à–Ω–∏—Ö –ò–ò –ø–ª–∞—Ç—Ñ–æ—Ä–º (ChatForYou, ProTalk)"""
    
    def __init__(self, db, bot_config: dict, ai_assistant, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.ai_assistant = ai_assistant
        self.user_bot = user_bot
        
        # –•—Ä–∞–Ω–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self._ai_assistant_id = bot_config.get('ai_assistant_id')
        self._ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        logger.info("üåê ChatForYouHandler initialized", 
                   bot_id=self.bot_id,
                   has_external_agent=bool(self._ai_assistant_id))

    # ===== –°–í–û–ô–°–¢–í–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ê–ö–¢–£–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú =====
    
    @property
    def ai_assistant_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ ID –∞–≥–µ–Ω—Ç–∞ (API —Ç–æ–∫–µ–Ω–∞)"""
        return self._ai_assistant_id
    
    @ai_assistant_id.setter
    def ai_assistant_id(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_id = value
    
    @property 
    def ai_assistant_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_settings
    
    @ai_assistant_settings.setter
    def ai_assistant_settings(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_settings = value

    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    
    async def handle_ai_action(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è ChatForYou –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üéØ ChatForYou action callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data.replace("ai_", "")
        
        logger.info("üîÑ Processing ChatForYou action", 
                   action=action,
                   bot_id=self.bot_id)
        
        if action == "set_id":
            await self._set_assistant_id(callback, state)
        elif action == "test":
            await self._test_ai_assistant(callback, state)
        elif action == "change_type":
            await self._change_agent_type(callback)
        elif action == "confirm_change_type":
            await self._confirm_change_agent_type(callback)
        elif action == "delete":
            await self._delete_chatforyou_agent(callback)

    async def show_settings(self, callback: CallbackQuery, has_ai_agent: bool):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatForYou –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üìã Displaying ChatForYou settings", 
                   bot_id=self.bot_id,
                   has_ai_agent=has_ai_agent)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        platform = self.ai_assistant_settings.get('detected_platform')
        config_status = "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        platform_info = ""
        
        logger.info("üîç ChatForYou configuration check", 
                   platform=platform,
                   has_assistant_id=bool(self.ai_assistant_id),
                   chatforyou_bot_id=self.ai_assistant_settings.get('chatforyou_bot_id'))
        
        if self.ai_assistant_id:
            if platform == 'chatforyou':
                bot_id_value = self.ai_assistant_settings.get('chatforyou_bot_id')
                if bot_id_value:
                    config_status = f"API: {self.ai_assistant_id[:10]}... | ID: {bot_id_value}"
                else:
                    config_status = f"API: {self.ai_assistant_id[:10]}... | ID: –Ω–µ –∑–∞–¥–∞–Ω"
            else:
                config_status = f"API: {self.ai_assistant_id[:10]}..."
            
            if platform:
                platform_names = {
                    'chatforyou': 'ChatForYou',
                    'protalk': 'ProTalk'
                }
                platform_display = platform_names.get(platform, platform)
                platform_info = f"\nüåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_display}"
        
        text = f"""
üåê <b>–ò–ò –ê–≥–µ–Ω—Ç —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_status}{platform_info}

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>
- ChatForYou (—Ç—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω + ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
- ProTalk (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ API —Ç–æ–∫–µ–Ω)

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 2 —à–∞–≥–∞:</b>
1Ô∏è‚É£ –í–≤–æ–¥ API —Ç–æ–∫–µ–Ω–∞
2Ô∏è‚É£ –í–≤–æ–¥ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ChatForYou)
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        is_configured = False
        if self.ai_assistant_id:
            if platform == 'chatforyou':
                is_configured = bool(self.ai_assistant_settings.get('chatforyou_bot_id'))
            else:
                is_configured = True
        
        logger.info("üìä Configuration status", 
                   is_configured=is_configured,
                   platform=platform)
        
        keyboard = AIKeyboards.chatforyou_settings_menu(is_configured, platform)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞", callback_data="ai_change_type")
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –ù–ê–°–¢–†–û–ô–ö–ê API –¢–û–ö–ï–ù–ê =====
    
    async def _set_assistant_id(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (ChatForYou)"""
        logger.info("üîß Setting ChatForYou assistant ID", 
                   bot_id=self.bot_id)
        
        await state.set_state(AISettingsStates.waiting_for_api_token)
        
        text = f"""
üîë <b>–®–∞–≥ 1/2: API —Ç–æ–∫–µ–Ω</b>

–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω –æ—Ç ChatForYou –∏–ª–∏ ProTalk.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>
- ChatForYou (api.chatforyou.ru)
- ProTalk (api.pro-talk.ru)

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ç–æ–∫–µ–Ω—É.

<b>–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:</b> <code>your_api_token_here</code>

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ API —Ç–æ–∫–µ–Ω:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_api_token_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API —Ç–æ–∫–µ–Ω–∞"""
        logger.info("üìù ChatForYou API token input", 
                   user_id=message.from_user.id,
                   input_length=len(message.text),
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            logger.warning("üö´ Unauthorized token input", user_id=message.from_user.id)
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        api_token = message.text.strip()
        
        logger.info("üîç Processing API token", 
                   token_length=len(api_token),
                   token_prefix=api_token[:12] + "..." if len(api_token) > 12 else api_token)
        
        try:
            await message.answer("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É...")
            
            logger.info("üì° Calling platform detection")
            success, platform, error_msg = await self.db.detect_and_validate_ai_platform(api_token)
            
            logger.info("üìä Platform detection result", 
                       success=success,
                       platform=platform,
                       error=error_msg if not success else None)
            
            if not success:
                logger.warning("‚ùå Platform detection failed", error=error_msg)
                await message.answer(
                    f"‚ùå {error_msg}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            await state.update_data(api_token=api_token, platform=platform)
            
            if platform == 'chatforyou':
                logger.info("üîß ChatForYou detected, requesting bot ID")
                await state.set_state(AISettingsStates.waiting_for_bot_id)
                
                text = f"""
‚úÖ <b>–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ChatForYou!</b>

üÜî <b>–®–∞–≥ 2/2: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChatForYou –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>21472</code>

<b>–í–∞–∂–Ω–æ:</b> ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞–∫—Ç–∏–≤–Ω—ã–º –≤ —Å–∏—Å—Ç–µ–º–µ ChatForYou.

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b>
"""
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
                ])
                
                await message.answer(text, reply_markup=keyboard)
                
            else:
                # ProTalk –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                logger.info("üîß ProTalk detected, saving configuration")
                await self._save_protalk_configuration(api_token, platform, message, state)
                
        except Exception as e:
            logger.error("üí• Failed to process API token", 
                        error=str(e),
                        error_type=type(e).__name__)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞")
            await state.clear()

    async def _save_protalk_configuration(self, api_token: str, platform: str, message: Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ProTalk"""
        logger.info("üíæ Saving ProTalk configuration")
        
        try:
            ai_settings = self.ai_assistant_settings.copy()
            ai_settings.update({
                'agent_type': 'chatforyou',
                'detected_platform': platform,
                'platform_detected_at': datetime.now().isoformat(),
                'platform_validation': 'completed'
            })
            
            logger.info("üíæ Saving ProTalk configuration to database")
            await self.db.save_external_ai_config(
                bot_id=self.bot_id,
                api_token=api_token,
                bot_id_value=None,
                platform=platform,
                settings=ai_settings
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.ai_assistant_id = api_token
            self.ai_assistant_settings = ai_settings
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self._safe_update_user_bot(
                ai_assistant_id=api_token,
                ai_assistant_settings=ai_settings
            )
            await self._safe_update_bot_manager(
                ai_assistant_id=api_token,
                ai_assistant_settings=ai_settings
            )
            
            success_text = f"""
‚úÖ <b>ProTalk –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤!</b>

<b>API Token:</b> <code>{api_token[:15]}...</code>
<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ProTalk
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

üî• –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ò–ò –∞–≥–µ–Ω—Ç–∞!
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò", callback_data="ai_test")],
                [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
            ])
            
            logger.info("‚úÖ ProTalk configuration completed successfully")
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Failed to save ProTalk configuration", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ProTalk")
            await state.clear()

    # ===== –ù–ê–°–¢–†–û–ô–ö–ê BOT ID –î–õ–Ø CHATFORYOU =====
    
    async def handle_bot_id_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è ChatForYou"""
        logger.info("üìù ChatForYou bot ID input", 
                   user_id=message.from_user.id,
                   input_text=message.text,
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            logger.warning("üö´ Unauthorized bot ID input", user_id=message.from_user.id)
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        bot_id_value = message.text.strip()
        
        logger.info("üîç Validating bot ID", 
                   bot_id_value=bot_id_value)
        
        try:
            int(bot_id_value)
        except ValueError:
            logger.warning("‚ùå Invalid bot ID format", 
                          bot_id_value=bot_id_value)
            await message.answer(
                f"‚ùå <b>ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>\n\n"
                f"–í—ã –≤–≤–µ–ª–∏: {bot_id_value}\n"
                f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID: <code>21472</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        bot_id_value = int(bot_id_value)
        
        logger.info("‚úÖ Bot ID validation passed", 
                   bot_id_value=bot_id_value)
        
        try:
            data = await state.get_data()
            api_token = data.get('api_token')
            platform = data.get('platform')
            
            logger.info("üìä ChatForYou configuration data", 
                       has_api_token=bool(api_token),
                       platform=platform,
                       bot_id_value=bot_id_value)
            
            if not api_token or platform != 'chatforyou':
                logger.error("‚ùå Missing state data for ChatForYou")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ChatForYou...")
            
            logger.info("üì° Validating ChatForYou configuration")
            success, verified_platform, error_msg = await self.db.detect_and_validate_ai_platform(
                api_token, 
                test_bot_id=bot_id_value
            )
            
            logger.info("üìä ChatForYou validation result", 
                       success=success,
                       verified_platform=verified_platform,
                       error=error_msg if not success else None)
            
            if not success:
                logger.warning("‚ùå ChatForYou validation failed", error=error_msg)
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChatForYou</b>\n\n"
                    f"{error_msg}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ChatForYou
            await self._save_chatforyou_configuration(api_token, platform, bot_id_value, message, state)
            
        except Exception as e:
            logger.error("üí• Failed to validate ChatForYou configuration", 
                        error=str(e),
                        error_type=type(e).__name__)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ChatForYou")
            await state.clear()

    async def _save_chatforyou_configuration(self, api_token: str, platform: str, bot_id_value: int, message: Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ChatForYou"""
        logger.info("üíæ Saving ChatForYou configuration")
        
        try:
            ai_settings = self.ai_assistant_settings.copy()
            ai_settings.update({
                'agent_type': 'chatforyou',
                'detected_platform': platform,
                'chatforyou_bot_id': bot_id_value,
                'platform_detected_at': datetime.now().isoformat(),
                'bot_id_verified': True,
                'bot_id_verified_at': datetime.now().isoformat(),
                'platform_validation': 'completed',
                'validation_method': 'real_api_test'
            })
            
            await self.db.save_external_ai_config(
                bot_id=self.bot_id,
                api_token=api_token,
                bot_id_value=str(bot_id_value),
                platform=platform,
                settings=ai_settings
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.ai_assistant_id = api_token
            self.ai_assistant_settings = ai_settings
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self._safe_update_user_bot(
                ai_assistant_id=api_token,
                ai_assistant_settings=ai_settings
            )
            await self._safe_update_bot_manager(
                ai_assistant_id=api_token,
                ai_assistant_settings=ai_settings
            )
            
            success_text = f"""
üéâ <b>ChatForYou –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!</b>

<b>API Token:</b> <code>{api_token[:15]}...</code>
<b>ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {bot_id_value}
<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ChatForYou
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–º API –∑–∞–ø—Ä–æ—Å–æ–º

–¢–µ–ø–µ—Ä—å –ò–ò –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò", callback_data="ai_test")],
                [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
            ])
            
            logger.info("‚úÖ ChatForYou configuration completed successfully")
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Failed to save ChatForYou configuration", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ChatForYou")
            await state.clear()

    # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
    
    async def _test_ai_assistant(self, callback: CallbackQuery, state: FSMContext):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (ChatForYou)"""
        logger.info("üß™ Starting ChatForYou AI assistant test", 
                   bot_id=self.bot_id,
                   has_assistant_id=bool(self.ai_assistant_id))
        
        if not self.ai_assistant_id:
            logger.warning("‚ùå No assistant ID for testing")
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API —Ç–æ–∫–µ–Ω", show_alert=True)
            return
        
        platform = self.ai_assistant_settings.get('detected_platform')
        if not platform:
            logger.warning("‚ùå No platform detected for testing")
            await callback.answer("‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω.", show_alert=True)
            return
        
        if platform == 'chatforyou' and not self.ai_assistant_settings.get('chatforyou_bot_id'):
            logger.warning("‚ùå ChatForYou requires bot ID")
            await callback.answer("‚ùå –î–ª—è ChatForYou —Ç—Ä–µ–±—É–µ—Ç—Å—è ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", show_alert=True)
            return
        
        logger.info("‚úÖ Starting test mode", 
                   platform=platform,
                   chatforyou_bot_id=self.ai_assistant_settings.get('chatforyou_bot_id'))
        
        await state.set_state(AISettingsStates.in_ai_conversation)
        await state.update_data(is_test_mode=True, agent_type='chatforyou')
        
        platform_names = {
            'chatforyou': 'ChatForYou',
            'protalk': 'ProTalk'
        }
        platform_display = platform_names.get(platform, platform)
        
        bot_id_info = ""
        if platform == 'chatforyou':
            bot_id_info = f"\n<b>ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {self.ai_assistant_settings.get('chatforyou_bot_id')}"
        
        text = f"""
üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞ (ChatForYou)</b>

<b>API Token:</b> {self.ai_assistant_id[:15]}...
<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_display}{bot_id_info}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞. 

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")],
            [InlineKeyboardButton(text="üîß –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –î–ò–ê–õ–û–ì –° CHATFORYOU =====
    
    async def handle_chatforyou_conversation(self, message: Message, data: dict) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å ChatForYou"""
        logger.info("üåê ChatForYou conversation processing", 
                   user_id=message.from_user.id,
                   message_length=len(message.text))
        
        try:
            platform = self.ai_assistant_settings.get('detected_platform')
            if not platform:
                logger.error("‚ùå No platform detected for ChatForYou")
                return None
            
            bot_id_value = None
            if platform == 'chatforyou':
                bot_id_value = self.ai_assistant_settings.get('chatforyou_bot_id')
                if not bot_id_value:
                    logger.error("‚ùå No bot ID for ChatForYou")
                    return None
            
            logger.info("üìä ChatForYou conversation parameters", 
                       platform=platform,
                       bot_id_value=bot_id_value,
                       has_context_info=self.ai_assistant_settings.get('context_info', True))
            
            context = {}
            if self.ai_assistant_settings.get('context_info', True):
                context = {
                    "user_name": message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "username": message.from_user.username,
                    "is_test": data.get('is_test_mode', False)
                }
                
                logger.info("üìù Conversation context prepared", context=context)
            
            try:
                from services.ai_assistant import ai_client
                
                logger.info("üì° Sending message to ChatForYou AI service")
                
                ai_response = await ai_client.send_message(
                    api_token=self.ai_assistant_id,
                    message=message.text,
                    user_id=message.from_user.id,
                    bot_id=bot_id_value,
                    platform=platform,
                    context=context
                )
                
                logger.info("‚úÖ ChatForYou response received", 
                           response_length=len(ai_response) if ai_response else 0)
                
                return ai_response
                
            except ImportError:
                logger.warning("üì¶ AI assistant service not available")
                return "ü§ñ –ò–ò —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        except Exception as e:
            logger.error("üí• Error in ChatForYou conversation", 
                        error=str(e),
                        error_type=type(e).__name__)
            return None

    # ===== –°–ú–ï–ù–ê –¢–ò–ü–ê –ê–ì–ï–ù–¢–ê =====
    
    async def _change_agent_type(self, callback: CallbackQuery):
        """–°–º–µ–Ω–∞ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üîÑ Agent type change request", 
                   bot_id=self.bot_id,
                   current_type=self.ai_assistant_settings.get('agent_type', 'none'))
        
        text = """
üîÑ <b>–°–º–µ–Ω–∞ —Ç–∏–ø–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞:
- –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞
- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ
- –î–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞?
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data="ai_confirm_change_type")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def _confirm_change_agent_type(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ Confirming agent type change", 
                   bot_id=self.bot_id,
                   current_type=self.ai_assistant_settings.get('agent_type', 'none'),
                   user_id=callback.from_user.id)
        
        try:
            # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await callback.message.edit_text("üîÑ –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞...")
            
            # 2. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î
            logger.info("üóëÔ∏è Clearing AI configuration in database")
            await self.db.clear_ai_configuration(self.bot_id)
            
            # 3. –û—á–∏—â–∞–µ–º –∫–µ—à –±–æ—Ç–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            logger.info("üßπ Clearing bot cache")
            await self.db.expire_bot_cache(self.bot_id)
            
            # 4. –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info("üßπ Clearing local settings")
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'none'}
            
            # 5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("üîÑ Updating other components")
            try:
                await self._safe_update_user_bot(
                    ai_assistant_id=None,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                logger.info("‚úÖ UserBot updated after type change")
            except Exception as update_error:
                logger.error("‚ö†Ô∏è UserBot update failed after type change", error=str(update_error))
            
            try:
                await self._safe_update_bot_manager(
                    ai_assistant_id=None,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                logger.info("‚úÖ BotManager updated after type change")
            except Exception as update_error:
                logger.error("‚ö†Ô∏è BotManager update failed after type change", error=str(update_error))
            
            # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            logger.info("üìã Redirecting to agent type selection after cleanup")
            
            await callback.message.edit_text(
                "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –ö –≤—ã–±–æ—Ä—É –∞–≥–µ–Ω—Ç–∞", callback_data="admin_ai")]
                ])
            )
            
            logger.info("‚úÖ Agent type change completed successfully", 
                       bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Failed to change agent type", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
            )

    # ===== –£–î–ê–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê =====
    
    async def _delete_chatforyou_agent(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ ChatForYou –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üóëÔ∏è Deleting ChatForYou agent", 
                   bot_id=self.bot_id)
        
        text = """
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞:
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ò–ò
- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞?
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="ai_confirm_delete")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_confirm_delete(self, callback: CallbackQuery, is_owner_check):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ChatForYou –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üóëÔ∏è Confirming ChatForYou agent deletion", 
                       bot_id=self.bot_id)
            
            await callback.message.edit_text("üîÑ –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞...")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self.db.clear_ai_configuration(self.bot_id)
            await self.db.expire_bot_cache(self.bot_id)
            
            # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'none'}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._safe_update_user_bot(
                ai_assistant_id=None,
                ai_assistant_settings=self.ai_assistant_settings
            )
            await self._safe_update_bot_manager(
                ai_assistant_id=None,
                ai_assistant_settings=self.ai_assistant_settings
            )
            
            await callback.message.edit_text(
                "‚úÖ –ò–ò –∞–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="admin_ai")]
                ])
            )
            
            logger.info("‚úÖ ChatForYou agent deleted successfully")
            
        except Exception as e:
            logger.error("üí• Error deleting ChatForYou agent", 
                        error=str(e),
                        error_type=type(e).__name__)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞", show_alert=True)

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====
    
    async def handle_ai_assistant_id_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.info("üìù AI assistant ID input (compatibility)", 
                   user_id=message.from_user.id)
        await self.handle_api_token_input(message, state, is_owner_check)

    async def handle_ai_daily_limit_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        logger.info("üìù Daily limit input", 
                   user_id=message.from_user.id,
                   input_text=message.text)
        
        if not is_owner_check(message.from_user.id):
            logger.warning("üö´ Unauthorized daily limit input", user_id=message.from_user.id)
            return
        
        # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ChatForYou, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º
        logger.info("‚ÑπÔ∏è Daily limit feature not implemented for ChatForYou agent types")
        pass

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _cancel_and_show_ai(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        logger.info("‚ùå Cancelling ChatForYou operation", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
        ])
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    
    async def _safe_update_user_bot(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UserBot"""
        logger.info("üîÑ Attempting UserBot update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            if self.user_bot and hasattr(self.user_bot, 'update_ai_settings'):
                await self.user_bot.update_ai_settings(**kwargs)
                logger.info("‚úÖ UserBot update successful")
            else:
                logger.warning("‚ö†Ô∏è UserBot doesn't have update_ai_settings method", 
                             bot_id=self.bot_id,
                             has_user_bot=bool(self.user_bot),
                             has_method=hasattr(self.user_bot, 'update_ai_settings') if self.user_bot else False)
        except Exception as e:
            logger.error("üí• Failed to update UserBot settings", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
    
    async def _safe_update_bot_manager(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot_manager"""
        logger.info("üîÑ Attempting BotManager update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            bot_manager = self.bot_config.get('bot_manager')
            if bot_manager and hasattr(bot_manager, 'update_bot_config'):
                await bot_manager.update_bot_config(self.bot_id, **kwargs)
                logger.info("‚úÖ BotManager update successful")
            else:
                logger.warning("‚ö†Ô∏è BotManager doesn't have update_bot_config method", 
                             bot_id=self.bot_id,
                             has_bot_manager=bool(bot_manager),
                             has_method=hasattr(bot_manager, 'update_bot_config') if bot_manager else False)
        except Exception as e:
            logger.error("üí• Failed to update BotManager config", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
