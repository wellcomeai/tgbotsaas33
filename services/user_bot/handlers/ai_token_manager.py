"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å–∞–º–∏, –ª–∏–º–∏—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
"""

import structlog
from datetime import datetime
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.notifications import send_token_warning_notification
from config import Emoji

logger = structlog.get_logger()


class TokenManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, db, bot_config: dict):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        
        logger.info("üîß TokenManager initialized", 
                   bot_id=self.bot_id,
                   owner_user_id=self.owner_user_id)

    async def initialize_user_token_balance(self, user_id: int, admin_chat_id: int) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –µ–≥–æ –ø–µ—Ä–≤—ã–π OpenAI –∞–≥–µ–Ω—Ç"""
        try:
            logger.info("üîç Checking if user needs token balance initialization", 
                       user_id=user_id, admin_chat_id=admin_chat_id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ DatabaseManager
            success = await self.db.initialize_token_balance(
                user_id=user_id, 
                admin_chat_id=admin_chat_id,
                bot_id=self.bot_id
            )
            
            if success:
                logger.info("‚úÖ Token balance initialized successfully", 
                           user_id=user_id, admin_chat_id=admin_chat_id)
                return True
            else:
                logger.error("‚ùå Failed to initialize token balance", user_id=user_id)
                return False
                
        except Exception as e:
            logger.error("üí• Exception in token balance initialization", 
                        user_id=user_id, error=str(e), exc_info=True)
            return False

    async def check_token_limits_before_request(self, user_id: int) -> tuple[bool, str]:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI"""
        try:
            logger.info("üîç Checking token limits before OpenAI request", 
                       user_id=user_id, bot_id=self.bot_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            has_tokens, used_tokens, limit_tokens = await self.db.check_token_limit(user_id)
            
            logger.info("üìä Token limit check result", 
                       user_id=user_id,
                       has_tokens=has_tokens,
                       used_tokens=used_tokens,
                       limit_tokens=limit_tokens)
            
            if not has_tokens:
                # –¢–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                logger.warning("‚ùå User exceeded token limit", 
                              user_id=user_id,
                              used=used_tokens,
                              limit=limit_tokens)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await self._send_token_exhausted_notification(user_id, self.bot_id, limit_tokens - used_tokens)
                
                error_message = f"""
‚ùå <b>–¢–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b>

–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {used_tokens:,} / {limit_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ò–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤

üí° <i>–¢–æ–∫–µ–Ω—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã OpenAI –∞–≥–µ–Ω—Ç–∞</i>
"""
                return False, error_message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            usage_percentage = (used_tokens / limit_tokens) * 100 if limit_tokens > 0 else 0
            
            logger.info("üìà Token usage percentage", 
                       user_id=user_id,
                       percentage=usage_percentage)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
            if usage_percentage >= 80:
                should_notify = await self.db.should_send_token_notification(user_id)
                if should_notify:
                    await self._send_token_warning(user_id, used_tokens, limit_tokens, usage_percentage)
            
            return True, ""
            
        except Exception as e:
            logger.error("üí• Error checking token limits", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
            return True, ""
    
    async def save_token_usage_after_response(self, user_id: int, input_tokens: int, output_tokens: int, admin_chat_id: int = None):
        """‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ OpenAI"""
        try:
            logger.info("üí∞ Saving token usage after OpenAI response", 
                       user_id=user_id,
                       bot_id=self.bot_id,
                       input_tokens=input_tokens,
                       output_tokens=output_tokens)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º admin_chat_id –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not admin_chat_id:
                admin_chat_id = self.owner_user_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            success = await self.db.save_token_usage(
                bot_id=self.bot_id,
                input_tokens=input_tokens,
                output_tokens=output_tokens,
                admin_chat_id=admin_chat_id,
                user_id=user_id
            )
            
            if success:
                logger.info("‚úÖ Token usage saved successfully")
            else:
                logger.error("‚ùå Failed to save token usage")
            
            return success
            
        except Exception as e:
            logger.error("üí• Error saving token usage", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False
    
    async def _send_token_warning(self, user_id: int, used_tokens: int, limit_tokens: int, percentage: float):
        """‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            logger.info("‚ö†Ô∏è Sending token usage warning", 
                       user_id=user_id,
                       percentage=percentage,
                       used=used_tokens,
                       limit=limit_tokens)
            
            # –ü–æ–ª—É—á–∞–µ–º admin_chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_chat_id = await self.db.get_admin_chat_id_for_token_notification(user_id)
            
            if admin_chat_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ notification service
                await send_token_warning_notification(
                    admin_chat_id=admin_chat_id,
                    user_id=user_id,
                    used_tokens=used_tokens,
                    limit_tokens=limit_tokens,
                    percentage=percentage,
                    bot_username=self.bot_username
                )
                
                # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await self.db.set_token_notification_sent(user_id, True)
                
                logger.info("‚úÖ Token warning notification sent successfully")
            else:
                logger.warning("‚ö†Ô∏è No admin chat ID found for token notification", user_id=user_id)
            
        except Exception as e:
            logger.error("üí• Error sending token warning", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)

    async def _send_token_exhausted_notification(self, user_id: int, bot_id: str, remaining_tokens: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            logger.info("üì¢ Sending token exhausted notification", 
                       user_id=user_id,
                       bot_id=bot_id,
                       remaining_tokens=remaining_tokens)
            
            # –ü–æ–ª—É—á–∞–µ–º admin_chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
            bot_config = await self.db.get_bot_full_config(bot_id)
            if not bot_config:
                logger.error("‚ùå Cannot send notification: bot config not found", bot_id=bot_id)
                return
            
            admin_chat_id = bot_config.get('openai_admin_chat_id')
            if not admin_chat_id:
                logger.warning("‚ö†Ô∏è No admin_chat_id found for token notification", 
                              bot_id=bot_id,
                              user_id=user_id)
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            notification_sent = await self.db.should_send_token_notification(user_id)
            if not notification_sent:  # should_send –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                logger.info("‚ÑπÔ∏è Token exhausted notification already sent", user_id=user_id)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                try:
                    from services.bot_manager import bot_manager
                    
                    notification_text = f"""
üö® <b>–¢–æ–∫–µ–Ω—ã OpenAI –∏—Å—á–µ—Ä–ø–∞–Ω—ã!</b>

ü§ñ <b>–ë–æ—Ç:</b> {bot_config.get('bot_username', 'Unknown')}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}
üéØ <b>–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã:</b> {remaining_tokens}

‚ùå –ò–ò –∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
"""
                    
                    await bot_manager.send_admin_notification(
                        admin_chat_id, 
                        notification_text
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    await self.db.set_token_notification_sent(user_id, True)
                    
                    logger.info("‚úÖ Token exhausted notification sent", 
                               admin_chat_id=admin_chat_id,
                               user_id=user_id)
                    
                except ImportError:
                    logger.warning("‚ö†Ô∏è bot_manager not available for notifications")
                except Exception as e:
                    logger.error("üí• Failed to send notification via bot_manager", 
                               error=str(e))
                    
            except Exception as e:
                logger.error("üí• Failed to send token exhausted notification", 
                           admin_chat_id=admin_chat_id,
                           error=str(e))
                
        except Exception as e:
            logger.error("üí• Error in token exhausted notification", 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
    
    def format_number(self, number: int) -> str:
        """‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (22 500)"""
        return f"{number:,}".replace(",", " ")
    
    async def handle_request_token_topup(self, callback: CallbackQuery):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        await callback.answer()
        
        if callback.from_user.id != self.owner_user_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üí≥ Token topup request", 
                       user_id=self.owner_user_id,
                       bot_id=self.bot_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            token_balance = await self.db.get_user_token_balance(self.owner_user_id)
            
            used_formatted = self.format_number(token_balance.get('total_used', 0))
            limit_formatted = self.format_number(token_balance.get('limit', 500000))
            remaining_formatted = self.format_number(token_balance.get('remaining', 500000))
            percentage = token_balance.get('percentage_used', 0.0)
            
            text = f"""
üí≥ <b>–ó–∞–ø—Ä–æ—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤</b>

<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_formatted} / {limit_formatted} ({percentage:.1f}%)
üìâ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_formatted}

<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
‚Ä¢ User ID: {self.owner_user_id}
‚Ä¢ Bot: @{self.bot_username}
‚Ä¢ –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {percentage:.1f}%

‚è∞ <b>–û–±—ã—á–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</b>

<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω—ã.</i>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="admin_tokens")],
                [InlineKeyboardButton(text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
            logger.info("üì® Token topup request processed", 
                       user_id=self.owner_user_id,
                       current_usage=percentage)
            
        except Exception as e:
            logger.error("üí• Error processing token topup request", 
                        user_id=self.owner_user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
