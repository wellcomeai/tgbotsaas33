"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚úÖ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–¥–ø–∏—Å–∫–∏)
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞–º–∏
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ MessageLimitManager
‚úÖ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: AdminHandler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AIHandler –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ñ–ª–∏–∫—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ò –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–µ—Ä–µ–∑ access_control
‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –¢–æ–∫–µ–Ω—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è (–¥–∞–∂–µ –±–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–æ–≤)
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TokenManager –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
"""

import structlog
from datetime import datetime
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import Emoji
from ..keyboards import AdminKeyboards
from ..formatters import MessageFormatter
from ..states import ChannelStates, AISettingsStates

logger = structlog.get_logger()


def register_admin_handlers(dp: Dispatcher, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    funnel_manager = kwargs['funnel_manager']
    user_bot = kwargs.get('user_bot')
    access_control = kwargs.get('access_control')  # ‚úÖ –ù–û–í–û–ï
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        handler = AdminHandler(db, bot_config, funnel_manager, user_bot, access_control)  # ‚úÖ –ù–û–í–û–ï
        
        # ===== –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =====
        dp.message.register(handler.cmd_start, CommandStart())
        
        # ===== –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï CALLBACK =====
        dp.callback_query.register(handler.cb_admin_main, F.data == "admin_main")
        dp.callback_query.register(handler.cb_admin_settings, F.data == "admin_settings")
        dp.callback_query.register(handler.cb_admin_funnel, F.data == "admin_funnel")
        dp.callback_query.register(handler.cb_admin_stats, F.data == "admin_stats")
        dp.callback_query.register(handler.cb_admin_tokens, F.data == "admin_tokens")
        
        # ===== ‚úÖ –ù–û–í–û–ï: –ü–û–õ–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ò –ê–ì–ï–ù–¢–ê–ú–ò =====
        dp.callback_query.register(handler.cb_admin_ai, F.data == "admin_ai")
        dp.callback_query.register(handler.cb_ai_management, F.data == "ai_management")
        dp.callback_query.register(handler.cb_create_openai_agent, F.data == "create_openai_agent")
        dp.callback_query.register(handler.cb_configure_openai_agent, F.data == "configure_openai_agent")
        dp.callback_query.register(handler.cb_test_openai_agent, F.data == "test_openai_agent")
        dp.callback_query.register(handler.cb_delete_openai_agent, F.data == "delete_openai_agent")
        dp.callback_query.register(handler.cb_confirm_delete_agent, F.data == "openai_confirm_delete")
        dp.callback_query.register(handler.cb_edit_agent_name, F.data == "openai_edit_name")
        dp.callback_query.register(handler.cb_edit_agent_prompt, F.data == "openai_edit_prompt")
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π callback_data –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        dp.callback_query.register(handler.cb_admin_ai_exit_conversation, F.data == "admin_ai_exit_conversation")
        
        # ===== ‚úÖ –ù–û–í–û–ï: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–ò–ú–ò–¢–û–í –°–û–û–ë–©–ï–ù–ò–ô =====
        dp.callback_query.register(handler.cb_ai_message_limit, F.data == "ai_message_limit")
        dp.callback_query.register(handler.cb_ai_set_message_limit, F.data == "ai_set_message_limit")
        dp.callback_query.register(handler.cb_ai_disable_message_limit, F.data == "ai_disable_message_limit")
        
        # ===== ‚úÖ –ù–û–í–û–ï: FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ò =====
        dp.message.register(
            handler.handle_openai_name_input,
            AISettingsStates.admin_waiting_for_openai_name
        )
        dp.message.register(
            handler.handle_openai_role_input,
            AISettingsStates.admin_waiting_for_openai_role
        )
        dp.message.register(
            handler.handle_agent_name_edit,
            AISettingsStates.admin_editing_agent_name
        )
        dp.message.register(
            handler.handle_agent_prompt_edit,
            AISettingsStates.admin_editing_agent_prompt
        )
        dp.message.register(
            handler.handle_admin_ai_conversation,
            AISettingsStates.admin_in_ai_conversation
        )
        
        # ===== ‚úÖ –ù–û–í–û–ï: FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–í–û–î–ê –õ–ò–ú–ò–¢–ê =====
        dp.message.register(
            handler.handle_message_limit_input,
            AISettingsStates.waiting_for_message_limit
        )
        
        # ===== –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò =====
        dp.callback_query.register(handler.cb_subscription_settings, F.data == "admin_subscription")
        dp.callback_query.register(handler.cb_toggle_subscription, F.data == "toggle_subscription")
        dp.callback_query.register(handler.cb_set_subscription_channel, F.data == "set_subscription_channel")
        dp.callback_query.register(handler.cb_edit_subscription_message, F.data == "edit_subscription_message")
        
        # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        dp.message.register(
            handler.handle_forwarded_channel, 
            ChannelStates.waiting_for_subscription_channel
        )
        
        # Debug handler
        dp.message.register(handler.debug_owner_message, F.text == "test")
        
        logger.info("‚úÖ Admin handlers registered successfully with AI integration, message limits, access control and TokenManager integration", 
                   bot_id=bot_config['bot_id'], 
                   owner_id=bot_config['owner_user_id'],
                   ai_handlers_count=9,
                   message_limit_handlers=4,
                   total_handlers=23,
                   access_control_enabled=bool(access_control),
                   token_manager_direct=True)
        
    except Exception as e:
        logger.error("üí• Failed to register admin handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class AdminHandler:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò –∏ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, db, bot_config: dict, funnel_manager, user_bot, access_control=None):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.funnel_manager = funnel_manager
        self.formatter = MessageFormatter()
        self.user_bot = user_bot
        self.access_control = access_control  # ‚úÖ –ù–û–í–û–ï
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.stats = bot_config.get('stats', {})
        
        # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI helper
        self._ai_handler = None
        
        # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageLimitManager
        self._message_limit_manager = None
    
    async def _get_ai_handler(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI handler"""
        if self._ai_handler is None:
            try:
                from .ai_handlers import AIHandler
                self._ai_handler = AIHandler(
                    db=self.db,
                    bot_config=self.bot_config,
                    user_bot=self.user_bot
                )
                logger.debug("‚úÖ AI handler initialized", bot_id=self.bot_id)
            except Exception as e:
                logger.error("üí• Failed to initialize AI handler", error=str(e))
                return None
        return self._ai_handler
    
    async def _get_message_limit_manager(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageLimitManager"""
        if self._message_limit_manager is None:
            try:
                from .ai_message_limits import MessageLimitManager
                self._message_limit_manager = MessageLimitManager(
                    db=self.db,
                    bot_config=self.bot_config
                )
                logger.debug("‚úÖ MessageLimitManager initialized", bot_id=self.bot_id)
            except Exception as e:
                logger.error("üí• Failed to initialize MessageLimitManager", error=str(e))
                return None
        return self._message_limit_manager
    
    async def _create_openai_handler(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenAIHandler"""
        try:
            from .ai_openai_handler import OpenAIHandler
            
            openai_handler = OpenAIHandler(
                db=self.db,
                bot_config=self.bot_config,
                ai_assistant=None,
                user_bot=self.user_bot
            )
            
            logger.debug("‚úÖ OpenAIHandler created for admin", bot_id=self.bot_id)
            return openai_handler
            
        except Exception as e:
            logger.error("üí• Failed to create OpenAIHandler", error=str(e))
            return None
    
    async def _safe_edit_message(self, callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML", disable_web_page_preview=False):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π disable_web_page_preview"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.text:
                await callback.message.edit_text(
                    text=text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            elif callback.message.caption is not None:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                await callback.message.edit_caption(
                    caption=text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
        except Exception as e:
            logger.warning(f"Failed to edit message safely, using fallback: {e}")
            try:
                # Fallback: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as fallback_error:
                logger.error(f"Fallback message edit also failed: {fallback_error}")
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
    
    async def _get_fresh_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        try:
            fresh_config = await self.db.get_bot_full_config(self.bot_id, fresh=True)
            
            if fresh_config:
                logger.debug("‚úÖ Fresh config loaded", 
                           bot_id=self.bot_id,
                           subscription_enabled=fresh_config.get('subscription_check_enabled', False))
                return fresh_config
            else:
                logger.warning("‚ùå Failed to load fresh config, using cached", bot_id=self.bot_id)
                return self.bot_config
                
        except Exception as e:
            logger.error("‚ùå Error loading fresh config", bot_id=self.bot_id, error=str(e))
            return self.bot_config
    
    async def _get_fresh_ai_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        try:
            ai_config = await self.db.get_ai_config(self.bot_id)
            return ai_config or {}
        except Exception as e:
            logger.error("üí• Failed to get fresh AI config", error=str(e))
            return {}
    
    def _format_number(self, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (22 500)"""
        return f"{number:,}".replace(",", " ")
    
    def _format_percentage(self, used: int, limit: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if limit <= 0:
            return "0%"
        percentage = (used / limit) * 100
        return f"{percentage:.1f}%"
    
    async def _get_token_stats(self) -> dict:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI —á–µ—Ä–µ–∑ TokenManager (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenManager –Ω–∞–ø—Ä—è–º—É—é
            from database.managers.token_manager import TokenManager
            token_balance = await TokenManager.get_user_token_balance(self.owner_user_id)
            
            logger.debug("üí∞ Token balance retrieved via TokenManager", 
                        user_id=self.owner_user_id,
                        total_used=token_balance.get('total_used', 0),
                        limit=token_balance.get('limit', 0),
                        bots_count=token_balance.get('bots_count', 0))
            
            return {
                'has_openai_bots': token_balance.get('bots_count', 0) > 0,
                'total_used': token_balance.get('total_used', 0),
                'input_tokens': token_balance.get('input_tokens', 0),
                'output_tokens': token_balance.get('output_tokens', 0),
                'limit': token_balance.get('limit', 500000),
                'remaining': token_balance.get('remaining', 500000),
                'percentage_used': token_balance.get('percentage_used', 0.0),
                'bots_count': token_balance.get('bots_count', 0),
                'last_usage_at': token_balance.get('last_usage_at')
            }
            
        except Exception as e:
            logger.error("üí• Failed to get token stats via TokenManager", 
                        user_id=self.owner_user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            
            return {
                'has_openai_bots': False,
                'total_used': 0,
                'input_tokens': 0,
                'output_tokens': 0,
                'limit': 500000,
                'remaining': 500000,
                'percentage_used': 0.0,
                'bots_count': 0,
                'last_usage_at': None
            }
    
    async def _get_subscription_enabled(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)"""
        try:
            config = await self._get_fresh_config()
            enabled = config.get('subscription_check_enabled', False)
            
            logger.debug("üîç Subscription status checked", 
                        bot_id=self.bot_id,
                        enabled=enabled)
            
            return enabled
            
        except Exception as e:
            logger.error("‚ùå Failed to get subscription status", bot_id=self.bot_id, error=str(e))
            return False

    async def _get_subscription_enabled_fresh(self) -> bool:
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            enabled, _ = await self.db.get_subscription_status_no_cache(self.bot_id)
            
            logger.debug("üî• AGGRESSIVE subscription status checked", 
                        bot_id=self.bot_id,
                        enabled=enabled)
            return enabled
            
        except Exception as e:
            logger.error("‚ùå Failed to get aggressive subscription status", bot_id=self.bot_id, error=str(e))
            return False
    
    async def _get_subscription_channel_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)"""
        try:
            config = await self._get_fresh_config()
            
            return {
                'channel_id': config.get('subscription_channel_id'),
                'channel_username': config.get('subscription_channel_username'),
                'deny_message': config.get('subscription_deny_message', '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.')
            }
            
        except Exception as e:
            logger.error("‚ùå Failed to get channel info", bot_id=self.bot_id, error=str(e))
            return {
                'channel_id': None,
                'channel_username': None,
                'deny_message': '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.'
            }

    async def _get_subscription_channel_info_fresh(self) -> dict:
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            _, channel_info = await self.db.get_subscription_status_no_cache(self.bot_id)
            
            logger.debug("üî• AGGRESSIVE channel info retrieved", 
                        bot_id=self.bot_id,
                        has_channel=bool(channel_info.get('channel_id')))
            return channel_info
            
        except Exception as e:
            logger.error("‚ùå Failed to get aggressive channel info", bot_id=self.bot_id, error=str(e))
            return {
                'channel_id': None,
                'channel_username': None,
                'deny_message': '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.'
            }
    
    async def _get_content_agent_info(self) -> tuple[str, bool]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–µ"""
        has_content_agent = False
        content_agent_status = "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω"
        
        try:
            agent_info = await self.db.get_content_agent(self.bot_id)
            
            if agent_info and not agent_info.get('deleted_at'):
                has_content_agent = True
                agent_name = agent_info.get('agent_name', '–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç')
                
                if agent_info.get('openai_agent_id'):
                    content_agent_status = f"‚úÖ {agent_name}"
                else:
                    content_agent_status = f"‚ö†Ô∏è {agent_name} (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
                    
                logger.debug("üìù Content agent found", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           has_openai_id=bool(agent_info.get('openai_agent_id')))
            else:
                logger.debug("üìù No content agent found", bot_id=self.bot_id)
                
        except Exception as e:
            logger.warning("üìù Failed to check content agent", 
                         bot_id=self.bot_id,
                         error=str(e))
            content_agent_status = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        
        return content_agent_status, has_content_agent
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        is_owner = user_id == self.owner_user_id
        logger.debug("Owner check", 
                    bot_id=self.bot_id,
                    user_id=user_id, 
                    owner_user_id=self.owner_user_id, 
                    is_owner=is_owner)
        return is_owner
    
    def _has_ai_agent(self, config: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        has_agent = bool(config.get('ai_assistant_id'))
        logger.debug("AI agent check", 
                    bot_id=self.bot_id,
                    has_agent=has_agent,
                    ai_assistant_id_exists=bool(config.get('ai_assistant_id')))
        return has_agent
    
    def _get_ai_agent_info(self, config: dict) -> tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –ò–ò –∞–≥–µ–Ω—Ç–µ"""
        if not self._has_ai_agent(config):
            return "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω", "none"
        
        ai_settings = config.get('ai_assistant_settings', {})
        agent_type = ai_settings.get('agent_type', 'unknown')
        
        if agent_type == 'chatforyou':
            platform = ai_settings.get('detected_platform', 'unknown')
            if platform == 'chatforyou':
                bot_id_configured = bool(ai_settings.get('chatforyou_bot_id'))
                if bot_id_configured:
                    return "‚úÖ ChatForYou –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "chatforyou"
                else:
                    return "‚ö†Ô∏è ChatForYou (–Ω–µ–ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)", "chatforyou_partial"
            elif platform == 'protalk':
                return "‚úÖ ProTalk –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "protalk"
            else:
                return "‚ö†Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", "unknown_platform"
        
        elif agent_type == 'openai':
            agent_name = ai_settings.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
            creation_method = ai_settings.get('creation_method', 'unknown')
            
            if creation_method == 'real_openai_api':
                return f"‚úÖ {agent_name} (OpenAI)", "openai"
            elif creation_method == 'fallback_stub':
                return f"‚ö†Ô∏è {agent_name} (—Ç–µ—Å—Ç–æ–≤—ã–π)", "openai_stub"
            else:
                return f"‚úÖ {agent_name} (OpenAI)", "openai"
        
        else:
            return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø", "unknown"
    
    async def _get_ai_agent_info_fresh(self) -> tuple[str, str, dict]:
        """‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –°–í–ï–ñ–ï–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –ò–ò –∞–≥–µ–Ω—Ç–µ"""
        try:
            fresh_ai_config = await self._get_fresh_ai_config()
            
            if not fresh_ai_config or not fresh_ai_config.get('enabled') or not fresh_ai_config.get('agent_id'):
                return "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω", "none", {}
            
            agent_type = fresh_ai_config.get('type', 'unknown')
            agent_settings = fresh_ai_config.get('settings', {})
            
            if agent_type == 'openai':
                agent_name = agent_settings.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
                creation_method = agent_settings.get('creation_method', 'unknown')
                
                if creation_method == 'real_openai_api':
                    status = f"‚úÖ {agent_name} (OpenAI)"
                elif creation_method == 'fallback_stub':
                    status = f"‚ö†Ô∏è {agent_name} (—Ç–µ—Å—Ç–æ–≤—ã–π)"
                else:
                    status = f"‚úÖ {agent_name} (OpenAI)"
                
                return status, "openai", fresh_ai_config
            else:
                return f"‚ö†Ô∏è {agent_type}", agent_type, fresh_ai_config
                
        except Exception as e:
            logger.error("üí• Failed to get fresh AI agent info", error=str(e))
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "error", {}
    
    async def _get_admin_welcome_text(self) -> str:
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
        config = await self._get_fresh_config()
        
        total_sent = (self.stats.get('welcome_sent', 0) + 
                     self.stats.get('goodbye_sent', 0) + 
                     self.stats.get('confirmation_sent', 0))
        
        # ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        try:
            broadcast_stats = await self.db.get_mass_broadcast_stats(self.bot_id, days=30)
            broadcasts_sent = broadcast_stats.get('deliveries', {}).get('successful', 0)
        except Exception as e:
            logger.warning("Failed to get broadcast stats", bot_id=self.bot_id, error=str(e))
            broadcasts_sent = 0
        
        has_welcome = bool(config.get('welcome_message'))
        has_welcome_button = bool(config.get('welcome_button_text'))
        has_confirmation = bool(config.get('confirmation_message'))
        has_goodbye = bool(config.get('goodbye_message'))
        has_goodbye_button = bool(config.get('goodbye_button_text') and config.get('goodbye_button_url'))
        
        ai_status, ai_type = self._get_ai_agent_info(config)
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        token_stats = await self._get_token_stats()
        content_agent_status, has_content_agent = await self._get_content_agent_info()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FRESH –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        subscription_enabled = await self._get_subscription_enabled_fresh()
        subscription_status = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if subscription_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
        
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –í–°–ï–ì–î–ê (—É–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ)
        used_formatted = self._format_number(token_stats['total_used'])
        limit_formatted = self._format_number(token_stats['limit'])
        percentage = self._format_percentage(token_stats['total_used'], token_stats['limit'])
        
        if token_stats['percentage_used'] >= 90:
            token_emoji = "üî¥"
        elif token_stats['percentage_used'] >= 70:
            token_emoji = "üü°"
        else:
            token_emoji = "üí∞"
        
        token_section = f"\n{token_emoji} <b>–¢–æ–∫–µ–Ω—ã OpenAI:</b> {used_formatted} / {limit_formatted} ({percentage})"
            
        base_text = f"""
{Emoji.ROBOT} <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å @{self.bot_username or 'bot'}</b>

{Emoji.SUCCESS} <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω
{Emoji.MESSAGE} <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {total_sent}
{Emoji.BUTTON} <b>–ö–Ω–æ–ø–æ–∫ –Ω–∞–∂–∞—Ç–æ:</b> {self.stats.get('button_clicks', 0)}
{Emoji.FUNNEL} <b>–í–æ—Ä–æ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ:</b> {self.stats.get('funnel_starts', 0)}
üì® <b>–†–∞—Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {broadcasts_sent}{token_section}

{Emoji.INFO} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if has_welcome else '‚ùå'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {'‚úÖ' if has_welcome_button else '‚ùå'}
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if has_confirmation else '‚ùå'}
- –ü—Ä–æ—â–∞–Ω–∏–µ: {'‚úÖ' if has_goodbye else '‚ùå'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è: {'‚úÖ' if has_goodbye_button else '‚ùå'}

ü§ñ <b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {ai_status}
üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç:</b> {content_agent_status}
üîí <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}

üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>
- ü§ñ <a href="https://telegra.ph/Instrukciya-po-nastrojke-II-agenta-pri-rabote-s-AI-Admin-08-31">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞</a>
- üí¨ <a href="https://telegra.ph/Instrukciya-po-nastrojke-soobshchenij-dlya-gruppkanalov-08-31">–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤</a>
- üìù <a href="https://telegra.ph/Instrukciya-po-nastrojke-i-rabote-s-II-agentom-dlya-kontenta-kanala-08-31">–ò–ò –∞–≥–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</a>
- üì® <a href="https://telegra.ph/Instrukciya-po-rabote-s-massovymi-rassylkami-08-31">–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</a>
- ‚úÖ <a href="https://telegra.ph/Instrukciya-po-proverki-podpiski-polzovatelya-dlya-obshcheniya-s-II-agentom-08-31">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</a>

–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç <a href="https://t.me/cyberadminai_bot">@AI Admin</a> 

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
"""
        
        return base_text
    
    # ===== –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–º–∞–Ω–¥–∞ /start —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](message, status)
                return
        
        try:
            await state.clear()
            
            user_id = message.from_user.id
            
            if not self._is_owner(user_id):
                logger.debug("Non-owner user accessed /start", 
                            bot_id=self.bot_id, 
                            user_id=user_id,
                            username=message.from_user.username)
                
                await message.answer(
                    f"üëã –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞.\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            admin_text = await self._get_admin_welcome_text()
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            token_stats = await self._get_token_stats()
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            keyboard = AdminKeyboards.main_menu(has_openai_bots=True)
            
            await message.answer(
                admin_text,
                reply_markup=keyboard,
                disable_web_page_preview=True  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            )
            
            logger.info("‚úÖ Owner accessed admin panel", 
                       bot_id=self.bot_id, 
                       owner_user_id=user_id,
                       bot_username=self.bot_username,
                       has_openai_bots=token_stats['has_openai_bots'])
                       
        except Exception as e:
            logger.error("Error in cmd_start", bot_id=self.bot_id, error=str(e), exc_info=True)
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                reply_markup=ReplyKeyboardRemove()
            )
    
    async def cb_admin_main(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        await state.clear()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        admin_text = await self._get_admin_welcome_text()
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        token_stats = await self._get_token_stats()
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        keyboard = AdminKeyboards.main_menu(has_openai_bots=True)
        
        await self._safe_edit_message(
            callback,
            admin_text,
            reply_markup=keyboard,
            disable_web_page_preview=True  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        )
        
        logger.debug("‚úÖ Admin main menu refreshed", 
                    bot_id=self.bot_id,
                    has_openai_bots=token_stats['has_openai_bots'])
    
    async def cb_admin_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        config = await self._get_fresh_config()
        
        welcome_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('welcome_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        welcome_button_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('welcome_button_text') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        confirmation_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('confirmation_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        goodbye_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('goodbye_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        goodbye_button_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if (config.get('goodbye_button_text') and config.get('goodbye_button_url')) else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        text = f"""
{Emoji.SETTINGS} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ @{self.bot_username or 'bot'}</b>

{Emoji.INFO} <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>
   –°–æ–æ–±—â–µ–Ω–∏–µ: {welcome_status}
   –ö–Ω–æ–ø–∫–∞: {welcome_button_status}
   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {confirmation_status}

{Emoji.INFO} <b>–ü—Ä–æ—â–∞–Ω–∏–µ:</b>
   –°–æ–æ–±—â–µ–Ω–∏–µ: {goodbye_status}
   –ö–Ω–æ–ø–∫–∞: {goodbye_button_status}

{Emoji.ROCKET} <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞
2. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∑–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏ 
3. –í—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí –ü—Ä–æ—â–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.settings_menu()
        )
        
        logger.debug("‚úÖ Admin settings displayed", 
                   bot_id=self.bot_id,
                   welcome_configured=bool(config.get('welcome_message')),
                   welcome_button_configured=bool(config.get('welcome_button_text')))
    
    async def cb_admin_funnel(self, callback: CallbackQuery):
        """–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        from .funnel_handlers import show_funnel_main_menu
        await show_funnel_main_menu(callback, self.bot_id, self.bot_username, self.funnel_manager)
    
    # ===== ‚úÖ –ù–û–í–û–ï: –ü–û–õ–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ò –ê–ì–ï–ù–¢–ê–ú–ò =====
    
    async def cb_admin_ai(self, callback: CallbackQuery):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–æ–º —Å –ª–∏–º–∏—Ç–∞–º–∏"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        token_stats = await self._get_token_stats()
        
        text = f"""
ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ê–≥–µ–Ω—Ç–æ–º</b>

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {ai_status}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞
        keyboard_buttons = []
        
        if ai_type == "none":
            # –ê–≥–µ–Ω—Ç–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            text += """
- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ OpenAI –∞–≥–µ–Ω—Ç–∞
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞

<b>–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ò–ò –∞–≥–µ–Ω—Ç–∞?</b>"""
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å OpenAI –∞–≥–µ–Ω—Ç–∞", callback_data="create_openai_agent")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ]
        else:
            # ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
            try:
                current_limit = await self.db.get_daily_message_limit(self.bot_id)
                limit_info = ""
                if current_limit > 0:
                    limit_info = f"\n<b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {current_limit} –≤ –¥–µ–Ω—å"
            except:
                limit_info = ""
            
            # –ê–≥–µ–Ω—Ç –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            agent_settings = ai_config.get('settings', {})
            agent_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            
            text += f"""
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
- –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞

<b>–ê–≥–µ–Ω—Ç:</b> {agent_name}{limit_info}"""
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
            if ai_type == "openai":
                used_formatted = self._format_number(token_stats['total_used'])
                limit_formatted = self._format_number(token_stats['limit'])
                percentage = self._format_percentage(token_stats['total_used'], token_stats['limit'])
                text += f"\n<b>–¢–æ–∫–µ–Ω—ã:</b> {used_formatted} / {limit_formatted} ({percentage})"
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="test_openai_agent")],
                [InlineKeyboardButton(text="üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="openai_upload_files")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="configure_openai_agent")],
                [InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="ai_message_limit")],  # ‚úÖ –ù–û–í–û–ï
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="delete_openai_agent")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)
        
        logger.info("‚úÖ AI management menu displayed", 
                   bot_id=self.bot_id,
                   ai_type=ai_type,
                   ai_status=ai_status)
    
    async def cb_ai_management(self, callback: CallbackQuery):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        await self.cb_admin_ai(callback)
    
    async def cb_create_openai_agent(self, callback: CallbackQuery, state: FSMContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç–∞ –µ—â–µ –Ω–µ—Ç
            ai_config = await self._get_fresh_ai_config()
            if ai_config and ai_config.get('enabled'):
                await callback.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä–æ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.", show_alert=True)
                return
            
            await state.set_state(AISettingsStates.admin_waiting_for_openai_name)
            
            text = """
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 1 –∏–∑ 2:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞

<b>–ü—Ä–∏–º–µ—Ä—ã –∏–º–µ–Ω:</b>
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
- –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ SEO
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫
- –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_ai")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ OpenAI agent creation started", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error starting OpenAI agent creation", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    async def cb_configure_openai_agent(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
            
            if ai_type == "none":
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ò–ò –∞–≥–µ–Ω—Ç–∞", show_alert=True)
                return
            
            agent_settings = ai_config.get('settings', {})
            agent_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            agent_prompt = agent_settings.get('system_prompt', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            daily_limit = agent_settings.get('daily_limit', '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            prompt_preview = agent_prompt[:100] + "..." if len(agent_prompt) > 100 else agent_prompt
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>

<b>–ò–º—è:</b> {agent_name}
<b>–†–æ–ª—å:</b> {prompt_preview}
<b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {daily_limit if daily_limit != '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' else '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>
"""
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="openai_edit_name")],
                [InlineKeyboardButton(text="üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="openai_edit_prompt")],
                [InlineKeyboardButton(text="üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–º–∏—Ç—ã", callback_data="openai_set_limits")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ò–ò", callback_data="admin_ai")]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ AI agent configuration menu displayed", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error showing AI configuration", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    async def cb_test_openai_agent(self, callback: CallbackQuery, state: FSMContext):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
            
            if ai_type == "none":
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ò–ò –∞–≥–µ–Ω—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
            if ai_type == "openai":
                token_stats = await self._get_token_stats()
                if token_stats['remaining'] <= 0:
                    await callback.answer("‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã OpenAI", show_alert=True)
                    return
            
            await state.set_state(AISettingsStates.admin_in_ai_conversation)
            await state.update_data(
                agent_type=ai_type,
                agent_id=ai_config.get('agent_id'),
                is_admin_test=True
            )
            
            agent_settings = ai_config.get('settings', {})
            agent_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            
            text = f"""
üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent_name}</b>

–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞. 

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ó–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∞–≥–µ–Ω—Ç—É
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:</b>

<i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /exit, /stop</i>
"""
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º admin-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π callback_data
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_ai_exit_conversation")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ AI agent testing started", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error starting AI testing", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    
    async def cb_delete_openai_agent(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
            
            if ai_type == "none":
                await callback.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            agent_settings = ai_config.get('settings', {})
            agent_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            
            text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞?</b>

<b>–ê–≥–µ–Ω—Ç:</b> {agent_name}
<b>–¢–∏–ø:</b> {ai_type.upper()}

<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b>
- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ç–µ—Ä—è—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ò–ò
- –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ

<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="openai_confirm_delete")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_ai")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ AI agent deletion confirmation displayed", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error showing deletion confirmation", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)
    
    async def cb_confirm_delete_agent(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ OpenAI handler"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_confirm_delete(callback, is_owner_check)
            
            logger.info("‚úÖ AI agent deletion delegated to OpenAI handler", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error in agent deletion", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    async def cb_edit_agent_name(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
            
            if ai_type == "none":
                await callback.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            agent_settings = ai_config.get('settings', {})
            current_name = agent_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
            
            await state.set_state(AISettingsStates.admin_editing_agent_name)
            
            text = f"""
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {current_name}

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞:</b>

<b>–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã:</b>
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
- –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ SEO  
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞

<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:</i>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="configure_openai_agent")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ Agent name editing started", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error starting name editing", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    
    async def cb_edit_agent_prompt(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            ai_status, ai_type, ai_config = await self._get_ai_agent_info_fresh()
            
            if ai_type == "none":
                await callback.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            agent_settings = ai_config.get('settings', {})
            current_prompt = agent_settings.get('system_prompt', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            
            await state.set_state(AISettingsStates.admin_editing_agent_prompt)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
            prompt_preview = current_prompt[:300] + "..." if len(current_prompt) > 300 else current_prompt
            
            text = f"""
üé≠ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b>
<code>{prompt_preview}</code>

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:</b>

<b>–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:</b>
- –ß–µ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞
- –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å
- –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:</i>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="configure_openai_agent")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ Agent prompt editing started", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error starting prompt editing", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    
    async def cb_admin_ai_exit_conversation(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤ admin_ai"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            await state.clear()
            
            text = """
üö™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

–î–∏–∞–ª–æ–≥ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º –∑–∞–∫–æ–Ω—á–µ–Ω.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
- –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ - –æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª—å
- –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

<b>–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ò–ò</b>
"""
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ò–ò
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò", callback_data="admin_ai")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ AI testing conversation ended", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error ending AI conversation", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞", show_alert=True)
    
    # ===== ‚úÖ –ù–û–í–û–ï: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–ò–ú–ò–¢–û–í –°–û–û–ë–©–ï–ù–ò–ô =====
    
    async def cb_ai_message_limit(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            limit_manager = await self._get_message_limit_manager()
            if not limit_manager:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", show_alert=True)
                return
            
            await limit_manager.handle_message_limit_settings(callback)
            
        except Exception as e:
            logger.error("üí• Error in message limit settings", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    async def cb_ai_set_message_limit(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            limit_manager = await self._get_message_limit_manager()
            if not limit_manager:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", show_alert=True)
                return
            
            await limit_manager.handle_set_message_limit(callback, state)
            
        except Exception as e:
            logger.error("üí• Error setting message limit", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞", show_alert=True)
    
    async def cb_ai_disable_message_limit(self, callback: CallbackQuery):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            limit_manager = await self._get_message_limit_manager()
            if not limit_manager:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", show_alert=True)
                return
            
            await limit_manager.handle_disable_message_limit(callback)
            
        except Exception as e:
            logger.error("üí• Error disabling message limit", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞", show_alert=True)
    
    async def handle_message_limit_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            limit_manager = await self._get_message_limit_manager()
            if not limit_manager:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await limit_manager.handle_message_limit_input(message, state, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error handling message limit input", error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # ===== ‚úÖ –ù–û–í–û–ï: FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ò =====
    
    async def handle_openai_name_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_name_input(message, state, is_owner_check)
            
            logger.info("‚úÖ OpenAI name input handled", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error handling name input", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏")
    
    async def handle_openai_role_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_role_input(message, state, is_owner_check)
            
            logger.info("‚úÖ OpenAI role input handled", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error handling role input", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏")
    
    async def handle_agent_name_edit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_name_edit_input(message, state, is_owner_check)
            
            logger.info("‚úÖ Agent name edit handled", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error handling name edit", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏")
    
    async def handle_agent_prompt_edit(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            openai_handler = await self._create_openai_handler()
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                return
            
            is_owner_check = lambda user_id: self._is_owner(user_id)
            await openai_handler.handle_prompt_edit_input(message, state, is_owner_check)
            
            logger.info("‚úÖ Agent prompt edit handled", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error handling prompt edit", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞")
    
    async def handle_admin_ai_conversation(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
            if message.text in ['/exit', '/stop', '/cancel']:
                await state.clear()
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò", callback_data="admin_ai")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
                ])
                
                await message.answer("üö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=keyboard)
                return
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ AI handler
            ai_handler = await self._get_ai_handler()
            if not ai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò")
                return
            
            await ai_handler.handle_admin_ai_conversation(message, state)
            
            logger.info("‚úÖ Admin AI conversation handled", bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error in admin AI conversation", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò")
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –¢–û–ö–ï–ù–´ =====
    
    async def cb_admin_stats(self, callback: CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await self._show_bot_stats(callback)
    
    async def cb_admin_tokens(self, callback: CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI"""
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if self.access_control:
            has_access, status = await self.access_control['check_owner_access']()
            if not has_access:
                await self.access_control['send_access_denied'](callback, status)
                return
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await self._show_token_stats(callback)
    
    # ===== –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò =====
    
    async def cb_subscription_settings(self, callback: CallbackQuery):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å fresh data"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # ‚úÖ –°–¢–ê–¢–ò–ß–ù–´–ô –¢–ï–ö–°–¢ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        text = """
üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º–µ—Ç "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò"
- –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
- –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>
"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FRESH –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        keyboard = await self._get_subscription_keyboard(force_fresh=True)
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)
        
        logger.debug("‚úÖ Subscription settings displayed with fresh data", bot_id=self.bot_id)
    
    async def _get_subscription_keyboard(self, force_fresh: bool = False):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏–µ–π fresh data"""
        
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if force_fresh:
            enabled = await self._get_subscription_enabled_fresh()
            channel_info = await self._get_subscription_channel_info_fresh()
        else:
            enabled = await self._get_subscription_enabled()
            channel_info = await self._get_subscription_channel_info()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        if enabled:
            toggle_button = InlineKeyboardButton(
                text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", 
                callback_data="toggle_subscription"
            )
        else:
            toggle_button = InlineKeyboardButton(
                text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", 
                callback_data="toggle_subscription"
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ (—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        if channel_info['channel_id']:
            channel_button_text = "üì∫ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ"
        else:
            channel_button_text = "üì∫ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª"
        
        channel_button = InlineKeyboardButton(
            text=channel_button_text,
            callback_data="set_subscription_channel"
        )
        
        keyboard_buttons = [
            [toggle_button],
            [channel_button],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_subscription_message")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def cb_toggle_subscription(self, callback: CallbackQuery):
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            current_enabled = await self._get_subscription_enabled_fresh()
            new_enabled = not current_enabled
            
            logger.info("üîÑ AGGRESSIVE toggle subscription", 
                       bot_id=self.bot_id,
                       current_enabled=current_enabled,
                       new_enabled=new_enabled)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            result = await self.db.update_subscription_settings(
                self.bot_id,
                enabled=new_enabled
            )
            
            if isinstance(result, dict) and not result.get('success', True):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
                return
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            verification_success = await self.db.verify_update_success(self.bot_id, new_enabled)
            
            if not verification_success:
                logger.error("üí• Update verification FAILED", 
                            bot_id=self.bot_id,
                            expected=new_enabled)
                await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await callback.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {status}")
            
            logger.info("‚úÖ AGGRESSIVE subscription toggle SUCCESS", 
                       bot_id=self.bot_id,
                       enabled=new_enabled,
                       verified=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try:
                new_keyboard = await self._get_subscription_keyboard(force_fresh=True)
                await callback.message.edit_reply_markup(reply_markup=new_keyboard)
                
            except Exception as update_error:
                error_message = str(update_error).lower()
                
                if "message is not modified" in error_message:
                    # Fallback: –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    from datetime import datetime
                    update_time = datetime.now().strftime("%H:%M:%S")
                    
                    status_indicator = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if new_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
                    
                    text = f"""
üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º–µ—Ç "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò"
- –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
- –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_indicator} ‚úÖ

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}</i>
"""
                    
                    await self._safe_edit_message(callback, text, reply_markup=new_keyboard)
                else:
                    raise update_error
            
        except Exception as e:
            logger.error("‚ùå AGGRESSIVE toggle subscription FAILED", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    async def cb_set_subscription_channel(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(ChannelStates.waiting_for_subscription_channel)
        
        text = """
üì∫ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

<b>–°–ø–æ—Å–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>

<b>1Ô∏è‚É£ –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞:</b>
- –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
- –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

<b>2Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞:</b>
- –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ (–ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞)
- –ò–õ–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é

<b>üîç –ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:</b>
- –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
- –ù–∞–ø–∏—à–∏—Ç–µ /id –≤ —á–∞—Ç–µ
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞)

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
- –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
- –î–ª—è –∫–∞–Ω–∞–ª–æ–≤: –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º
- –î–ª—è –≥—Ä—É–ø–ø: –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

<i>–û–∂–∏–¥–∞—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ ID...</i>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_subscription")]
        ])
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)
        
        logger.info("‚úÖ Waiting for forwarded channel/group message", 
                   bot_id=self.bot_id,
                   user_id=callback.from_user.id)
    
    async def handle_forwarded_channel(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã + —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ID"""
        try:
            user_id = message.from_user.id
            
            if not self._is_owner(user_id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                await state.clear()
                return
            
            # ‚úÖ –°–ü–û–°–û–ë 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º forward_from_chat (–ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã)
            if message.forward_from_chat:
                await self._handle_public_chat_forward(message, state)
                return
            
            # ‚úÖ –°–ü–û–°–û–ë 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.forward_date or message.forward_sender_name or message.forward_signature:
                await self._handle_private_chat_forward(message, state)
                return
            
            # ‚úÖ –°–ü–û–°–û–ë 3: –†—É—á–Ω–æ–π –≤–≤–æ–¥ ID (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å)
            if message.text and (message.text.startswith('-') or message.text.isdigit()):
                await self._handle_manual_chat_id_input(message, state)
                return
            
            # ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            await message.answer("""
‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç!</b>

<b>–°–ø–æ—Å–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>

<b>1Ô∏è‚É£ –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞:</b>
–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã

<b>2Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é

<b>üîç –ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:</b>
- –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
- –ù–∞–ø–∏—à–∏—Ç–µ /id –≤ —á–∞—Ç–µ
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞)
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID —Å—é–¥–∞

<b>–ü—Ä–∏–º–µ—Ä—ã:</b> 
- –ö–∞–Ω–∞–ª: -1001234567890
- –ì—Ä—É–ø–ø–∞: -1001234567890
""")
            
        except Exception as e:
            logger.error("‚ùå Failed to handle forwarded channel", 
                        bot_id=self.bot_id,
                        error=str(e),
                        exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            await state.clear()
    
    async def _handle_public_chat_forward(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
        try:
            chat = message.forward_from_chat
            
            if chat.type not in ["channel", "group", "supergroup"]:
                await message.answer(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {chat.type}")
                return
            
            await self._save_chat_config(chat.id, chat.title, chat.username, chat.type, state, message)
            
        except Exception as e:
            logger.error("‚ùå Failed to handle public chat forward", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")

    async def _handle_private_chat_forward(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (forward_from_chat —Å–∫—Ä—ã—Ç)"""
        await message.answer("""
‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞</b>

Telegram —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é:</b>
- –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
- –ù–∞–ø–∏—à–∏—Ç–µ /id –≤ —á–∞—Ç–µ  
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—é–¥–∞

<i>–û–∂–∏–¥–∞—é ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã...</i>
""")

    async def _handle_manual_chat_id_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
        try:
            chat_id = int(message.text)
            
            if chat_id > 0:
                await message.answer("‚ùå ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º (–Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –º–∏–Ω—É—Å–∞)")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            try:
                chat_info = await message.bot.get_chat(chat_id)
                
                if chat_info.type not in ["channel", "group", "supergroup"]:
                    await message.answer(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞: {chat_info.type}")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                bot_member = await message.bot.get_chat_member(chat_id, message.bot.id)
                if bot_member.status not in ["administrator", "creator"]:
                    chat_type = "–∫–∞–Ω–∞–ª–∞" if chat_info.type == "channel" else "–≥—Ä—É–ø–ø—ã"
                    await message.answer(f"""
‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {chat_type}!</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ {chat_type.replace('–∞', '—É')}
2. –î–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
""")
                    return
                
                await self._save_chat_config(
                    chat_info.id, 
                    chat_info.title, 
                    chat_info.username,
                    chat_info.type, 
                    state,
                    message
                )
                
            except Exception as e:
                error_msg = str(e).lower()
                if "chat not found" in error_msg:
                    await message.answer("‚ùå –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
                elif "not enough rights" in error_msg:
                    await message.answer("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
                
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: -1001234567890")

    async def _save_chat_config(self, chat_id: int, chat_title: str, chat_username: str, chat_type: str, state: FSMContext, message: Message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            result = await self.db.update_subscription_settings(
                self.bot_id,
                channel_id=chat_id,
                channel_username=chat_username
            )
            
            if isinstance(result, dict) and not result.get('success', True):
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                await state.clear()
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            chat_type_names = {
                "channel": "–∫–∞–Ω–∞–ª",
                "group": "–≥—Ä—É–ø–ø–∞", 
                "supergroup": "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
            }
            chat_type_display = chat_type_names.get(chat_type, chat_type)
            
            success_text = f"""
‚úÖ <b>{chat_type_display.capitalize()} –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}
<b>–¢–∏–ø:</b> {chat_type_display}
<b>ID:</b> <code>{chat_id}</code>
{f'<b>Username:</b> @{chat_username}' if chat_username else '<b>Username:</b> –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç'}

<b>–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç {chat_type_display} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò.</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="toggle_subscription")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_subscription")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("‚úÖ Subscription chat configured successfully", 
                       bot_id=self.bot_id,
                       chat_id=chat_id,
                       chat_title=chat_title,
                       chat_type=chat_type,
                       chat_username=chat_username)
                       
        except Exception as e:
            logger.error("‚ùå Failed to save chat config", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            await state.clear()
    
    async def cb_edit_subscription_message(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üöß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    # ===== –ú–ï–¢–û–î–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
    
    async def _show_bot_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            stats = await self.db.get_bot_statistics(self.bot_id)
            
            text = f"""
{Emoji.CHART} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{self.bot_username or 'bot'}</b>

{Emoji.ROBOT} <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
   –ê–∫—Ç–∏–≤–µ–Ω

{Emoji.USERS} <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
   –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: {stats.get('welcome_sent', 0)}
   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {stats.get('confirmation_sent', 0)}
   –ü—Ä–æ—â–∞–Ω–∏–π: {stats.get('goodbye_sent', 0)}
   
{Emoji.BUTTON} <b>–ö–Ω–æ–ø–∫–∏:</b>
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {stats.get('welcome_buttons_sent', 0)}
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö: {stats.get('goodbye_buttons_sent', 0)}
   –ù–∞–∂–∞—Ç–∏–π: {stats.get('button_clicks', 0)}
   
{Emoji.FUNNEL} <b>–í–æ—Ä–æ–Ω–∫–∏:</b>
   –ó–∞–ø—É—â–µ–Ω–æ: {stats.get('funnel_starts', 0)}
   
{Emoji.FIRE} <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
   –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {stats.get('join_requests_processed', 0)}
   –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {stats.get('admin_adds_processed', 0)}

{Emoji.INFO} <i>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="admin_stats"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="admin_main"
                    )
                ]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show bot stats", bot_id=self.bot_id, error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    async def _show_token_stats(self, callback: CallbackQuery):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ OpenAI (–í–°–ï–ì–î–ê)"""
        try:
            logger.info("üìä Loading token statistics", 
                       user_id=self.owner_user_id,
                       bot_id=self.bot_id)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            token_stats = await self._get_token_stats()
            
            logger.debug("üí∞ Token stats loaded", 
                        has_openai_bots=token_stats['has_openai_bots'],
                        total_used=token_stats['total_used'],
                        bots_count=token_stats['bots_count'])
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            used_formatted = self._format_number(token_stats['total_used'])
            limit_formatted = self._format_number(token_stats['limit'])
            remaining_formatted = self._format_number(token_stats['remaining'])
            input_formatted = self._format_number(token_stats['input_tokens'])
            output_formatted = self._format_number(token_stats['output_tokens'])
            percentage = self._format_percentage(token_stats['total_used'], token_stats['limit'])
            
            if token_stats['percentage_used'] >= 90:
                status_emoji = "üî¥"
                status_text = "–ö—Ä–∏—Ç–∏—á–Ω–æ! –ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"
            elif token_stats['percentage_used'] >= 70:
                status_emoji = "üü°"
                status_text = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            elif token_stats['percentage_used'] >= 50:
                status_emoji = "üü†"
                status_text = "–ü–æ–ª–æ–≤–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
            else:
                status_emoji = "üü¢"
                status_text = "–í –Ω–æ—Ä–º–µ"
            
            last_usage_text = "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å"
            if token_stats['last_usage_at']:
                try:
                    from datetime import datetime
                    if isinstance(token_stats['last_usage_at'], str):
                        last_usage = datetime.fromisoformat(token_stats['last_usage_at'].replace('Z', '+00:00'))
                    else:
                        last_usage = token_stats['last_usage_at']
                    last_usage_text = last_usage.strftime("%d.%m.%Y %H:%M")
                except:
                    last_usage_text = "–ù–µ–¥–∞–≤–Ω–æ"
            
            # ‚úÖ –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            agents_info = ""
            if not token_stats['has_openai_bots']:
                agents_info = f"\n\nüí° <b>–°–æ–≤–µ—Ç:</b>\n–°–æ–∑–¥–∞–π—Ç–µ –ò–ò –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ \"ü§ñ –ò–ò –ê–≥–µ–Ω—Ç\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"
            
            text = f"""
üí∞ <b>–¢–æ–∫–µ–Ω—ã OpenAI</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {used_formatted} / {limit_formatted} ({percentage})
   –û—Å—Ç–∞–ª–æ—Å—å: {remaining_formatted}

üìà <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
   –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {input_formatted}
   –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {output_formatted}
   
ü§ñ <b>OpenAI –±–æ—Ç–æ–≤:</b> {token_stats['bots_count']}
‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {last_usage_text}{agents_info}

{Emoji.INFO} <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã?</b>
- –¢–æ–∫–µ–Ω—ã - —ç—Ç–æ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è OpenAI API
- ~1 —Ç–æ–∫–µ–Ω ‚âà 0.75 —Å–ª–æ–≤–∞ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –í—Ö–æ–¥—è—â–∏–µ: –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ò–ò
- –ò—Å—Ö–æ–¥—è—â–∏–µ: –æ—Ç–≤–µ—Ç—ã –ò–ò –≤–∞–º

{Emoji.ROCKET} <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:</b>
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
"""
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tokens")],
                # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—É–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ)
                [InlineKeyboardButton(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="request_token_topup")],
                [InlineKeyboardButton(text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
            
            logger.info("‚úÖ Token statistics displayed successfully", 
                       user_id=self.owner_user_id,
                       total_used=token_stats['total_used'],
                       percentage_used=token_stats['percentage_used'])
            
        except Exception as e:
            logger.error("üí• Failed to show token stats", 
                        bot_id=self.bot_id,
                        user_id=self.owner_user_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤", show_alert=True)
    
    # ===== DEBUG –ú–ï–¢–û–î–´ =====
    
    async def debug_owner_message(self, message: Message):
        """Debug –º–µ—Ç–æ–¥"""
        user_id = message.from_user.id
        is_owner = self._is_owner(user_id)
        
        config = await self._get_fresh_config()
        ai_status, ai_type = self._get_ai_agent_info(config)
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: TokenManager –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        token_stats = await self._get_token_stats()
        content_agent_status, has_content_agent = await self._get_content_agent_info()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å fresh data
        subscription_enabled = await self._get_subscription_enabled_fresh()
        channel_info = await self._get_subscription_channel_info_fresh()
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
        try:
            broadcast_stats = await self.db.get_mass_broadcast_stats(self.bot_id, days=30)
            broadcasts_sent = broadcast_stats.get('deliveries', {}).get('successful', 0)
        except:
            broadcasts_sent = 0
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            current_limit = await self.db.get_daily_message_limit(self.bot_id)
        except:
            current_limit = 0
        
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S.%f")
        
        await message.answer(
            f"üîç <b>Debug Info ({current_time}):</b>\n"
            f"User ID: {user_id}\n"
            f"Owner ID: {self.owner_user_id}\n"
            f"Is Owner: {is_owner}\n"
            f"Bot ID: {self.bot_id}\n"
            f"Bot Username: {self.bot_username}\n\n"
            f"üîÑ <b>Fresh Config Check:</b>\n"
            f"Welcome Message: {'‚úÖ' if config.get('welcome_message') else '‚ùå'}\n"
            f"Welcome Button: {'‚úÖ' if config.get('welcome_button_text') else '‚ùå'}\n"
            f"Confirmation: {'‚úÖ' if config.get('confirmation_message') else '‚ùå'}\n"
            f"AI Agent: {ai_status}\n"
            f"AI Type: {ai_type}\n\n"
            f"üí∞ <b>Token Stats:</b>\n"
            f"Has OpenAI Bots: {token_stats['has_openai_bots']}\n"
            f"Tokens Used: {self._format_number(token_stats['total_used'])}\n"
            f"Tokens Limit: {self._format_number(token_stats['limit'])}\n"
            f"Usage %: {self._format_percentage(token_stats['total_used'], token_stats['limit'])}\n"
            f"Bots Count: {token_stats['bots_count']}\n\n"
            f"üìù <b>Content Agent:</b>\n"
            f"Status: {content_agent_status}\n"
            f"Has Agent: {has_content_agent}\n\n"
            f"üîí <b>Subscription Settings (FRESH):</b>\n"
            f"Enabled: {subscription_enabled} ({'üü¢' if subscription_enabled else 'üî¥'})\n"
            f"Channel ID: {channel_info['channel_id']}\n"
            f"Channel Username: {channel_info['channel_username']}\n"
            f"Has Channel: {bool(channel_info['channel_id'])}\n\n"
            f"üì® <b>Broadcast Stats:</b>\n"
            f"Broadcasts Sent: {broadcasts_sent}\n\n"
            f"üìä <b>Message Limits:</b>\n"
            f"Daily Limit: {current_limit} ({'‚úÖ Enabled' if current_limit > 0 else '‚ùå Disabled'})\n\n"
            f"ü§ñ <b>AI Handler Status:</b>\n"
            f"AI Handler Initialized: {self._ai_handler is not None}\n"
            f"Message Limit Manager Initialized: {self._message_limit_manager is not None}\n"
            f"Access Control Enabled: {self.access_control is not None}"
        )


# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====

async def show_mass_broadcast_main_menu(callback: CallbackQuery, bot_id: str, bot_username: str, db):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ 
    (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_mass_broadcast_stats(bot_id, days=30)
        
        text = f"""
üì® <b>–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ @{bot_username}</b>
      <b>–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–æ—Ç–∞.</b>
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:</b>
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats.get('total_broadcasts', 0)}
   –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö: {stats.get('by_type', {}).get('instant', 0)}
   
üìà <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
   –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats.get('deliveries', {}).get('successful', 0)}
   –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {stats.get('deliveries', {}).get('failed', 0)}
   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('deliveries', {}).get('success_rate', 0)}%

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:
"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±—Ä–∞–Ω disable_web_page_preview)
        try:
            if callback.message.text:
                await callback.message.edit_text(
                    text=text, 
                    reply_markup=AdminKeyboards.mass_broadcast_main_menu(),
                    parse_mode="HTML"
                )
            elif callback.message.caption is not None:
                await callback.message.edit_caption(
                    caption=text, 
                    reply_markup=AdminKeyboards.mass_broadcast_main_menu(),
                    parse_mode="HTML"
                )
            else:
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=AdminKeyboards.mass_broadcast_main_menu(),
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.warning(f"Failed to edit message safely, using fallback: {e}")
            try:
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=AdminKeyboards.mass_broadcast_main_menu(),
                    parse_mode="HTML"
                )
            except Exception as fallback_error:
                logger.error(f"Fallback message edit also failed: {fallback_error}")
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=AdminKeyboards.mass_broadcast_main_menu(),
                    parse_mode="HTML"
                )
        
        logger.info("‚úÖ Mass broadcast menu displayed successfully", bot_id=bot_id)
        
    except Exception as e:
        logger.error("üí• Failed to show mass broadcast menu", 
                    bot_id=bot_id, error=str(e), exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", show_alert=True)
