"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Telegram entities (html_text)
"""

import structlog
from datetime import datetime, timezone, timedelta
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import Emoji, settings
from ..states import MassBroadcastStates
from ..keyboards import AdminKeyboards
from ..formatters import MediaExtractor
from services.mass_broadcast_service import MassBroadcastService

logger = structlog.get_logger()


def register_mass_broadcast_handlers(dp: Dispatcher, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    user_bot = kwargs.get('user_bot')
    
    try:
        handler = MassBroadcastHandler(db, bot_config, user_bot)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(handler.cb_mass_broadcast_main, F.data == "mass_broadcast_main")
        dp.callback_query.register(handler.cb_mass_broadcast_action, F.data.startswith("mass_broadcast_"))
        
        # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.message.register(handler.handle_instant_text, MassBroadcastStates.instant_waiting_for_text)
        dp.message.register(handler.handle_instant_media, 
                          F.photo | F.video | F.document | F.audio | F.voice | F.video_note,
                          MassBroadcastStates.instant_waiting_for_media)
        dp.message.register(handler.handle_instant_button_text, MassBroadcastStates.instant_waiting_for_button_text)
        dp.message.register(handler.handle_instant_button_url, MassBroadcastStates.instant_waiting_for_button_url)
        
        dp.message.register(handler.handle_scheduled_text, MassBroadcastStates.scheduled_waiting_for_text)
        dp.message.register(handler.handle_scheduled_media,
                          F.photo | F.video | F.document | F.audio | F.voice | F.video_note,
                          MassBroadcastStates.scheduled_waiting_for_media)
        dp.message.register(handler.handle_scheduled_button_text, MassBroadcastStates.scheduled_waiting_for_button_text)
        dp.message.register(handler.handle_scheduled_button_url, MassBroadcastStates.scheduled_waiting_for_button_url)
        dp.message.register(handler.handle_scheduled_datetime, MassBroadcastStates.scheduled_waiting_for_datetime)
        
        logger.info("Mass broadcast handlers registered successfully with entities support", 
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("Failed to register mass broadcast handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class MassBroadcastHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    def __init__(self, db, bot_config: dict, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.user_bot = user_bot
        self.media_extractor = MediaExtractor()
        self.service = MassBroadcastService(db)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
        self.temp_broadcasts = {}
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        return user_id == self.owner_user_id
    
    def _get_temp_broadcast(self, user_id: int, broadcast_type: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        key = f"{user_id}_{broadcast_type}"
        if key not in self.temp_broadcasts:
            self.temp_broadcasts[key] = {
                'message_text': None,
                'media_info': None,
                'button_info': None
            }
        return self.temp_broadcasts[key]
    
    def _clear_temp_broadcast(self, user_id: int, broadcast_type: str):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        key = f"{user_id}_{broadcast_type}"
        if key in self.temp_broadcasts:
            del self.temp_broadcasts[key]
    
    async def _safe_edit_message(self, callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.text:
                await callback.message.edit_text(
                    text=text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
            elif callback.message.caption is not None:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                await callback.message.edit_caption(
                    caption=text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.warning(f"Failed to edit message safely, using fallback: {e}")
            try:
                # Fallback: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.delete()
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            except Exception as fallback_error:
                logger.error(f"Fallback message edit also failed: {fallback_error}")
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
    
    async def cb_mass_broadcast_main(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        await callback.answer()
        await state.clear()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_mass_broadcast_stats(self.bot_id, days=30)
        
        text = f"""
üì® <b>–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ @{self.bot_username}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:</b>
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats.get('total_broadcasts', 0)}
   –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö: {stats.get('by_type', {}).get('instant', 0)}
   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('by_type', {}).get('scheduled', 0)}
   
üìà <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
   –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats.get('deliveries', {}).get('successful', 0)}
   –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {stats.get('deliveries', {}).get('failed', 0)}
   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('deliveries', {}).get('success_rate', 0)}%

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.mass_broadcast_main_menu()
        )
    
    async def cb_mass_broadcast_action(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data.replace("mass_broadcast_", "")
        parts = action.split("_")
        
        if parts[0] == "instant":
            await self._handle_instant_broadcast_action(callback, state, parts[1:])
        elif parts[0] == "scheduled":
            await self._handle_scheduled_broadcast_action(callback, state, parts[1:])
        elif action == "list_scheduled":
            await self._show_scheduled_broadcasts(callback)
        elif action == "stats":
            await self._show_broadcast_stats(callback)
        elif action.startswith("send_instant_"):
            broadcast_id = int(action.split("_")[-1])
            await self._send_instant_broadcast(callback, broadcast_id)
        elif action.startswith("confirm_send_"):
            broadcast_id = int(action.split("_")[-1])
            await self._confirm_send_broadcast(callback, broadcast_id)
        elif action.startswith("cancel_"):
            broadcast_id = int(action.split("_")[-1])
            await self._cancel_scheduled_broadcast(callback, broadcast_id)
    
    async def _handle_instant_broadcast_action(self, callback: CallbackQuery, state: FSMContext, parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not parts:
            await self._show_instant_creation_menu(callback, state)
            return
        
        action = parts[0]
        
        if action == "text":
            await self._request_instant_text(callback, state)
        elif action == "media":
            await self._request_instant_media(callback, state)
        elif action == "button":
            await self._request_instant_button(callback, state)
        elif action == "preview":
            await self._show_instant_preview(callback, state)
        elif action == "send":
            await self._prepare_instant_send(callback, state)
        elif action == "menu":
            await self._show_instant_creation_menu(callback, state)
    
    async def _handle_scheduled_broadcast_action(self, callback: CallbackQuery, state: FSMContext, parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not parts:
            await self._show_scheduled_creation_menu(callback, state)
            return
        
        action = parts[0]
        
        if action == "text":
            await self._request_scheduled_text(callback, state)
        elif action == "media":
            await self._request_scheduled_media(callback, state)
        elif action == "button":
            await self._request_scheduled_button(callback, state)
        elif action == "preview":
            await self._show_scheduled_preview(callback, state)
        elif action == "datetime":
            await self._request_scheduled_datetime(callback, state)
        elif action == "menu":
            await self._show_scheduled_creation_menu(callback, state)
    
    # ===== –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê =====
    
    async def _show_instant_creation_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "instant")
        
        text = f"""
üöÄ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏:

üìù <b>–¢–µ–∫—Å—Ç:</b> {'‚úÖ –ì–æ—Ç–æ–≤' if temp_data['message_text'] else '‚ùå –ù–µ –∑–∞–¥–∞–Ω'}
üìé <b>–ú–µ–¥–∏–∞:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if temp_data['media_info'] else '‚ö™ –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}
üîò <b>–ö–Ω–æ–ø–∫–∞:</b> {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if temp_data['button_info'] else '‚ö™ –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'}

{Emoji.INFO} <b>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞.</b>
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.mass_broadcast_creation_menu(
                "instant",
                has_text=bool(temp_data['message_text']),
                has_media=bool(temp_data['media_info']),
                has_button=bool(temp_data['button_info'])
            )
        )
    
    async def _request_instant_text(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        await state.set_state(MassBroadcastStates.instant_waiting_for_text)
        
        text = f"""
üìù <b>–¢–µ–∫—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –±–æ—Ç–∞.

{Emoji.INFO} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
- <code>{{first_name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>üí° –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ Telegram –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- <b>–ñ–∏—Ä–Ω—ã–π</b> (Ctrl+B / ‚åò+B)
- <i>–ö—É—Ä—Å–∏–≤</i> (Ctrl+I / ‚åò+I)
- <code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>
- <s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>

{Emoji.WARNING} <b>–õ–∏–º–∏—Ç—ã:</b>
- –ú–∞–∫—Å–∏–º—É–º {settings.max_funnel_message_length} —Å–∏–º–≤–æ–ª–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_instant_menu")]
        ])
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)
    
    async def handle_instant_text(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if len(message.text) > settings.max_funnel_message_length:
            await message.answer(
                f"{Emoji.WARNING} –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! "
                f"–ú–∞–∫—Å–∏–º—É–º {settings.max_funnel_message_length} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatted_text = message.html_text if message.html_text else message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        temp_data = self._get_temp_broadcast(message.from_user.id, "instant")
        temp_data['message_text'] = formatted_text
        
        await message.answer(
            f"‚úÖ <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º):</b>\n{formatted_text[:100]}{'...' if len(formatted_text) > 100 else ''}\n\n"
            f"üí° <i>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_instant_menu")]
            ])
        )
        
        logger.info("Instant broadcast text saved with formatting",
                   bot_id=self.bot_id,
                   has_html=bool(message.html_text))
        
        await state.clear()
    
    async def _request_instant_media(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ–¥–∏–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "instant")
        
        if temp_data['media_info']:
            # –£–∂–µ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            text = f"""
üìé <b>–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:</b>
–¢–∏–ø: {temp_data['media_info']['media_type']}
–§–∞–π–ª: {temp_data['media_info'].get('filename', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ–≥–æ.
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=AdminKeyboards.mass_broadcast_media_setup_menu("instant")
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞
            await state.set_state(MassBroadcastStates.instant_waiting_for_media)
            
            text = """
üìé <b>–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
üì∏ –§–æ—Ç–æ
üé• –í–∏–¥–µ–æ
üìé –î–æ–∫—É–º–µ–Ω—Ç—ã
üéµ –ê—É–¥–∏–æ
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚≠ï –í–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_instant_menu")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
    
    async def handle_instant_media(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        media_info = await self.media_extractor.extract_media_info(message)
        if not media_info:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
        temp_data = self._get_temp_broadcast(message.from_user.id, "instant")
        temp_data['media_info'] = media_info
        
        file_size_mb = (media_info.get('file_size', 0) / 1024 / 1024) if media_info.get('file_size') else 0
        
        await message.answer(
            f"‚úÖ <b>–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"<b>–¢–∏–ø:</b> {media_info['media_type']}\n"
            f"<b>–†–∞–∑–º–µ—Ä:</b> {file_size_mb:.2f} –ú–ë\n"
            f"<b>–§–∞–π–ª:</b> {media_info.get('filename', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_instant_menu")]
            ])
        )
        
        await state.clear()

    async def _request_instant_button(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "instant")
        
        if temp_data['button_info']:
            # –£–∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            button_info = temp_data['button_info']
            text = f"""
üîò <b>–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞:</b>
–¢–µ–∫—Å—Ç: {button_info.get('text', '–ù–µ –∑–∞–¥–∞–Ω')}
URL: {button_info.get('url', '–ù–µ –∑–∞–¥–∞–Ω')}

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ—ë.
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=AdminKeyboards.mass_broadcast_button_setup_menu("instant")
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            await state.set_state(MassBroadcastStates.instant_waiting_for_button_text)
            
            text = """
üîò <b>Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
- "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"
- "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_instant_menu")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)

    async def handle_instant_button_text(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        if len(message.text) > 64:  # –õ–∏–º–∏—Ç Telegram –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            await message.answer(
                f"{Emoji.WARNING} –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! "
                f"–ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL
        temp_data = self._get_temp_broadcast(message.from_user.id, "instant")
        if not temp_data['button_info']:
            temp_data['button_info'] = {}
        temp_data['button_info']['text'] = message.text
        
        await state.set_state(MassBroadcastStates.instant_waiting_for_button_url)
        
        text = f"""
üîó <b>URL –¥–ª—è –∫–Ω–æ–ø–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∞ "{message.text}".

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
- –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://
- –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_instant_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def handle_instant_button_url(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if not (url.startswith('http://') or url.startswith('https://')):
            await message.answer(
                f"{Emoji.WARNING} URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            )
            return
        
        if len(url) > 1024:
            await message.answer(
                f"{Emoji.WARNING} URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        temp_data = self._get_temp_broadcast(message.from_user.id, "instant")
        temp_data['button_info']['url'] = url
        
        button_text = temp_data['button_info']['text']
        
        await message.answer(
            f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {url}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_instant_menu")]
            ])
        )
        
        await state.clear()
    
    async def _show_instant_preview(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "instant")
        
        if not temp_data['message_text']:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ draft
        broadcast = await self.service.create_instant_broadcast(
            bot_id=self.bot_id,
            admin_user_id=callback.from_user.id,
            message_text=temp_data['message_text'],
            media_info=temp_data['media_info'],
            button_info=temp_data['button_info']
        )
        
        if not broadcast:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = await self.service.format_broadcast_for_preview(broadcast.id)
        
        text = f"""
üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
<b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

--- <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ---
{preview['text']}
--- <b>–ö–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è</b> ---
"""
        
        keyboard = AdminKeyboards.mass_broadcast_preview_menu("instant", broadcast.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if preview['has_media'] and preview['media_file_id']:
            try:
                if preview['media_type'] == 'photo':
                    await callback.message.delete()
                    await callback.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=preview['media_file_id'],
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞...
                else:
                    await self._safe_edit_message(callback, text, reply_markup=keyboard)
            except:
                await self._safe_edit_message(callback, text, reply_markup=keyboard)
        else:
            await self._safe_edit_message(callback, text, reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._clear_temp_broadcast(callback.from_user.id, "instant")
    
    async def _send_instant_broadcast(self, callback: CallbackQuery, broadcast_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        broadcast = await self.db.get_mass_broadcast_by_id(broadcast_id)
        if not broadcast:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        text = f"""
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º?

<b>–¢–µ–∫—Å—Ç:</b> {broadcast.get_preview_text(100)}
<b>–ú–µ–¥–∏–∞:</b> {'–î–∞' if broadcast.has_media() else '–ù–µ—Ç'}
<b>–ö–Ω–æ–ø–∫–∞:</b> {'–î–∞' if broadcast.has_button() else '–ù–µ—Ç'}

{Emoji.WARNING} <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.mass_broadcast_confirm_send(broadcast_id)
        )
    
    async def _confirm_send_broadcast(self, callback: CallbackQuery, broadcast_id: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏"""
        success = await self.service.send_instant_broadcast(broadcast_id)
        
        if success:
            await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.", show_alert=True)
            
            text = """
üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ —Ä–∞–∑–¥–µ–ª–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫".
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mass_broadcast_stats")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
                ])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
    
    async def _prepare_instant_send(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "instant")
        
        if not temp_data['message_text']:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        await self._show_instant_preview(callback, state)
    
    # ===== –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –†–ê–°–°–´–õ–ö–ò =====

    async def _show_scheduled_creation_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "scheduled")
        
        text = f"""
‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏:

üìù <b>–¢–µ–∫—Å—Ç:</b> {'‚úÖ –ì–æ—Ç–æ–≤' if temp_data['message_text'] else '‚ùå –ù–µ –∑–∞–¥–∞–Ω'}
üìé <b>–ú–µ–¥–∏–∞:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if temp_data['media_info'] else '‚ö™ –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}
üîò <b>–ö–Ω–æ–ø–∫–∞:</b> {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if temp_data['button_info'] else '‚ö™ –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'}

{Emoji.INFO} <b>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.</b>
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.mass_broadcast_creation_menu(
                "scheduled",
                has_text=bool(temp_data['message_text']),
                has_media=bool(temp_data['media_info']),
                has_button=bool(temp_data['button_info'])
            )
        )

    async def _request_scheduled_text(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        await state.set_state(MassBroadcastStates.scheduled_waiting_for_text)
        
        text = f"""
üìù <b>–¢–µ–∫—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

{Emoji.INFO} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
- <code>{{first_name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>üí° –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ Telegram –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- <b>–ñ–∏—Ä–Ω—ã–π</b> (Ctrl+B / ‚åò+B)
- <i>–ö—É—Ä—Å–∏–≤</i> (Ctrl+I / ‚åò+I)
- <code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>
- <s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>

{Emoji.WARNING} <b>–õ–∏–º–∏—Ç—ã:</b>
- –ú–∞–∫—Å–∏–º—É–º {settings.max_funnel_message_length} —Å–∏–º–≤–æ–ª–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_scheduled_menu")]
        ])
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)

    async def handle_scheduled_text(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self._is_owner(message.from_user.id):
            return
        
        if len(message.text) > settings.max_funnel_message_length:
            await message.answer(
                f"{Emoji.WARNING} –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! "
                f"–ú–∞–∫—Å–∏–º—É–º {settings.max_funnel_message_length} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatted_text = message.html_text if message.html_text else message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        temp_data = self._get_temp_broadcast(message.from_user.id, "scheduled")
        temp_data['message_text'] = formatted_text
        
        await message.answer(
            f"‚úÖ <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º):</b>\n{formatted_text[:100]}{'...' if len(formatted_text) > 100 else ''}\n\n"
            f"üí° <i>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_scheduled_menu")]
            ])
        )
        
        logger.info("Scheduled broadcast text saved with formatting",
                   bot_id=self.bot_id,
                   has_html=bool(message.html_text))
        
        await state.clear()

    async def _request_scheduled_media(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "scheduled")
        
        if temp_data['media_info']:
            # –£–∂–µ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            text = f"""
üìé <b>–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞:</b>
–¢–∏–ø: {temp_data['media_info']['media_type']}
–§–∞–π–ª: {temp_data['media_info'].get('filename', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ–≥–æ.
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=AdminKeyboards.mass_broadcast_media_setup_menu("scheduled")
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞
            await state.set_state(MassBroadcastStates.scheduled_waiting_for_media)
            
            text = """
üìé <b>–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
üì∏ –§–æ—Ç–æ
üé• –í–∏–¥–µ–æ
üìé –î–æ–∫—É–º–µ–Ω—Ç—ã
üéµ –ê—É–¥–∏–æ
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚≠ï –í–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_scheduled_menu")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)

    async def handle_scheduled_media(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        media_info = await self.media_extractor.extract_media_info(message)
        if not media_info:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
        temp_data = self._get_temp_broadcast(message.from_user.id, "scheduled")
        temp_data['media_info'] = media_info
        
        file_size_mb = (media_info.get('file_size', 0) / 1024 / 1024) if media_info.get('file_size') else 0
        
        await message.answer(
            f"‚úÖ <b>–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"<b>–¢–∏–ø:</b> {media_info['media_type']}\n"
            f"<b>–†–∞–∑–º–µ—Ä:</b> {file_size_mb:.2f} –ú–ë\n"
            f"<b>–§–∞–π–ª:</b> {media_info.get('filename', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_scheduled_menu")]
            ])
        )
        
        await state.clear()

    async def _request_scheduled_button(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "scheduled")
        
        if temp_data['button_info']:
            # –£–∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            button_info = temp_data['button_info']
            text = f"""
üîò <b>–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞:</b>
–¢–µ–∫—Å—Ç: {button_info.get('text', '–ù–µ –∑–∞–¥–∞–Ω')}
URL: {button_info.get('url', '–ù–µ –∑–∞–¥–∞–Ω')}

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ—ë.
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=AdminKeyboards.mass_broadcast_button_setup_menu("scheduled")
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            await state.set_state(MassBroadcastStates.scheduled_waiting_for_button_text)
            
            text = """
üîò <b>Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
- "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"  
- "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_scheduled_menu")]
            ])
            
            await self._safe_edit_message(callback, text, reply_markup=keyboard)

    async def handle_scheduled_button_text(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        if len(message.text) > 64:  # –õ–∏–º–∏—Ç Telegram –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            await message.answer(
                f"{Emoji.WARNING} –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! "
                f"–ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL
        temp_data = self._get_temp_broadcast(message.from_user.id, "scheduled")
        if not temp_data['button_info']:
            temp_data['button_info'] = {}
        temp_data['button_info']['text'] = message.text
        
        await state.set_state(MassBroadcastStates.scheduled_waiting_for_button_url)
        
        text = f"""
üîó <b>URL –¥–ª—è –∫–Ω–æ–ø–∫–∏</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∞ "{message.text}".

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
- –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://
- –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_scheduled_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def handle_scheduled_button_url(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if not (url.startswith('http://') or url.startswith('https://')):
            await message.answer(
                f"{Emoji.WARNING} URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            )
            return
        
        if len(url) > 1024:
            await message.answer(
                f"{Emoji.WARNING} URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        temp_data = self._get_temp_broadcast(message.from_user.id, "scheduled")
        temp_data['button_info']['url'] = url
        
        button_text = temp_data['button_info']['text']
        
        await message.answer(
            f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {url}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="mass_broadcast_scheduled_menu")]
            ])
        )
        
        await state.clear()

    async def _request_scheduled_datetime(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "scheduled")
        
        if not temp_data['message_text']:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        await state.set_state(MassBroadcastStates.scheduled_waiting_for_datetime)
        
        text = """
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- <code>25.12.2025 15:30</code>
- <code>01.01.2026 00:00</code>

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
- –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
- –ú–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mass_broadcast_scheduled_menu")]
        ])
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)

    async def handle_scheduled_datetime(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self._is_owner(message.from_user.id):
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            dt_str = message.text.strip()
            scheduled_dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
            
            # –î–æ–±–∞–≤–ª—è–µ–º timezone (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC)
            scheduled_dt = scheduled_dt.replace(tzinfo=timezone.utc)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            now = datetime.now(timezone.utc)
            if scheduled_dt <= now + timedelta(minutes=5):
                await message.answer(
                    f"{Emoji.WARNING} –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î
            temp_data = self._get_temp_broadcast(message.from_user.id, "scheduled")
            
            broadcast = await self.service.create_scheduled_broadcast(
                bot_id=self.bot_id,
                admin_user_id=message.from_user.id,
                message_text=temp_data['message_text'],
                media_info=temp_data['media_info'],
                button_info=temp_data['button_info'],
                scheduled_at=scheduled_dt
            )
            
            if broadcast:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self._clear_temp_broadcast(message.from_user.id, "scheduled")
                
                formatted_time = scheduled_dt.strftime("%d.%m.%Y –≤ %H:%M")
                
                await message.answer(
                    f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"<b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {formatted_time} UTC\n"
                    f"<b>–¢–µ–∫—Å—Ç:</b> {temp_data['message_text'][:100]}{'...' if len(temp_data['message_text']) > 100 else ''}\n\n"
                    f"–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="mass_broadcast_list_scheduled")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
                    ])
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
            
        except ValueError:
            await message.answer(
                f"{Emoji.WARNING} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2025 15:30</code>"
            )
            return
        except Exception as e:
            logger.error("Error processing scheduled datetime", error=str(e), exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        await state.clear()

    async def _show_scheduled_preview(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        temp_data = self._get_temp_broadcast(callback.from_user.id, "scheduled")
        
        if not temp_data['message_text']:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        preview_text = f"""
üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
<b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

--- <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ---
{temp_data['message_text']}
--- <b>–ö–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è</b> ---

<b>–ú–µ–¥–∏–∞:</b> {'–î–∞' if temp_data['media_info'] else '–ù–µ—Ç'}
<b>–ö–Ω–æ–ø–∫–∞:</b> {'–î–∞' if temp_data['button_info'] else '–ù–µ—Ç'}
"""
        
        if temp_data['button_info']:
            preview_text += f"\n<b>–ö–Ω–æ–ø–∫–∞:</b> {temp_data['button_info']['text']} ‚Üí {temp_data['button_info']['url']}"
        
        keyboard = AdminKeyboards.mass_broadcast_preview_menu("scheduled")
        
        await self._safe_edit_message(callback, preview_text, reply_markup=keyboard)
    
    # ===== –°–ü–ò–°–û–ö –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –†–ê–°–°–´–õ–û–ö =====
    
    async def _show_scheduled_broadcasts(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        broadcasts = await self.db.get_pending_scheduled_mass_broadcasts(self.bot_id)
        
        if not broadcasts:
            text = """
üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚ùå <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</b>

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è∞ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="mass_broadcast_scheduled")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mass_broadcast_main")]
            ])
            
        else:
            text = f"""
üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ ({len(broadcasts)})</b>

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
"""
            keyboard = AdminKeyboards.mass_broadcast_scheduled_list(broadcasts)
        
        await self._safe_edit_message(callback, text, reply_markup=keyboard)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    
    async def _show_broadcast_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        stats = await self.db.get_mass_broadcast_stats(self.bot_id)
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞ 30 –¥–Ω–µ–π</b>

üì® <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
   –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats.get('total_broadcasts', 0)}
   –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö: {stats.get('by_status', {}).get('instant', 0)}
   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('by_status', {}).get('scheduled', 0)}

üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.get('by_status', {}).get('completed', 0)}
   –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('by_status', {}).get('sending', 0)}
   –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {stats.get('by_status', {}).get('draft', 0)}

üéØ <b>–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
   –£—Å–ø–µ—à–Ω–æ: {stats.get('deliveries', {}).get('successful', 0)}
   –û—à–∏–±–æ–∫: {stats.get('deliveries', {}).get('failed', 0)}
   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('deliveries', {}).get('success_rate', 0)}%

{Emoji.INFO} <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>
"""
        
        await self._safe_edit_message(
            callback,
            text,
            reply_markup=AdminKeyboards.mass_broadcast_stats_menu()
        )

    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    async def _cancel_scheduled_broadcast(self, callback: CallbackQuery, broadcast_id: int):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        success = await self.service.cancel_scheduled_broadcast(broadcast_id, self.bot_id)
        
        if success:
            await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
            
            text = """
üóëÔ∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.
"""
            
            await self._safe_edit_message(
                callback,
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="mass_broadcast_list_scheduled")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
                ])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
