"""
–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤.

‚úÖ –û–ë–ù–û–í–õ–ï–ù–û –í –≠–¢–û–ô –í–ï–†–°–ò–ò:
1. üé§ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API
2. üîß –ò–°–ü–†–ê–í–õ–ï–ù–ê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _send_media_group_rewrite_result
3. üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
4. üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
5. üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
6. üîí –£—Å–∏–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
7. ‚ú® –ù–û–í–û–ï: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
8. üîó –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
9. üì∫ –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
10. ‚úèÔ∏è –ù–û–í–û–ï: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∫–∞–º–∏
11. üì§ –ù–û–í–û–ï: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã
12. üé§ –ù–û–í–û–ï: –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞
13. üèóÔ∏è –ù–û–í–û–ï: –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º–∏–∫—Å–∏–Ω–∞–º–∏
"""

import structlog
from typing import List
from aiogram import Dispatcher, F
from aiogram.types import Message

# ‚úÖ –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    logger = structlog.get_logger()
    logger.warning("‚ö†Ô∏è aiogram-media-group not installed. Media group functionality will be limited.")
    MEDIA_GROUP_AVAILABLE = False
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def media_group_handler(func):
        return func

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å fallback
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
    logger = structlog.get_logger()
    logger.info("‚úÖ ContentStates imported successfully")
except ImportError as e:
    logger = structlog.get_logger()
    logger.warning("‚ö†Ô∏è ContentStates not found, creating temporary states", error=str(e))
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False

# ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ ContentHandler
from .base_handler import ContentHandler


def register_content_handlers(dp: Dispatcher, **kwargs):
    """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø, –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    logger = structlog.get_logger()
    logger.info("üìù Registering content handlers with complete modular architecture", 
                media_group_support=MEDIA_GROUP_AVAILABLE,
                voice_messages_support=True,
                channel_integration=True,
                modular_architecture=True)
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    user_bot = kwargs.get('user_bot')
    
    logger.info("üìã Content handler registration parameters", 
               bot_id=bot_config.get('bot_id', 'unknown'),
               has_db=bool(db),
               has_user_bot=bool(user_bot),
               states_available=CONTENT_STATES_AVAILABLE,
               media_group_available=MEDIA_GROUP_AVAILABLE)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        handler = ContentHandler(db, bot_config, user_bot)
        
        logger.info("‚úÖ ContentHandler created with modular architecture", 
                   bot_id=handler.bot_id,
                   mixins_loaded=[
                       'AgentCreationMixin',
                       'AgentManagementMixin', 
                       'RewriteHandlersMixin',
                       'MediaHandlersMixin',
                       'VoiceHandlersMixin',
                       'ChannelHandlersMixin',
                       'ContentUtilsMixin'
                   ])
        
        # ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–ï–†–í–´–ï!
        
        # ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú —Å—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π)
        if MEDIA_GROUP_AVAILABLE and CONTENT_STATES_AVAILABLE:
            @dp.message(F.media_group_id, F.content_type.in_({'photo', 'video'}))
            @media_group_handler
            async def handle_media_group_rewrite(messages: List[Message], state):
                """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —á–µ—Ä–µ–∑ aiogram-media-group"""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—Ä–∞–π—Ç–∞
                from aiogram.fsm.context import FSMContext
                if isinstance(state, FSMContext):
                    current_state = await state.get_state()
                    if current_state != ContentStates.waiting_for_rewrite_post:
                        return
                
                logger.info("üì∏ Media group received for rewrite", 
                           user_id=messages[0].from_user.id,
                           media_count=len(messages),
                           media_group_id=messages[0].media_group_id,
                           bot_id=handler.bot_id)
                
                if not handler._is_owner(messages[0].from_user.id):
                    await messages[0].answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    return
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º —á–µ—Ä–µ–∑ –º–∏–∫—Å–∏–Ω
                    await handler.handle_media_group_rewrite_input(messages, state)
                    
                except Exception as e:
                    logger.error("üí• Failed to handle media group rewrite", 
                                media_group_id=messages[0].media_group_id,
                                bot_id=handler.bot_id,
                                error=str(e))
                    await messages[0].answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å–±–æ–º–∞")
            
            logger.info("‚úÖ Media group handler registered successfully")
        else:
            logger.warning("‚ö†Ô∏è Media group handler not registered - missing dependencies")
        
        # ===== CALLBACK QUERY –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
        
        # 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        dp.callback_query.register(handler.cb_content_main, F.data == "content_main")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª) - –º–µ—Ç–æ–¥—ã –∏–∑ AgentCreationMixin
        dp.callback_query.register(handler.cb_create_agent, F.data == "content_create_agent")
        dp.callback_query.register(handler.cb_confirm_create_agent, F.data == "content_confirm_create")
        
        # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º - –º–µ—Ç–æ–¥—ã –∏–∑ AgentManagementMixin
        dp.callback_query.register(handler.cb_manage_agent, F.data == "content_manage")
        dp.callback_query.register(handler.cb_agent_settings, F.data == "content_settings")
        
        # 4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ - –º–µ—Ç–æ–¥—ã –∏–∑ AgentManagementMixin
        dp.callback_query.register(handler.cb_edit_agent_name, F.data == "content_edit_name")
        dp.callback_query.register(handler.cb_edit_agent_instructions, F.data == "content_edit_instructions")
        dp.callback_query.register(handler.cb_confirm_instructions_update, F.data == "content_confirm_instructions_update")
        
        # 5. –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ - –º–µ—Ç–æ–¥—ã –∏–∑ AgentManagementMixin
        dp.callback_query.register(handler.cb_delete_agent, F.data == "content_delete_agent")
        dp.callback_query.register(handler.cb_confirm_delete_agent, F.data == "content_confirm_delete")
        
        # 6. –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤ - –º–µ—Ç–æ–¥—ã –∏–∑ RewriteHandlersMixin
        dp.callback_query.register(handler.cb_rewrite_post, F.data == "content_rewrite")
        dp.callback_query.register(handler.cb_exit_rewrite_mode, F.data == "content_exit_rewrite")
        
        # 7. –ö–∞–Ω–∞–ª—ã - –º–µ—Ç–æ–¥—ã –∏–∑ ChannelHandlersMixin
        dp.callback_query.register(handler.cb_edit_post, F.data == "content_edit_post")
        dp.callback_query.register(handler.cb_publish_post, F.data == "content_publish")
        
        callback_handlers_count = 14
        
        # ===== FSM MESSAGE –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
        
        fsm_handlers_registered = 0
        
        if CONTENT_STATES_AVAILABLE:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–∏–º–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤) - AgentCreationMixin + AgentManagementMixin
            dp.message.register(
                handler.handle_agent_name_input,
                ContentStates.waiting_for_agent_name,
                F.text
            )
            dp.message.register(
                handler.handle_edit_agent_name_input,
                ContentStates.editing_agent_name,
                F.text
            )
            dp.message.register(
                handler.handle_channel_post_input,
                ContentStates.waiting_for_channel_post
            )
            text_only_handlers = 3
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å) - AgentCreationMixin + AgentManagementMixin + VoiceHandlersMixin
            dp.message.register(
                handler.handle_agent_instructions_input,
                ContentStates.waiting_for_agent_instructions,
                F.text
            )
            dp.message.register(
                handler.handle_agent_instructions_input,
                ContentStates.waiting_for_agent_instructions,
                F.voice
            )
            dp.message.register(
                handler.handle_edit_agent_instructions_input,
                ContentStates.editing_agent_instructions,
                F.text
            )
            dp.message.register(
                handler.handle_edit_agent_instructions_input,
                ContentStates.editing_agent_instructions,
                F.voice
            )
            voice_text_handlers = 4
            
            # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤ (–í–°–ï –¢–ò–ü–´ –ö–û–ù–¢–ï–ù–¢–ê) - RewriteHandlersMixin
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.text
            )
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.voice
            )
            # üì∑ –§–û–¢–û (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.photo
            )
            # üé• –í–ò–î–ï–û (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)  
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.video
            )
            # üé¨ GIF/–ê–ù–ò–ú–ê–¶–ò–ò
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.animation
            )
            # üéµ –ê–£–î–ò–û
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.audio
            )
            # üìÑ –î–û–ö–£–ú–ï–ù–¢–´
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.document
            )
            # üé≠ –°–¢–ò–ö–ï–†–´
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post,
                F.sticker
            )
            media_handlers = 8
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫ –ø–æ—Å—Ç–æ–≤ (—Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å) - ChannelHandlersMixin + VoiceHandlersMixin
            dp.message.register(
                handler.handle_edit_instructions_input,
                ContentStates.waiting_for_edit_instructions,
                F.text
            )
            dp.message.register(
                handler.handle_edit_instructions_input,
                ContentStates.waiting_for_edit_instructions,
                F.voice
            )
            edit_handlers = 2
            
            fsm_handlers_registered = text_only_handlers + voice_text_handlers + media_handlers + edit_handlers
            
            logger.info("‚úÖ All FSM message handlers with modular architecture registered successfully")
        else:
            text_only_handlers = 0
            voice_text_handlers = 0
            media_handlers = 0
            edit_handlers = 0
            logger.warning("‚ö†Ô∏è FSM states unavailable, some functionality will be limited")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        media_group_handlers = 1 if MEDIA_GROUP_AVAILABLE and CONTENT_STATES_AVAILABLE else 0
        total_handlers = callback_handlers_count + fsm_handlers_registered + media_group_handlers
        
        logger.info("‚úÖ Content handlers registered successfully with COMPLETE MODULAR ARCHITECTURE", 
                   bot_id=bot_config['bot_id'],
                   callback_handlers=callback_handlers_count,
                   text_only_handlers=text_only_handlers,
                   voice_text_handlers=voice_text_handlers, 
                   media_handlers=media_handlers,
                   edit_handlers=edit_handlers,
                   media_group_handlers=media_group_handlers,
                   total_handlers=total_handlers,
                   voice_support_enabled=True,
                   supported_media_types=['photo', 'video', 'animation', 'audio', 'document', 'sticker'],
                   modular_architecture="‚úÖ All mixins integrated successfully",
                   mixins_used=[
                       'AgentCreationMixin',
                       'AgentManagementMixin', 
                       'RewriteHandlersMixin',
                       'MediaHandlersMixin',
                       'VoiceHandlersMixin',
                       'ChannelHandlersMixin',
                       'ContentUtilsMixin'
                   ])
        
    except Exception as e:
        logger.error("üí• Failed to register content handlers with modular architecture", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e),
                    error_type=type(e).__name__,
                    exc_info=True)
        raise
