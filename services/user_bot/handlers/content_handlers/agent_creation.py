"""
–ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üé§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API
2. üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
3. üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ edge cases
5. üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
6. ‚ú® –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
7. ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
"""

from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from services.content_agent import content_agent_service

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    MEDIA_GROUP_AVAILABLE = False


class AgentCreationMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    async def cb_create_agent(self, callback: CallbackQuery, state: FSMContext):
        """–ò–ó–ú–ï–ù–ï–ù–û: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ - —Å–Ω–∞—á–∞–ª–∞ –∫–∞–Ω–∞–ª"""
        self.logger.info("‚ú® Create agent button pressed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id,
                        callback_data=callback.data)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            self.logger.warning("üö´ Non-owner tried to create agent", 
                               user_id=callback.from_user.id,
                               bot_id=self.bot_id)
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç
            self.logger.debug("üîç Checking existing agent before creation", bot_id=self.bot_id)
            has_agent = await content_agent_service.has_content_agent(self.bot_id)
            
            if has_agent:
                self.logger.warning("‚ö†Ô∏è Agent already exists, creation blocked", bot_id=self.bot_id)
                await callback.answer("–ê–≥–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω", show_alert=True)
                return
            
            text = f"""
‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 1 –∏–∑ 3: –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã.

üìù <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:</b>
1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞–Ω–∞–ª
3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ.

<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(callback, text, keyboards['back_to_main'])
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_channel_post)
                self.logger.info("‚úÖ FSM state set for channel post input", bot_id=self.bot_id)
            else:
                self.logger.warning("‚ö†Ô∏è FSM states not available, using fallback", bot_id=self.bot_id)
            
            self.logger.info("‚úÖ Agent creation flow started successfully", 
                           bot_id=self.bot_id,
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent creation", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    async def handle_channel_post_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.logger.info("üì∫ Channel post input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            if not message.forward_from_chat:
                await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–µ—Å–ªa–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return
            
            if message.forward_from_chat.type != "channel":
                await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return
            
            channel_id = message.forward_from_chat.id
            channel_title = message.forward_from_chat.title
            channel_username = message.forward_from_chat.username
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_data = {
                'chat_id': channel_id,
                'chat_title': channel_title,
                'chat_username': channel_username,
                'chat_type': 'channel'
            }
            
            success = await content_agent_service.content_manager.save_channel_info(
                self.bot_id, channel_data
            )
            
            if not success:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∏–º—è –∞–≥–µ–Ω—Ç–∞
            text = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}
üÜî <b>ID:</b> <code>{channel_id}</code>
üë§ <b>Username:</b> @{channel_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

<b>–®–∞–≥ 2 –∏–∑ 3: –ò–º—è –∞–≥–µ–Ω—Ç–∞</b>

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞:

üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ {channel_title}"
- "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
- "SMM –ø–æ–º–æ—â–Ω–∏–∫"

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
            
            await message.answer(text)
            await state.set_state(ContentStates.waiting_for_agent_name)
            
            self.logger.info("‚úÖ Channel saved successfully", 
                           bot_id=self.bot_id,
                           channel_id=channel_id,
                           channel_title=channel_title)
            
        except Exception as e:
            self.logger.error("üí• Error processing channel post", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞")
    
    async def handle_agent_name_input(self, message: Message, state: FSMContext):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        self.logger.info("üìù Agent name input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        message_length=len(message.text or ""))
        
        if not self._is_owner(message.from_user.id):
            self.logger.warning("üö´ Non-owner tried to input agent name", 
                               user_id=message.from_user.id)
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            agent_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not agent_name:
                self.logger.debug("‚ùå Empty agent name provided", bot_id=self.bot_id)
                await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(agent_name) < 3:
                self.logger.debug("‚ùå Agent name too short", bot_id=self.bot_id, length=len(agent_name))
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(agent_name) > 100:
                self.logger.debug("‚ùå Agent name too long", bot_id=self.bot_id, length=len(agent_name))
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(agent_name=agent_name)
            
            text = f"""
‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 3 –∏–∑ 3: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞:</b> {agent_name}

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –ö–ê–ö –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã. –≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Ä–∞–π—Ç–æ–≤.

üé§ <b>–ù–û–í–û–ï: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ì–û–õ–û–°–û–ú!</b>

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>

<b>–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å:</b>
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Ç–µ–∫—Å—Ç—ã –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, —Ç–µ–ø–ª–æ–º —Ç–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é. –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –±–ª–∏–∑–∫–∏–º."

<b>–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å:</b>  
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ. –£–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ —ç–º–æ—Ü–∏–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –§–æ–∫—É—Å –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö."

<b>–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥:</b>
"–î–µ–ª–∞–π —Ç–µ–∫—Å—Ç—ã –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü—Ä–∏–≤–ª–µ–∫–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏."

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ üé§ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await message.answer(
                text,
                reply_markup=keyboards['back_to_main']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_agent_instructions)
            
            self.logger.info("‚úÖ Agent name validated and saved", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           name_length=len(agent_name))
            
        except Exception as e:
            self.logger.error("üí• Failed to process agent name input", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def handle_agent_instructions_input(self, message: Message, state: FSMContext):
        """üé§ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)"""
        self.logger.info("üìã Agent instructions input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        has_text=bool(message.text),
                        has_voice=bool(message.voice),
                        instructions_length=len(message.text or "") if message.text else 0)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            instructions = None
            
            # üé§ –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
            if message.voice:
                self.logger.info("üé§ Voice instructions received, transcribing...", 
                                user_id=message.from_user.id,
                                bot_id=self.bot_id)
                
                await message.bot.send_chat_action(message.chat.id, "typing")
                
                instructions = await self._transcribe_voice_message(message.voice)
                
                if not instructions:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                    return
                
                self.logger.info("‚úÖ Voice instructions transcribed successfully", 
                               user_id=message.from_user.id,
                               bot_id=self.bot_id,
                               transcribed_length=len(instructions))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
                await message.answer(f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n<i>{instructions[:200]}{'...' if len(instructions) > 200 else ''}</i>\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
                
            elif message.text:
                instructions = message.text.strip()
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if not instructions:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(instructions) < 10:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                return
            
            if len(instructions) > 4096:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            
            if not agent_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω–æ –∏–º—è –∞–≥–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            input_method = "üé§ –≥–æ–ª–æ—Å–æ–º" if message.voice else "üìù —Ç–µ–∫—Å—Ç–æ–º"
            
            text = f"""
‚ú® <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞:</b> {agent_name}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤–≤–µ–¥–µ–Ω—ã {input_method}):</b>
{instructions}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: OpenAI GPT-4o
‚Ä¢ –¢–∏–ø: Responses API  
‚Ä¢ –¢–æ–∫–µ–Ω—ã: –∏–∑ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞
‚Ä¢ –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ (file_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è

‚ö†Ô∏è <b>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º). OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.</b>

<b>–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?</b>
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                agent_name=agent_name,
                instructions=instructions,
                input_method=input_method
            )
            
            keyboards = await self._get_content_keyboards()
            
            await message.answer(
                text,
                reply_markup=keyboards['create_confirmation']
            )
            
            self.logger.info("‚úÖ Agent instructions validated and preview shown with voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           instructions_length=len(instructions),
                           input_method=input_method)
            
        except Exception as e:
            self.logger.error("üí• Failed to process agent instructions input with voice", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_confirm_create_agent(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚úÖ Agent creation confirmation received", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            instructions = data.get('instructions')
            input_method = data.get('input_method', 'üìù —Ç–µ–∫—Å—Ç–æ–º')
            
            if not agent_name or not instructions:
                await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
            await self._safe_edit_or_answer(
                callback,
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{agent_name}'...</b>\n\n"
                f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω—ã {input_method}\n"
                f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n"
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            self.logger.info("üé® Creating content agent via service", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           instructions_length=len(instructions),
                           input_method=input_method,
                           user_id=callback.from_user.id)
            
            result = await content_agent_service.create_content_agent(
                bot_id=self.bot_id,
                agent_name=agent_name,
                instructions=instructions,
                user_id=callback.from_user.id
            )
            
            keyboards = await self._get_content_keyboards()
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                agent_data = result.get('agent', {})
                
                text = f"""
‚úÖ <b>–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>–ò–º—è:</b> {agent_data.get('name', agent_name)}
üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω—ã:</b> {input_method}
ü§ñ <b>OpenAI ID:</b> {agent_data.get('openai_agent_id', '–ù–µ —É–∫–∞–∑–∞–Ω')[:20]}...
üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:</b> ID {agent_data.get('id', 'Unknown')}

üéØ <b>–ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>

üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –õ–Æ–ë–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º)
‚Ä¢ üì∑ –§–æ—Ç–æ, üé• –≤–∏–¥–µ–æ, üé¨ GIF, üéµ –∞—É–¥–∏–æ, üìÑ –¥–æ–∫—É–º–µ–Ω—Ç—ã, üé≠ —Å—Ç–∏–∫–µ—Ä—ã
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª—å–±–æ–º—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ {'‚úÖ' if MEDIA_GROUP_AVAILABLE else '‚ùå (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'}
‚Ä¢ üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å—Ç–∞—Ö (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ üé§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≥–µ–Ω—Ç–∞  
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üìé <b>–ú–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏:</b> –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ!

<b>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ä–∞–π—Ç—É –ø–æ—Å—Ç–æ–≤?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤", callback_data="content_rewrite")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await self._safe_edit_or_answer(callback, text, keyboard)
                
                self.logger.info("‚úÖ Content agent created successfully with voice support", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               agent_id=agent_data.get('id'),
                               openai_agent_id=agent_data.get('openai_agent_id'),
                               input_method=input_method)
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_create_agent")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_main")]
                ])
                
                await self._safe_edit_or_answer(callback, text, keyboard)
                
                self.logger.error("‚ùå Content agent creation failed", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               error=result.get('error'),
                               message=error_message,
                               input_method=input_method)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm agent creation", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await self._safe_edit_or_answer(
                callback,
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await state.clear()
