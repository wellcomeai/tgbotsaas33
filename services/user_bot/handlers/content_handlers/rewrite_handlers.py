"""
–ú–µ—Ç–æ–¥—ã —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üé§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API
2. üìé –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã)
3. üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
4. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∫–∞–º–∏
5. üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—Ä–∞–π—Ç–∞
6. üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
7. ‚ú® –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
8. ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

from typing import Dict
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from services.content_agent import content_agent_service

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    MEDIA_GROUP_AVAILABLE = False


class RewriteHandlersMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    
    async def cb_rewrite_post(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
        self.logger.info("üìù Rewrite mode requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            if not stats.get('has_openai_id'):
                await callback.answer("–û—à–∏–±–∫–∞ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞.", show_alert=True)
                return
            
            text = f"""
üìù <b>–†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤</b>

üë§ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç:</b> {agent_info['name']}
üí∞ <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {self._format_number(stats.get('tokens_used', 0))}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:</b>
<i>{self._truncate_text(agent_info['instructions'], 200)}</i>

üìé <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
‚Ä¢ üì∑ –§–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé• –í–∏–¥–µ–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑) 
‚Ä¢ üé¨ GIF/–∞–Ω–∏–º–∞—Ü–∏–∏ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ ‚ú® –ê–ª—å–±–æ–º—ã (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã) {'‚úÖ' if MEDIA_GROUP_AVAILABLE else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç)

üéØ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ü—Ä–∏—à–ª–∏—Ç–µ –õ–Æ–ë–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:
   ‚Ä¢ –¢–µ–∫—Å—Ç 
   ‚Ä¢ üì∑ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –ò–õ–ò –±–µ–∑ (–∞–≥–µ–Ω—Ç –æ–ø–∏—à–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É)
   ‚Ä¢ üé• –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –ò–õ–ò –±–µ–∑  
   ‚Ä¢ üìÑ –õ—é–±—ã–µ —Ñ–∞–π–ª—ã —Å –ø–æ–¥–ø–∏—Å—å—é –ò–õ–ò –±–µ–∑
   ‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. ‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ—Ä–∞–π—Ç–∞
3. üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ - –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
4. –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç/–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
5. –ü–æ–ª—É—á–∞–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úèÔ∏è –ø—Ä–∞–≤–∫–∏ –∏ üì§ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ—Ä–∞–π—Ç —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞
‚Ä¢ –î–ª—è —Ç–µ–∫—Å—Ç–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –î–ª—è –º–µ–¥–∏–∞ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∏: –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è file_id)
‚Ä¢ –ê–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
‚Ä¢ –°—Å—ã–ª–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∞–≥–µ–Ω—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ Whisper API
‚Ä¢ –ü–æ—Å–ª–µ —Ä–µ—Ä–∞–π—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∞–≤–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è

<b>–ü—Ä–∏—à–ª–∏—Ç–µ –õ–Æ–ë–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ "no text to edit"
            await callback.message.answer(
                text,
                reply_markup=keyboards['rewrite_mode']
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_rewrite_post)
            
            self.logger.info("‚úÖ Rewrite mode activated successfully with voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start rewrite mode", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞", show_alert=True)
    
    async def handle_rewrite_post_input(self, message: Message, state: FSMContext):
        """üé§ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("üìù Rewrite post input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        message_id=message.message_id,
                        has_photo=bool(message.photo),
                        has_video=bool(message.video),
                        has_text=bool(message.text),
                        has_caption=bool(message.caption),
                        has_voice=bool(message.voice))
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if message.voice:
                content_type_str = "üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif message.photo:
                content_type_str = "üì∑ —Ñ–æ—Ç–æ"
            elif message.video:
                content_type_str = "üé• –≤–∏–¥–µ–æ"
            elif message.animation:
                content_type_str = "üé¨ GIF/–∞–Ω–∏–º–∞—Ü–∏—è"
            elif message.audio:
                content_type_str = "üéµ –∞—É–¥–∏–æ"
            elif message.document:
                content_type_str = "üìÑ –¥–æ–∫—É–º–µ–Ω—Ç"
            elif message.sticker:
                content_type_str = "üé≠ —Å—Ç–∏–∫–µ—Ä"
            elif message.text:
                content_type_str = "üìù —Ç–µ–∫—Å—Ç"
            else:
                content_type_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer(
                f"‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {content_type_str}...</b>\n\n"
                f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n"
                f"üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫...\n"
                f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç—É...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.rewrite_post(
                bot_id=self.bot_id,
                message=message,
                user_id=message.from_user.id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Ä–∞–π—Ç
                await self._send_rewrite_result(message, result)
                
                input_type = "voice" if message.voice else content_type_str
                
                self.logger.info("‚úÖ Post rewritten successfully with complete media support", 
                               bot_id=self.bot_id,
                               input_type=input_type,
                               original_length=len(result['content']['original_text']),
                               rewritten_length=len(result['content']['rewritten_text']),
                               tokens_used=result['tokens']['total_tokens'],
                               has_media=result['has_media'],
                               has_links=result.get('has_links', False))
            else:
                # –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞
                await self._send_rewrite_error(message, result)
                
                self.logger.error("‚ùå Post rewrite failed", 
                               bot_id=self.bot_id,
                               input_type=content_type_str,
                               error=result.get('error'),
                               message=result.get('message'))
            
        except Exception as e:
            self.logger.error("üí• Failed to handle rewrite post input with complete media support", 
                            bot_id=self.bot_id,
                            message_id=message.message_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await message.answer(
                f"üí• <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {content_type_str}</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_edit_instructions_input(self, message: Message, state: FSMContext):
        """üé§ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø—Ä–∞–≤–æ–∫ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            edit_instructions = None
            
            # üé§ –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
            if message.voice:
                self.logger.info("üé§ Voice edit instructions received, transcribing...", 
                                user_id=message.from_user.id,
                                bot_id=self.bot_id)
                
                await message.bot.send_chat_action(message.chat.id, "typing")
                
                edit_instructions = await self._transcribe_voice_message(message.voice)
                
                if not edit_instructions:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                    return
                
                self.logger.info("‚úÖ Voice edit instructions transcribed successfully", 
                               user_id=message.from_user.id,
                               bot_id=self.bot_id,
                               transcribed_length=len(edit_instructions))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
                await message.answer(f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏:</b>\n<i>{edit_instructions[:200]}{'...' if len(edit_instructions) > 200 else ''}</i>\n\n‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–∞–≤–∫–∏...")
                
            elif message.text:
                edit_instructions = message.text.strip()
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫.")
                return
            
            if not edit_instructions or len(edit_instructions) < 5:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not last_rewrite:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å (–¥–ª—è –≥–æ–ª–æ—Å–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—à–µ)
            if not message.voice:
                processing_msg = await message.answer("‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–∞–≤–∫–∏...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∞–≤–æ–∫
            input_method = "–≥–æ–ª–æ—Å–æ–º" if message.voice else "—Ç–µ–∫—Å—Ç–æ–º"
            
            edit_prompt = f"""
–í–Ω–µ—Å–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç (–ø—Ä–∞–≤–∫–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã {input_method}):

–ü–†–ê–í–ö–ò: {edit_instructions}

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:
{last_rewrite['content']['rewritten_text']}

–ü—Ä–∏–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
"""
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —Å –ø—Ä–∞–≤–∫–∞–º–∏
            edit_result = await content_agent_service.content_manager.process_content_rewrite(
                bot_id=self.bot_id,
                original_text=edit_prompt,
                media_info=last_rewrite.get('media_info'),
                links_info=last_rewrite.get('links_info'),
                user_id=message.from_user.id
            )
            
            try:
                if not message.voice:  # –î–ª—è –≥–æ–ª–æ—Å–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ processing_msg
                    await processing_msg.delete()
            except:
                pass
            
            if edit_result and edit_result.get('success'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ—Ä–∞–π—Ç
                await content_agent_service.content_manager.save_rewrite_result(
                    self.bot_id, edit_result
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboards = await self._get_content_keyboards()
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ media_info
                media_info = edit_result.get('media_info') or edit_result.get('media')
                
                if media_info:
                    await self._send_media_with_text(
                        message,
                        edit_result['content']['rewritten_text'],
                        media_info,
                        keyboards['post_actions']
                    )
                else:
                    await message.answer(
                        edit_result['content']['rewritten_text'],
                        reply_markup=keyboards['post_actions']
                    )
                
                self.logger.info("‚úÖ Edit instructions applied successfully", 
                               bot_id=self.bot_id,
                               input_method=input_method,
                               instructions_length=len(edit_instructions))
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫")
            
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Error processing edit instructions with voice support", error=str(e))
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫")
    
    async def cb_exit_rewrite_mode(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞"""
        self.logger.info("üö™ Exit rewrite mode requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            await state.clear()
            
            text = f"""
üö™ <b>–†–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!

üìä <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ (–≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)
‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ä–µ—Ä–∞–π—Ç–∞
‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏

üé§ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥!

<b>–ö—É–¥–∞ –ø–µ—Ä–µ–π—Ç–∏?</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º", callback_data="content_manage")],
                [InlineKeyboardButton(text="üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω—é", callback_data="content_main")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            self.logger.info("‚úÖ Rewrite mode exited successfully with voice support reminder", 
                           bot_id=self.bot_id,
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to exit rewrite mode", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞", show_alert=True)
    
    # ===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–†–ê–ô–¢–ê =====
    
    async def _send_rewrite_result(self, original_message: Message, result: Dict):
        """–ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ—Ä–∞–π—Ç–∞"""
        try:
            content = result['content']
            media_info = result.get('media')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞
            save_success = await content_agent_service.content_manager.save_rewrite_result(
                self.bot_id, result
            )
            
            # ‚ú® –£–ü–†–û–©–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            rewritten_text = content['rewritten_text']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboards = await self._get_content_keyboards()
            post_actions_keyboard = keyboards.get('post_actions', keyboards['rewrite_mode'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑
            if media_info:
                await self._send_media_with_text(
                    original_message,
                    rewritten_text,  # ‚ú® –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    media_info,
                    post_actions_keyboard  # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                )
            else:
                await original_message.answer(
                    rewritten_text,  # ‚ú® –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    reply_markup=post_actions_keyboard  # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tokens = result['tokens']
            agent_info = result['agent']
            
            self.logger.info("‚úÖ Clean rewrite result sent with action buttons and voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           has_media=bool(media_info),
                           tokens_used=tokens['total_tokens'],
                           original_length=len(content['original_text']),
                           rewritten_length=len(content['rewritten_text']))
            
        except Exception as e:
            self.logger.error("üí• Failed to send clean rewrite result", 
                            bot_id=self.bot_id,
                            error=str(e))
            await original_message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞")
    
    async def _send_rewrite_error(self, original_message: Message, result: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ—Ä–∞–π—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        try:
            error_type = result.get('error', 'unknown')
            error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if error_type == 'no_content_agent':
                text = """
‚ùå <b>–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Ä–∞–π—Ç–∞.
"""
            elif error_type == 'no_text':
                text = """
‚ùå <b>–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ üì∑ –§–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑ - –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ)
‚Ä¢ üé• –í–∏–¥–µ–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé¨ GIF/–∞–Ω–∏–º–∞—Ü–∏—é (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)  
‚Ä¢ üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ ‚ú® –ê–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é

<b>–ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!</b>
"""
            elif error_type == 'text_too_short':
                text = """
‚ùå <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞: 3 —Å–∏–º–≤–æ–ª–∞.
–ü—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""
            elif error_type == 'token_limit_exceeded':
                tokens_info = result.get('tokens_used', 0)
                tokens_limit = result.get('tokens_limit', 0)
                
                text = f"""
üö´ <b>–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self._format_number(tokens_info)} / {self._format_number(tokens_limit)}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
"""
            else:
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
            
            keyboards = await self._get_content_keyboards()
            
            await original_message.answer(
                text,
                reply_markup=keyboards['rewrite_mode']
            )
            
            self.logger.info("‚úÖ Rewrite error sent", 
                           bot_id=self.bot_id,
                           error_type=error_type)
            
        except Exception as e:
            self.logger.error("üí• Failed to send rewrite error", 
                            bot_id=self.bot_id,
                            error=str(e))
            await original_message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ —Ä–µ—Ä–∞–π—Ç–∞")
    
    async def _send_media_with_text(self, message: Message, text: str, media_info: Dict, keyboard):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø)"""
        try:
            media_type = media_info['type']
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            if media_type == 'media_group':
                # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º MediaGroupBuilder
                media_builder = MediaGroupBuilder(caption=text)
                
                files_info = media_info.get('files', [])
                media_added = 0
                
                for file_info in files_info:
                    file_type = file_info.get('type')
                    file_id = file_info.get('file_id')
                    
                    if file_type == 'photo' and file_id:
                        media_builder.add_photo(media=file_id)
                        media_added += 1
                    elif file_type == 'video' and file_id:
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'animation' and file_id:
                        # GIF –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ video
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'audio' and file_id:
                        media_builder.add_audio(media=file_id)
                        media_added += 1
                    elif file_type == 'document' and file_id:
                        media_builder.add_document(media=file_id)
                        media_added += 1
                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞—Ö
                
                if media_added > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_group = media_builder.build()
                    await message.answer_media_group(media=media_group)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await message.answer("‚ú® <b>–†–µ—Ä–∞–π—Ç –≥–æ—Ç–æ–≤!</b>", reply_markup=keyboard)
                    
                    self.logger.debug("üì∏ Media group sent with clean rewrite result", 
                                    bot_id=self.bot_id, media_files=media_added)
                else:
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
                    await message.answer(text, reply_markup=keyboard)
                    self.logger.warning("‚ö†Ô∏è No media files added to group, sent text only", bot_id=self.bot_id)
                
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            file_id = media_info.get('file_id')
            if not file_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç file_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(text, reply_markup=keyboard)
                self.logger.warning("‚ö†Ô∏è No file_id found, sent text only", 
                                   bot_id=self.bot_id, media_type=media_type)
                return
            
            if media_type == 'photo':
                await message.answer_photo(
                    photo=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üì∑ Photo sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'video':
                await message.answer_video(
                    video=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé• Video sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'animation':
                await message.answer_animation(
                    animation=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé¨ Animation sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'audio':
                await message.answer_audio(
                    audio=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üéµ Audio sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'document':
                await message.answer_document(
                    document=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üìÑ Document sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'sticker':
                # –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                await message.answer_sticker(sticker=file_id)
                await message.answer(text, reply_markup=keyboard)
                self.logger.debug("üé≠ Sticker sent with separate text", bot_id=self.bot_id)
                
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                await message.answer(text, reply_markup=keyboard)
                self.logger.debug("üìÑ Fallback text sent (unsupported media)", 
                                bot_id=self.bot_id, media_type=media_type)
                
        except Exception as e:
            self.logger.error("üí• Failed to send media with clean text", 
                            media_type=media_info.get('type'),
                            error=str(e),
                            exc_info=True)
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text, reply_markup=keyboard)
