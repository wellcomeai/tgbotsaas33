"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. ‚å®Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
2. üîß –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—á–∏—Å–ª–∞, –¥–∞—Ç—ã, —Ç–µ–∫—Å—Ç)
3. üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
4. üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
5. üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
6. üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
7. ‚ú® –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
8. üéØ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

from typing import Dict, Any, Optional, Union
from datetime import datetime
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import structlog

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    MEDIA_GROUP_AVAILABLE = False

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    CONTENT_STATES_AVAILABLE = False


class ContentUtilsMixin:
    """–ú–∏–∫—Å–∏–Ω —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏"""
    
    async def _get_content_keyboards(self) -> Dict[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤"""
        
        keyboards = {
            'main_menu_no_agent': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_create_agent")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ]),
            
            'main_menu_with_agent': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º", callback_data="content_manage")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ]),
            
            'create_confirmation': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_confirm_create")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_main")]
            ]),
            
            'manage_menu': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="content_settings")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_delete_agent")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_main")]
            ]),
            
            'settings_menu': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="content_edit_name")],
                [InlineKeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="content_edit_instructions")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_manage")]
            ]),
            
            'delete_confirmation': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="content_confirm_delete")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_manage")]
            ]),
            
            'rewrite_mode': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ä–∞–π—Ç", callback_data="content_exit_rewrite")]
            ]),
            
            'back_to_main': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="content_main")]
            ]),
            
            'back_to_settings': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")]
            ]),
            
            # –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'post_actions': InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="content_edit_post"),
                    InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="content_publish")
                ],
                [InlineKeyboardButton(text="üîÑ –†–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")]
            ]),
            
            'back_to_rewrite': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Ä–µ—Ä–∞–π—Ç—É", callback_data="content_rewrite")]
            ]),
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            'error_retry': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ]),
            
            'success_continue': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π —Ä–µ—Ä–∞–π—Ç", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞", callback_data="content_settings")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ]),
            
            'channel_setup': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∫ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="content_setup_channel")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_main")]
            ])
        }
        
        return keyboards
    
    def _format_number(self, number: Union[int, float, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        try:
            if isinstance(number, str):
                number = int(number) if number.isdigit() else float(number)
            
            if isinstance(number, int):
                return f"{number:,}".replace(",", " ")
            elif isinstance(number, float):
                return f"{number:,.2f}".replace(",", " ")
            else:
                return str(number)
        except (ValueError, TypeError):
            return str(number)
    
    def _format_date(self, date_input: Union[str, datetime, None] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_input:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            return datetime.now().strftime("%d.%m.%Y %H:%M")
        
        try:
            if isinstance(date_input, str):
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                formats = [
                    "%Y-%m-%dT%H:%M:%S.%fZ",  # ISO —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ Z
                    "%Y-%m-%dT%H:%M:%SZ",     # ISO –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ —Å Z
                    "%Y-%m-%dT%H:%M:%S",      # ISO –±–µ–∑ Z
                    "%Y-%m-%d %H:%M:%S",      # SQL —Ñ–æ—Ä–º–∞—Ç
                    "%d.%m.%Y %H:%M",         # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                    "%Y-%m-%d"                # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                ]
                
                dt = None
                for fmt in formats:
                    try:
                        dt = datetime.strptime(date_input, fmt)
                        break
                    except ValueError:
                        continue
                
                if dt is None:
                    # –ü—Ä–æ–±—É–µ–º fromisoformat –¥–ª—è –Ω–æ–≤—ã—Ö Python
                    dt = datetime.fromisoformat(date_input.replace('Z', '+00:00'))
                
            elif isinstance(date_input, datetime):
                dt = date_input
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            
            return dt.strftime("%d.%m.%Y %H:%M")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Date formatting error: {e}", date_input=str(date_input))
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
    
    def _truncate_text(self, text: str, max_length: int, suffix: str = "...") -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
        if not text:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if not isinstance(text, str):
            text = str(text)
        
        if len(text) <= max_length:
            return text
        
        return text[:max_length-len(suffix)] + suffix
    
    def _safe_get_from_result(self, result: Dict, key: str, default: Any = None) -> Any:
        """üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ result —Å–ª–æ–≤–∞—Ä—è"""
        try:
            if not isinstance(result, dict):
                self.logger.warning("‚ö†Ô∏è Result is not a dictionary", 
                                   result_type=type(result).__name__)
                return default
            
            return result.get(key, default)
            
        except (AttributeError, TypeError) as e:
            self.logger.warning(f"‚ö†Ô∏è Failed to get key '{key}' from result", 
                               result_type=type(result).__name__,
                               error=str(e))
            return default
    
    async def _safe_edit_or_answer(self, callback: CallbackQuery, text: str, reply_markup: InlineKeyboardMarkup = None):
        """üîß –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(text, reply_markup=reply_markup)
            self.logger.debug("‚úÖ Message edited successfully")
            
        except Exception as e:
            error_str = str(e).lower()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
            if "no text in the message to edit" in error_str or "message is not modified" in error_str:
                self.logger.info("‚ÑπÔ∏è Cannot edit message, sending new one", 
                               bot_id=self.bot_id,
                               reason="no_text_to_edit")
                await callback.message.answer(text, reply_markup=reply_markup)
                
            elif "message to edit not found" in error_str:
                self.logger.warning("‚ö†Ô∏è Message to edit not found, sending new one",
                                   bot_id=self.bot_id)
                await callback.message.answer(text, reply_markup=reply_markup)
                
            elif "bad request" in error_str and "exactly the same" in error_str:
                self.logger.debug("‚ÑπÔ∏è Message content is the same, no edit needed")
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º answer
                self.logger.error("üí• Unexpected error editing message", 
                                 bot_id=self.bot_id,
                                 error=str(e))
                try:
                    await callback.message.answer(text, reply_markup=reply_markup)
                except Exception as answer_error:
                    self.logger.error("üí• Failed to send fallback message", 
                                     error=str(answer_error))
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        is_owner = user_id == self.owner_user_id
        
        self.logger.debug("üë§ Owner check", 
                         bot_id=self.bot_id,
                         user_id=user_id,
                         owner_user_id=self.owner_user_id,
                         is_owner=is_owner)
        
        return is_owner
    
    def _validate_text_input(self, text: str, min_length: int = 1, max_length: int = 4096, 
                           field_name: str = "—Ç–µ–∫—Å—Ç") -> tuple[bool, str]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not text:
            return False, f"{field_name.capitalize()} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if not isinstance(text, str):
            text = str(text)
        
        text = text.strip()
        
        if len(text) < min_length:
            return False, f"{field_name.capitalize()} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(text) > max_length:
            return False, f"{field_name.capitalize()} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        return True, text
    
    def _format_file_size(self, size_bytes: int) -> str:
        """üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if not size_bytes:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        try:
            size_bytes = int(size_bytes)
            
            if size_bytes < 1024:
                return f"{size_bytes} B"
            elif size_bytes < 1024 * 1024:
                return f"{size_bytes / 1024:.1f} KB"
            elif size_bytes < 1024 * 1024 * 1024:
                return f"{size_bytes / (1024 * 1024):.1f} MB"
            else:
                return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"
                
        except (ValueError, TypeError):
            return "–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞"
    
    def _format_duration(self, seconds: int) -> str:
        """‚è±Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not seconds:
            return "0:00"
        
        try:
            seconds = int(seconds)
            
            if seconds < 60:
                return f"0:{seconds:02d}"
            elif seconds < 3600:
                minutes = seconds // 60
                secs = seconds % 60
                return f"{minutes}:{secs:02d}"
            else:
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                secs = seconds % 60
                return f"{hours}:{minutes:02d}:{secs:02d}"
                
        except (ValueError, TypeError):
            return "0:00"
    
    def _get_media_emoji(self, media_type: str) -> str:
        """üé® –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∂–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
        emoji_map = {
            'photo': 'üì∑',
            'video': 'üé•', 
            'animation': 'üé¨',
            'audio': 'üéµ',
            'voice': 'üé§',
            'document': 'üìÑ',
            'sticker': 'üé≠',
            'video_note': 'üé•',
            'media_group': 'üì∏',
            'text': 'üìù'
        }
        
        return emoji_map.get(media_type, 'üìé')
    
    def _get_status_emoji(self, status: bool) -> str:
        """‚úÖ‚ùå –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∂–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        return "‚úÖ" if status else "‚ùå"
    
    def _format_agent_stats(self, stats: Dict) -> str:
        """üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        if not stats:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        tokens_used = self._format_number(stats.get('tokens_used', 0))
        has_openai = self._get_status_emoji(stats.get('has_openai_id', False))
        last_usage = self._format_date(stats.get('last_usage_at')) if stats.get('last_usage_at') else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'
        
        return f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞:</b>
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used}
‚Ä¢ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {has_openai}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_usage}
"""
    
    def _format_system_capabilities(self) -> str:
        """üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        capabilities = []
        
        # –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        media_groups = self._get_status_emoji(MEDIA_GROUP_AVAILABLE)
        capabilities.append(f"‚Ä¢ –ê–ª—å–±–æ–º—ã: {media_groups}")
        
        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è  
        fsm_states = self._get_status_emoji(CONTENT_STATES_AVAILABLE)
        capabilities.append(f"‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {fsm_states}")
        
        # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        capabilities.extend([
            "‚Ä¢ üîó –°—Å—ã–ª–∫–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ",
            "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫", 
            "‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã",
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "‚Ä¢ üìé –í—Å–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞: ‚úÖ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã"
        ])
        
        return "\n".join(capabilities)
    
    def _get_supported_content_types(self) -> str:
        """üìé –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return """
üìé <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé• –í–∏–¥–µ–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé¨ GIF/–∞–Ω–∏–º–∞—Ü–∏–∏ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä—ã (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ ‚ú® –ê–ª—å–±–æ–º—ã (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã) {'‚úÖ' if MEDIA_GROUP_AVAILABLE else '‚ùå'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è)
"""
    
    def _create_error_keyboard(self, retry_callback: str = "content_main", 
                              main_callback: str = "admin_main") -> InlineKeyboardMarkup:
        """‚ùå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—à–∏–±–∫–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=retry_callback)],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=main_callback)]
        ])
    
    def _create_success_keyboard(self, primary_callback: str, primary_text: str,
                               secondary_callback: str = "content_main") -> InlineKeyboardMarkup:
        """‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ø–µ—Ö–∞"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=primary_text, callback_data=primary_callback)],
            [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=secondary_callback)]
        ])
    
    def _get_help_text(self) -> str:
        """‚ùì –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞–º"""
        return f"""
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞–º</b>

üéØ <b>–ß—Ç–æ —ç—Ç–æ:</b>
–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç - —ç—Ç–æ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ OpenAI GPT-4o –∏ —Å–ª–µ–¥—É–µ—Ç –≤–∞—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —Å—Ç–∏–ª—é.

üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
{self._get_supported_content_types()}

üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥:</b>
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–º
‚Ä¢ –ü—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–∏–∫—Ç–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º  
‚Ä¢ –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI Whisper API

üì∫ <b>–ö–∞–Ω–∞–ª—ã:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫

‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π

üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
{self._format_system_capabilities()}

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚Ä¢ –ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
‚Ä¢ –ê–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
‚Ä¢ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è
class ContentConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –õ–∏–º–∏—Ç—ã
    MIN_AGENT_NAME_LENGTH = 3
    MAX_AGENT_NAME_LENGTH = 100
    MIN_INSTRUCTIONS_LENGTH = 10
    MAX_INSTRUCTIONS_LENGTH = 2000
    MIN_TEXT_LENGTH = 3
    MAX_TEXT_LENGTH = 4000
    MIN_EDIT_INSTRUCTIONS_LENGTH = 5
    
    # –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    SUPPORTED_MEDIA_TYPES = [
        'photo', 'video', 'animation', 'audio', 
        'document', 'sticker', 'voice', 'video_note'
    ]
    
    # –≠–º–æ–¥–∂–∏
    EMOJI_SUCCESS = '‚úÖ'
    EMOJI_ERROR = '‚ùå'
    EMOJI_WARNING = '‚ö†Ô∏è'
    EMOJI_INFO = '‚ÑπÔ∏è'
    EMOJI_PROCESSING = '‚è≥'
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    MESSAGES = {
        'access_denied': '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        'agent_not_found': '‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        'processing': '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...',
        'success': '‚úÖ –£—Å–ø–µ—à–Ω–æ!',
        'error': '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        'voice_transcribing': 'üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
        'voice_failed': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    }
