"""
–ú–µ—Ç–æ–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª—ã –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª—ã
2. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∫–∞–º–∏
3. üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
4. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö
5. üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª—ã
6. üé• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
7. üîó –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
8. üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

from typing import Dict
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from services.content_agent import content_agent_service

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False


class ChannelHandlersMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    async def cb_edit_post(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not last_rewrite:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
                return
            
            text = """
‚úèÔ∏è <b>–í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –ø–æ—Å—Ç</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?</b>

–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å—Ç–∏:
- "–°–¥–µ–ª–∞—Ç—å —Ç–æ–Ω –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º"
- "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
- "–£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —ç–º–æ–¥–∂–∏"
- "–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–¥–≤–æ–µ"

üé§ <b>–ù–û–í–û–ï: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–º!</b>

<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ üé§ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.answer(
                text, 
                reply_markup=keyboards['back_to_rewrite']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_edit_instructions)
                
        except Exception as e:
            self.logger.error("üí• Error starting post edit", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    
    async def cb_publish_post(self, callback: CallbackQuery):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            channel_info = await content_agent_service.content_manager.get_channel_info(self.bot_id)
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not channel_info or not last_rewrite:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                return
            
            channel_id = channel_info['chat_id']
            rewritten_text = last_rewrite['content']['rewritten_text']
            media_info = last_rewrite.get('media_info') or last_rewrite.get('media')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ answer –≤–º–µ—Å—Ç–æ edit_text
            await callback.answer("‚è≥ –ü—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª...", show_alert=True)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            if media_info:
                await self._publish_media_to_channel(channel_id, rewritten_text, media_info)
            else:
                await self.bot_config['bot'].send_message(channel_id, rewritten_text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π —Ä–µ—Ä–∞–π—Ç", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ])
            
            # –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            try:
                text = f"""
‚úÖ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_info['chat_title']}
üìù <b>–¢–µ–∫—Å—Ç:</b> {self._truncate_text(rewritten_text, 150)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                await callback.message.answer(text, reply_markup=keyboard)
            except Exception as parse_error:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                simple_text = f"""
‚úÖ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_info['chat_title']}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                await callback.message.answer(simple_text, reply_markup=keyboard)
                self.logger.info("‚úÖ Post published but used simplified result message due to HTML parsing error")
            
        except Exception as e:
            self.logger.error("üí• Error publishing post", error=str(e))
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ])
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", reply_markup=keyboard)
    
    async def _publish_media_to_channel(self, channel_id: int, text: str, media_info: Dict):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–ª—å–±–æ–º–æ–≤"""    
        try:
            media_type = media_info['type']
            bot = self.bot_config['bot']
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            if media_type == 'media_group':
                # –î–ª—è –∞–ª—å–±–æ–º–æ–≤ —Å–æ–∑–¥–∞–µ–º MediaGroupBuilder
                media_builder = MediaGroupBuilder(caption=text)
                
                files_info = media_info.get('files', [])
                media_added = 0
                
                for file_info in files_info:
                    file_type = file_info.get('type')
                    file_id = file_info.get('file_id')
                    
                    if file_type == 'photo' and file_id:
                        media_builder.add_photo(media=file_id)
                        media_added += 1
                    elif file_type == 'video' and file_id:
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'animation' and file_id:
                        # GIF –ø—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ video
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'audio' and file_id:
                        media_builder.add_audio(media=file_id)
                        media_added += 1
                    elif file_type == 'document' and file_id:
                        media_builder.add_document(media=file_id)
                        media_added += 1
                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞—Ö Telegram
                
                if media_added > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    media_group = media_builder.build()
                    await bot.send_media_group(channel_id, media_group)
                    
                    self.logger.info("‚úÖ Media group published to channel successfully", 
                                   bot_id=self.bot_id,
                                   channel_id=channel_id,
                                   media_files=media_added)
                else:
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
                    await bot.send_message(channel_id, text)
                    self.logger.warning("‚ö†Ô∏è No media files added to group, sent text only")
                    
            elif media_type == 'photo':
                file_id = media_info['file_id']
                await bot.send_photo(channel_id, photo=file_id, caption=text)
            elif media_type == 'video':
                file_id = media_info['file_id']
                await bot.send_video(channel_id, video=file_id, caption=text)
            elif media_type == 'animation':
                file_id = media_info['file_id']
                await bot.send_animation(channel_id, animation=file_id, caption=text)
            elif media_type == 'audio':
                file_id = media_info['file_id']
                await bot.send_audio(channel_id, audio=file_id, caption=text)
            elif media_type == 'document':
                file_id = media_info['file_id']
                await bot.send_document(channel_id, document=file_id, caption=text)
            elif media_type == 'sticker':
                file_id = media_info['file_id']
                # –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                await bot.send_sticker(channel_id, sticker=file_id)
                await bot.send_message(channel_id, text)
            else:
                # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                await bot.send_message(channel_id, text)
                self.logger.warning("‚ö†Ô∏è Unknown media type, sent text only", 
                                   media_type=media_type)
                
        except Exception as e:
            self.logger.error("üí• Error publishing media to channel", 
                            bot_id=self.bot_id,
                            channel_id=channel_id,
                            media_type=media_info.get('type'),
                            error=str(e))
            raise
    
    async def _check_channel_permissions(self, channel_id: int) -> Dict:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot = self.bot_config['bot']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await bot.get_chat(channel_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–µ –∫–∞–Ω–∞–ª–∞
            bot_member = await bot.get_chat_member(channel_id, bot.id)
            
            permissions = {
                'is_member': bot_member.status in ['member', 'administrator', 'creator'],
                'is_admin': bot_member.status in ['administrator', 'creator'],
                'can_post_messages': False,
                'can_edit_messages': False,
                'can_delete_messages': False,
                'chat_title': chat.title,
                'chat_username': getattr(chat, 'username', None)
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω
            if permissions['is_admin'] and hasattr(bot_member, 'can_post_messages'):
                permissions['can_post_messages'] = getattr(bot_member, 'can_post_messages', False)
                permissions['can_edit_messages'] = getattr(bot_member, 'can_edit_messages', False)
                permissions['can_delete_messages'] = getattr(bot_member, 'can_delete_messages', False)
            
            self.logger.info("‚úÖ Channel permissions checked", 
                           bot_id=self.bot_id,
                           channel_id=channel_id,
                           permissions=permissions)
            
            return {
                'success': True,
                'permissions': permissions
            }
            
        except Exception as e:
            self.logger.error("üí• Error checking channel permissions", 
                            bot_id=self.bot_id,
                            channel_id=channel_id,
                            error=str(e))
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _validate_channel_for_publishing(self, channel_id: int) -> tuple[bool, str]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            permissions_result = await self._check_channel_permissions(channel_id)
            
            if not permissions_result['success']:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª: {permissions_result['error']}"
            
            permissions = permissions_result['permissions']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ
            if not permissions['is_member']:
                return False, "–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            if not permissions['is_admin']:
                return False, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"
            
            if not permissions['can_post_messages']:
                return False, "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"
            
            return True, "OK"
            
        except Exception as e:
            self.logger.error("üí• Error validating channel", 
                            channel_id=channel_id,
                            error=str(e))
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    async def _get_channel_info_formatted(self, channel_id: int) -> str:
        """üì∫ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            permissions_result = await self._check_channel_permissions(channel_id)
            
            if not permissions_result['success']:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {permissions_result['error']}"
            
            permissions = permissions_result['permissions']
            
            # –°—Ç–∞—Ç—É—Å—ã –±–æ—Ç–∞
            status_emoji = "‚úÖ" if permissions['is_member'] else "‚ùå"
            admin_emoji = "üëë" if permissions['is_admin'] else "üë§"
            
            # –ü—Ä–∞–≤–∞
            rights = []
            if permissions['can_post_messages']:
                rights.append("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è")
            if permissions['can_edit_messages']:
                rights.append("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if permissions['can_delete_messages']:
                rights.append("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ")
            
            rights_text = " ‚Ä¢ ".join(rights) if rights else "–ù–µ—Ç –ø—Ä–∞–≤"
            
            username = f"@{permissions['chat_username']}" if permissions['chat_username'] else "–ë–µ–∑ username"
            
            return f"""
üì∫ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {permissions['chat_title']}
‚Ä¢ Username: {username}
‚Ä¢ ID: <code>{channel_id}</code>

ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
‚Ä¢ {status_emoji} –£—á–∞—Å—Ç–Ω–∏–∫: {'–î–∞' if permissions['is_member'] else '–ù–µ—Ç'}
‚Ä¢ {admin_emoji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if permissions['is_admin'] else '–ù–µ—Ç'}
‚Ä¢ –ü—Ä–∞–≤–∞: {rights_text}

{'‚úÖ –ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' if permissions['can_post_messages'] else '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'}
"""
            
        except Exception as e:
            self.logger.error("üí• Error formatting channel info", 
                            channel_id=channel_id,
                            error=str(e))
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}"
    
    async def _save_channel_connection(self, channel_data: Dict) -> bool:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            success = await content_agent_service.content_manager.save_channel_info(
                self.bot_id, channel_data
            )
            
            if success:
                self.logger.info("‚úÖ Channel connection saved", 
                               bot_id=self.bot_id,
                               channel_id=channel_data.get('chat_id'),
                               channel_title=channel_data.get('chat_title'))
            else:
                self.logger.error("‚ùå Failed to save channel connection", 
                                bot_id=self.bot_id,
                                channel_data=channel_data)
            
            return success
            
        except Exception as e:
            self.logger.error("üí• Error saving channel connection", 
                            bot_id=self.bot_id,
                            error=str(e))
            return False
    
    def _get_publishing_status_message(self, success: bool, channel_title: str, error: str = None) -> str:
        """üìä –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        if success:
            return f"""
‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}
üïê <b>–í—Ä–µ–º—è:</b> {self._format_date()}

üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã
"""
        else:
            error_text = f": {error}" if error else ""
            
            return f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏{error_text}</b>

üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ –ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram API

üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
    
    def _get_channel_setup_instructions(self) -> str:
        """üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞"""
        return """
üì∫ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>

<b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1Ô∏è‚É£ <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:</b>
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ‚Üí "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" ‚Üí "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞

2Ô∏è‚É£ <b>–í—ã–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:</b>
   ‚Ä¢ ‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   ‚Ä¢ ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   ‚Ä¢ ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

3Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –∫ –±–æ—Ç—É:</b>
   ‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å—é–¥–∞
   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞–Ω–∞–ª
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ –ø—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
‚Ä¢ –ë–µ–∑ –ø—Ä–∞–≤ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã

üéØ <b>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ê–≥–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
‚Ä¢ –ê–ª—å–±–æ–º—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–ª—å–±–æ–º—ã
‚Ä¢ –°—Å—ã–ª–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–æ—Å—Ç–∞—Ö
"""
