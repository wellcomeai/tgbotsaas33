"""
–ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API
2. ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≥–µ–Ω—Ç–∞
3. üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
4. üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
5. üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
6. üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
7. üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ edge cases
"""

from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from services.content_agent import content_agent_service

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    MEDIA_GROUP_AVAILABLE = False


class AgentManagementMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    async def cb_manage_agent(self, callback: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º"""
        self.logger.info("‚öôÔ∏è Agent management accessed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º</b>

üë§ <b>–ò–º—è:</b> {agent_info['name']}
ü§ñ <b>OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('has_openai_id') else '‚ùå –û—à–∏–±–∫–∞'}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {self._format_date(agent_info.get('created_at'))}
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {self._format_date(agent_info.get('updated_at'))}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self._format_number(stats.get('tokens_used', 0))}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {self._format_date(stats.get('last_usage_at')) or '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:</b>
<i>{self._truncate_text(agent_info['instructions'], 300)}</i>

üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if CONTENT_STATES_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üìé –í—Å–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞: ‚úÖ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(
                callback,
                text,
                keyboards['manage_menu']
            )
            
            self.logger.info("‚úÖ Agent management menu displayed", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent management", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º", show_alert=True)
    
    async def cb_agent_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚öôÔ∏è Agent settings accessed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {agent_info['name']}
üîó <b>OpenAI Agent ID:</b> <code>{agent_info.get('openai_agent_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {self._format_date(agent_info.get('created_at'))}
üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {self._format_date(agent_info.get('updated_at'))}

üìã <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(agent_info['instructions'], 400)}</i>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {self._format_number(stats.get('tokens_used', 0))}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self._format_date(stats.get('last_usage_at')) or '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}
‚Ä¢ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('has_openai_id') else '‚ùå –û—à–∏–±–∫–∞'}

üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if CONTENT_STATES_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üìé –í—Å–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞: ‚úÖ –§–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã

üìé <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
üì∑ –§–æ—Ç–æ ‚Ä¢ üé• –í–∏–¥–µ–æ ‚Ä¢ üé¨ GIF ‚Ä¢ üéµ –ê—É–¥–∏–æ ‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä—ã

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>
‚Ä¢ –ò–º—è –∞–≥–µ–Ω—Ç–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–µ—Ä–∞–π—Ç–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–º)

<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(
                callback,
                text,
                keyboards['settings_menu']
            )
            
            self.logger.info("‚úÖ Agent settings menu displayed with voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent settings", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    # ===== AGENT EDITING =====
    
    async def cb_edit_agent_name(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìù Edit agent name started", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            text = f"""
üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {agent_info['name']}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞. –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
‚Ä¢ –û—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ–Ω—è—Ç–Ω—ã–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–º–µ–Ω:</b>
‚Ä¢ "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
‚Ä¢ "–î–µ–ª–æ–≤–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"
‚Ä¢ "SMM –ø–æ–º–æ—â–Ω–∏–∫ Pro"
‚Ä¢ "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä–µ—Ä–∞–π—Ç–µ—Ä"

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò–º—è –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞. OpenAI –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–µ–º –∂–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è.

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(
                callback,
                text,
                keyboards['back_to_settings']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            await state.update_data(
                current_agent_name=agent_info['name'],
                agent_id=agent_info.get('id')
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.editing_agent_name)
            
            self.logger.info("‚úÖ Agent name editing flow started", 
                           bot_id=self.bot_id,
                           current_name=agent_info['name'],
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent name editing", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏", show_alert=True)
    
    async def handle_edit_agent_name_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìù Edit agent name input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            new_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
            if not new_name:
                await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_name) < 3:
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_name) > 100:
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_name = data.get('current_agent_name')
            
            if not current_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if new_name == current_name:
                await message.answer("‚ùå –ù–æ–≤–æ–µ –∏–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            processing_msg = await message.answer(
                f"‚è≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞...</b>\n\n"
                f"üìù –°—Ç–∞—Ä–æ–µ –∏–º—è: {current_name}\n"
                f"‚ú® –ù–æ–≤–æ–µ –∏–º—è: {new_name}\n\n"
                f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.update_agent(
                bot_id=self.bot_id,
                agent_name=new_name
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                text = f"""
‚úÖ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>

üìù <b>–°—Ç–∞—Ä–æ–µ –∏–º—è:</b> {current_name}
‚ú® <b>–ù–æ–≤–æ–µ –∏–º—è:</b> {new_name}
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {self._format_date()}

üéØ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ –ò–º—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="content_edit_instructions")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await message.answer(text, reply_markup=keyboard)
                
                self.logger.info("‚úÖ Agent name updated successfully", 
                               bot_id=self.bot_id,
                               old_name=current_name,
                               new_name=new_name)
            else:
                # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–¢–µ–∫—É—â–µ–µ –∏–º—è –æ—Å—Ç–∞–µ—Ç—Å—è:</b> {current_name}
"""
                
                keyboards = await self._get_content_keyboards()
                
                await message.answer(
                    text,
                    reply_markup=keyboards['back_to_settings']
                )
                
                self.logger.error("‚ùå Agent name update failed", 
                               bot_id=self.bot_id,
                               old_name=current_name,
                               new_name=new_name,
                               error=result.get('error'),
                               message=error_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to handle agent name edit input", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_edit_agent_instructions(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìã Edit agent instructions started", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            text = f"""
üìã <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_info['name']}

üìù <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{agent_info['instructions']}</i>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
‚Ä¢ –û—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ß–µ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è –ò–ò
‚Ä¢ –û–ø–∏—Å—ã–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏

üé§ <b>–ù–û–í–û–ï: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ì–û–õ–û–°–û–ú!</b>

üìã <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>

<b>–î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π:</b>
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤ –ª–µ–≥–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∂–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π."

<b>–î–ª—è –±–∏–∑–Ω–µ—Å–∞:</b>
"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ —ç–º–æ—Ü–∏–∏, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –∏ –≤—ã–≥–æ–¥–∞—Ö."

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã. OpenAI –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ üé§ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(
                callback,
                text,
                keyboards['back_to_settings']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                current_instructions=agent_info['instructions'],
                agent_id=agent_info.get('id'),
                agent_name=agent_info['name']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.editing_agent_instructions)
            
            self.logger.info("‚úÖ Agent instructions editing flow started with voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           current_instructions_length=len(agent_info['instructions']),
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent instructions editing", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", show_alert=True)
    
    async def handle_edit_agent_instructions_input(self, message: Message, state: FSMContext):
        """üé§ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)"""
        self.logger.info("üìã Edit agent instructions input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        has_text=bool(message.text),
                        has_voice=bool(message.voice),
                        instructions_length=len(message.text or "") if message.text else 0)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            new_instructions = None
            
            # üé§ –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
            if message.voice:
                self.logger.info("üé§ Voice instructions for editing received, transcribing...", 
                                user_id=message.from_user.id,
                                bot_id=self.bot_id)
                
                await message.bot.send_chat_action(message.chat.id, "typing")
                
                new_instructions = await self._transcribe_voice_message(message.voice)
                
                if not new_instructions:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                    return
                
                self.logger.info("‚úÖ Voice instructions for editing transcribed successfully", 
                               user_id=message.from_user.id,
                               bot_id=self.bot_id,
                               transcribed_length=len(new_instructions))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
                await message.answer(f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n<i>{new_instructions[:200]}{'...' if len(new_instructions) > 200 else ''}</i>\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
                
            elif message.text:
                new_instructions = message.text.strip()
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if not new_instructions:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_instructions) < 10:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                return
            
            if len(new_instructions) > 2000:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_instructions = data.get('current_instructions')
            agent_name = data.get('agent_name')
            
            if not current_instructions or not agent_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
            if new_instructions == current_instructions:
                await message.answer("‚ùå –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            input_method = "üé§ –≥–æ–ª–æ—Å–æ–º" if message.voice else "üìù —Ç–µ–∫—Å—Ç–æ–º"
            
            text = f"""
üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_name}

üìù <b>–°—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(current_instructions, 300)}</i>

‚ú® <b>–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤–≤–µ–¥–µ–Ω—ã {input_method}):</b>
<i>{self._truncate_text(new_instructions, 300)}</i>

üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –î–ª–∏–Ω–∞: {len(current_instructions)} ‚Üí {len(new_instructions)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if len(new_instructions) > len(current_instructions) else ''}{len(new_instructions) - len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞: {input_method}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
‚Ä¢ –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å (–Ω–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ)

<b>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?</b>
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                current_instructions=current_instructions,
                new_instructions=new_instructions,
                agent_name=agent_name,
                input_method=input_method
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="content_confirm_instructions_update")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_settings")]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
            self.logger.info("‚úÖ Agent instructions change preview shown with voice support", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           old_length=len(current_instructions),
                           new_length=len(new_instructions),
                           input_method=input_method)
            
        except Exception as e:
            self.logger.error("üí• Failed to handle agent instructions edit input with voice", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_confirm_instructions_update(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚úÖ Instructions update confirmation received", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_instructions = data.get('current_instructions')
            new_instructions = data.get('new_instructions')
            agent_name = data.get('agent_name')
            input_method = data.get('input_method', 'üìù —Ç–µ–∫—Å—Ç–æ–º')
            
            if not all([current_instructions, new_instructions, agent_name]):
                await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._safe_edit_or_answer(
                callback,
                f"‚è≥ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞ '{agent_name}'...</b>\n\n"
                f"üìã –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω—ã {input_method}\n"
                f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞...\n"
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n"
                f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.update_agent(
                bot_id=self.bot_id,
                instructions=new_instructions
            )
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                text = f"""
‚úÖ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_name}
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {self._format_date()}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã:</b> {'+' if len(new_instructions) > len(current_instructions) else ''}{len(new_instructions) - len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤
üìã <b>–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:</b> {input_method}

üìù <b>–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(new_instructions, 400)}</i>

üéØ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
‚Ä¢ –í—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

<b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –¢–µ—Å—Ç —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await self._safe_edit_or_answer(callback, text, keyboard)
                
                self.logger.info("‚úÖ Agent instructions updated successfully with voice support", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               old_length=len(current_instructions),
                               new_length=len(new_instructions),
                               input_method=input_method)
            else:
                # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.</b>

<b>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_edit_instructions")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await self._safe_edit_or_answer(callback, text, keyboard)
                
                self.logger.error("‚ùå Agent instructions update failed", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               error=result.get('error'),
                               message=error_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm instructions update", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await self._safe_edit_or_answer(
                callback,
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await state.clear()
    
    # ===== AGENT DELETION =====
    
    async def cb_delete_agent(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üóëÔ∏è Delete agent confirmation requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_info['name']}
üí∞ <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {self._format_number(stats.get('tokens_used', 0))}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞:
‚Ä¢ –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ OpenAI
‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
‚Ä¢ –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ üì∑ –§–æ—Ç–æ, üé• –≤–∏–¥–µ–æ, üé¨ GIF, üéµ –∞—É–¥–∏–æ, üìÑ –¥–æ–∫—É–º–µ–Ω—Ç—ã, üé≠ —Å—Ç–∏–∫–µ—Ä—ã
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞?</b>

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
"""
            
            keyboards = await self._get_content_keyboards()
            
            await self._safe_edit_or_answer(
                callback,
                text,
                keyboards['delete_confirmation']
            )
            
            self.logger.info("üóëÔ∏è Agent deletion confirmation shown", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent deletion confirmation", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    async def cb_confirm_delete_agent(self, callback: CallbackQuery):
        """‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üóëÔ∏è Agent deletion confirmed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
            await self._safe_edit_or_answer(
                callback,
                "‚è≥ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...</b>\n\n"
                "ü§ñ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ OpenAI...\n"
                "üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n"
                "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.delete_agent(self.bot_id, force=True)
            
            if result['success']:
                deleted_agent = result.get('deleted_agent', {})
                
                text = f"""
‚úÖ <b>–ê–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ</b>

üë§ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç:</b> {deleted_agent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
ü§ñ <b>OpenAI –æ—á–∏—â–µ–Ω:</b> {'‚úÖ' if deleted_agent.get('had_openai_integration') else '–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è'}

üìä <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

üîß <b>–ß—Ç–æ —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:</b>
‚Ä¢ –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ (üì∑üé•üé¨üéµüìÑüé≠)
‚Ä¢ –ê–ª—å–±–æ–º—ã –∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã

üí° <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.</b>

<b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞", callback_data="content_create_agent")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await self._safe_edit_or_answer(callback, text, keyboard)
                
                self.logger.info("‚úÖ Content agent deleted successfully", 
                               bot_id=self.bot_id,
                               deleted_agent_name=deleted_agent.get('name'))
                               
            else:
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

–ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
                
                keyboards = await self._get_content_keyboards()
                
                await self._safe_edit_or_answer(
                    callback,
                    text,
                    keyboards['back_to_main']
                )
                
                self.logger.error("‚ùå Content agent deletion failed", 
                               bot_id=self.bot_id,
                               error=result.get('error'),
                               message=error_message)
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm agent deletion", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await self._safe_edit_or_answer(
                callback,
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
