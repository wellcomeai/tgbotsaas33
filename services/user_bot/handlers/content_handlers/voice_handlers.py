"""
–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI Whisper API
2. üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø—Ä–∞–≤–∫–∏, —Ä–µ—Ä–∞–π—Ç—ã)
3. üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ fallback —Å—Ü–µ–Ω–∞—Ä–∏–∏
4. üîë –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
5. üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
6. üóÇÔ∏è –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∏—Ö –æ—á–∏—Å—Ç–∫–∞
7. üåê HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI API
8. üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
"""

import structlog
import tempfile
import os
from typing import Optional
from aiogram.types import Voice, Message


class VoiceHandlersMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    async def _transcribe_voice_message(self, voice: Voice) -> str:
        """üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper API"""
        self.logger.info("üé§ Starting voice transcription process for content", 
                        voice_file_id=voice.file_id,
                        voice_duration=getattr(voice, 'duration', 'unknown'),
                        voice_file_size=getattr(voice, 'file_size', 'unknown'),
                        bot_id=self.bot_id)
        
        try:
            # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            try:
                from config import settings
                import os
                self.logger.info("‚úÖ Settings and os imported successfully for voice transcription")
            except ImportError as e:
                self.logger.error("‚ùå Failed to import settings or os for voice", error=str(e))
                return ""
            
            # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            api_key = None
            key_source = ""
            
            # –°–ø–æ—Å–æ–± 1: –ò–∑ settings.OPENAI_API_KEY
            try:
                api_key = getattr(settings, 'OPENAI_API_KEY', None)
                if api_key:
                    key_source = "settings.OPENAI_API_KEY"
                    self.logger.info("‚úÖ API key found in settings for voice", source=key_source)
            except Exception as e:
                self.logger.warning("‚ö†Ô∏è Could not get API key from settings for voice", error=str(e))
            
            # –°–ø–æ—Å–æ–± 2: –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
            if not api_key:
                api_key = os.environ.get('OPENAI_API_KEY')
                if api_key:
                    key_source = "os.environ['OPENAI_API_KEY']"
                    self.logger.info("‚úÖ API key found in environment for voice", source=key_source)
            
            # –°–ø–æ—Å–æ–± 3: –ò–∑ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if not api_key:
                possible_names = [
                    'OPENAI_TOKEN', 
                    'OPENAI_SECRET_KEY', 
                    'GPT_API_KEY',
                    'OPENAI_API_TOKEN'
                ]
                for name in possible_names:
                    api_key = os.environ.get(name)
                    if api_key:
                        key_source = f"os.environ['{name}']"
                        self.logger.info("‚úÖ API key found in environment for voice", source=key_source)
                        break
            
            if not api_key:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                openai_vars = [k for k in os.environ.keys() if 'OPENAI' in k.upper() or 'GPT' in k.upper()]
                settings_attrs = [attr for attr in dir(settings) if not attr.startswith('_')]
                
                self.logger.error("‚ùå OpenAI API key not found anywhere for voice transcription", 
                                env_openai_vars=openai_vars,
                                settings_attrs=settings_attrs[:10])
                return ""
            
            self.logger.info("‚úÖ OpenAI API key found for voice transcription", 
                           source=key_source,
                           key_length=len(api_key) if api_key else 0,
                           key_preview=f"{api_key[:10]}...{api_key[-4:]}" if api_key and len(api_key) > 14 else "SHORT_KEY")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Whisper
            whisper_model = getattr(settings, 'OPENAI_WHISPER_MODEL', 'whisper-1')
            self.logger.info("‚úÖ Whisper model for content", model=whisper_model)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º bot instance
            bot = self.bot_config.get('bot')
            if not bot:
                self.logger.error("‚ùå Bot instance not available in bot_config for voice", 
                                bot_config_keys=list(self.bot_config.keys()))
                return ""
            
            self.logger.info("‚úÖ Bot instance available for voice", bot_type=type(bot).__name__)
            
            # 5. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            try:
                import aiohttp
                import tempfile
                self.logger.info("‚úÖ Required libraries imported for voice")
            except ImportError as e:
                self.logger.error("‚ùå Failed to import required libraries for voice", error=str(e))
                return ""
            
            # 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            self.logger.info("üì• Getting voice file info for content...")
            try:
                file_info = await bot.get_file(voice.file_id)
                self.logger.info("‚úÖ Voice file info retrieved for content", 
                               file_path=file_info.file_path,
                               file_size=getattr(file_info, 'file_size', 'unknown'))
            except Exception as e:
                self.logger.error("‚ùå Failed to get voice file info for content", error=str(e))
                return ""
            
            # 7. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            self.logger.info("üìÅ Creating temporary file for voice...")
            try:
                temp_file = tempfile.NamedTemporaryFile(suffix='.ogg', delete=False)
                temp_file_path = temp_file.name
                temp_file.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞—Ç—å
                self.logger.info("‚úÖ Temporary file created for voice", path=temp_file_path)
            except Exception as e:
                self.logger.error("‚ùå Failed to create temporary file for voice", error=str(e))
                return ""
            
            try:
                # 8. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                self.logger.info("‚¨áÔ∏è Downloading voice file for content...")
                try:
                    with open(temp_file_path, 'wb') as temp_file_handle:
                        await bot.download_file(file_info.file_path, temp_file_handle)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(temp_file_path)
                    self.logger.info("‚úÖ Voice file downloaded for content", size_bytes=file_size)
                    
                    if file_size == 0:
                        self.logger.error("‚ùå Downloaded voice file is empty")
                        return ""
                        
                except Exception as e:
                    self.logger.error("‚ùå Failed to download voice file for content", error=str(e))
                    return ""
                
                # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper API
                self.logger.info("üåê Sending to OpenAI Whisper API for content...")
                try:
                    async with aiohttp.ClientSession() as session:
                        with open(temp_file_path, 'rb') as audio_file:
                            data = aiohttp.FormData()
                            data.add_field('file', audio_file, filename='voice.ogg')
                            data.add_field('model', whisper_model)
                            data.add_field('language', 'ru')
                            
                            headers = {
                                'Authorization': f'Bearer {api_key}'
                            }
                            
                            self.logger.info("üì° Making API request to Whisper for content...", 
                                           url='https://api.openai.com/v1/audio/transcriptions',
                                           model=whisper_model,
                                           language='ru')
                            
                            async with session.post(
                                'https://api.openai.com/v1/audio/transcriptions',
                                data=data,
                                headers=headers,
                                timeout=30
                            ) as response:
                                self.logger.info("üì® Received Whisper API response for content", 
                                              status=response.status,
                                              content_type=response.content_type,
                                              content_length=response.headers.get('content-length', 'unknown'))
                                
                                if response.status == 200:
                                    result = await response.json()
                                    transcribed_text = result.get('text', '').strip()
                                    
                                    self.logger.info("‚úÖ Voice transcription successful for content", 
                                                  text_length=len(transcribed_text),
                                                  preview=transcribed_text[:100] if transcribed_text else "EMPTY")
                                    return transcribed_text
                                elif response.status == 401:
                                    error_text = await response.text()
                                    self.logger.error("‚ùå Whisper API authentication failed for content", 
                                                   status=response.status,
                                                   error=error_text,
                                                   key_source=key_source)
                                    return ""
                                elif response.status == 429:
                                    error_text = await response.text()
                                    self.logger.error("‚ùå Whisper API rate limit exceeded for content", 
                                                   status=response.status,
                                                   error=error_text)
                                    return ""
                                else:
                                    error_text = await response.text()
                                    self.logger.error("‚ùå Whisper API error for content", 
                                                   status=response.status,
                                                   error=error_text,
                                                   headers=dict(response.headers))
                                    return ""
                                    
                except Exception as e:
                    self.logger.error("‚ùå API request failed for content voice", 
                                    error=str(e), 
                                    error_type=type(e).__name__)
                    return ""
            finally:
                # 10. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    if os.path.exists(temp_file_path):
                        os.unlink(temp_file_path)
                        self.logger.info("üóëÔ∏è Temporary voice file cleaned up")
                except Exception as e:
                    self.logger.warning("‚ö†Ô∏è Failed to cleanup temp voice file", error=str(e))
            
        except Exception as e:
            self.logger.error("üí• Unexpected error in voice transcription for content", 
                            error=str(e), 
                            error_type=type(e).__name__,
                            exc_info=True)
            return ""
    
    async def _get_openai_api_key(self) -> Optional[str]:
        """üîë –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OpenAI API –∫–ª—é—á–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                from config import settings
                import os
            except ImportError as e:
                self.logger.error("‚ùå Failed to import settings or os", error=str(e))
                return None
            
            api_key = None
            key_source = ""
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫ 1: settings.OPENAI_API_KEY
            try:
                api_key = getattr(settings, 'OPENAI_API_KEY', None)
                if api_key:
                    key_source = "settings.OPENAI_API_KEY"
            except Exception as e:
                self.logger.warning("‚ö†Ô∏è Could not get API key from settings", error=str(e))
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
            if not api_key:
                api_key = os.environ.get('OPENAI_API_KEY')
                if api_key:
                    key_source = "os.environ['OPENAI_API_KEY']"
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if not api_key:
                alternative_names = [
                    'OPENAI_TOKEN', 
                    'OPENAI_SECRET_KEY', 
                    'GPT_API_KEY',
                    'OPENAI_API_TOKEN'
                ]
                for name in alternative_names:
                    api_key = os.environ.get(name)
                    if api_key:
                        key_source = f"os.environ['{name}']"
                        break
            
            if api_key:
                self.logger.info("‚úÖ OpenAI API key found", 
                               source=key_source,
                               key_length=len(api_key),
                               key_preview=f"{api_key[:10]}...{api_key[-4:]}" if len(api_key) > 14 else "SHORT_KEY")
                return api_key
            else:
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                openai_vars = [k for k in os.environ.keys() if 'OPENAI' in k.upper() or 'GPT' in k.upper()]
                self.logger.error("‚ùå OpenAI API key not found in any source", 
                                env_openai_vars=openai_vars)
                return None
                
        except Exception as e:
            self.logger.error("üí• Unexpected error getting OpenAI API key", 
                            error=str(e), 
                            error_type=type(e).__name__)
            return None
    
    async def _process_voice_input(self, message: Message, context: str = "general") -> Optional[str]:
        """üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if not message.voice:
            return None
        
        self.logger.info("üé§ Processing voice input", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        context=context,
                        voice_duration=getattr(message.voice, 'duration', 'unknown'))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        transcribed_text = await self._transcribe_voice_message(message.voice)
        
        if not transcribed_text:
            self.logger.warning("‚ö†Ô∏è Voice transcription failed", 
                               user_id=message.from_user.id,
                               context=context)
            return None
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        self.logger.info("‚úÖ Voice input processed successfully", 
                        user_id=message.from_user.id,
                        context=context,
                        transcribed_length=len(transcribed_text),
                        preview=transcribed_text[:100])
        
        return transcribed_text
    
    async def _show_voice_transcription_preview(self, message: Message, transcribed_text: str, context: str = ""):
        """üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        context_emoji = {
            "instructions": "üìã",
            "edit_instructions": "‚úèÔ∏è", 
            "rewrite": "üìù",
            "general": "üé§"
        }.get(context, "üé§")
        
        context_name = {
            "instructions": "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "edit_instructions": "–ø—Ä–∞–≤–∫–∏",
            "rewrite": "—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞",
            "general": "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        }.get(context, "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        preview_text = transcribed_text[:200] if len(transcribed_text) > 200 else transcribed_text
        ellipsis = "..." if len(transcribed_text) > 200 else ""
        
        preview_message = f"{context_emoji} <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {context_name}:</b>\n<i>{preview_text}{ellipsis}</i>\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
        
        await message.answer(preview_message)
    
    def _validate_transcribed_text(self, text: str, min_length: int = 5, max_length: int = 4000) -> tuple[bool, str]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return False, "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        
        if len(text) < min_length:
            return False, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(text) > max_length:
            return False, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
        readable_chars = sum(1 for char in text if char.isalnum() or char.isspace() or char in '.,!?;:-()[]{}"\'/\\')
        if len(text) > 0 and readable_chars / len(text) < 0.5:
            return False, "–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
        
        return True, "OK"
    
    def _get_voice_error_message(self, error_type: str, context: str = "general") -> str:
        """‚ùå –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        context_name = {
            "instructions": "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
            "edit_instructions": "–ø—Ä–∞–≤–æ–∫", 
            "rewrite": "—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞",
            "general": "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        }.get(context, "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        error_messages = {
            "transcription_failed": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å {context_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
            "api_key_missing": f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            "api_error": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
            "file_error": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
            "validation_failed": f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
        }
        
        return error_messages.get(error_type, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {context_name}")
    
    def _get_voice_success_message(self, context: str = "general") -> str:
        """‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞"""
        success_messages = {
            "instructions": "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
            "edit_instructions": "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
            "rewrite": "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
            "general": "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!"
        }
        
        return success_messages.get(context, "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
    
    def _is_voice_supported(self) -> bool:
        """üé§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            from config import settings
            import os
            
            api_key = getattr(settings, 'OPENAI_API_KEY', None) or os.environ.get('OPENAI_API_KEY')
            
            if not api_key:
                self.logger.warning("‚ö†Ô∏è Voice messages not supported: OpenAI API key not found")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            try:
                import aiohttp
                import tempfile
                return True
            except ImportError as e:
                self.logger.warning("‚ö†Ô∏è Voice messages not supported: missing libraries", error=str(e))
                return False
                
        except Exception as e:
            self.logger.error("üí• Error checking voice support", error=str(e))
            return False
    
    def _get_voice_capabilities_info(self) -> str:
        """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not self._is_voice_supported():
            return "üé§ ‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"
        
        return """üé§ ‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b>
‚Ä¢ üìã –ó–∞–ø–∏—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –≥–æ–ª–æ—Å–æ–º
‚Ä¢ ‚úèÔ∏è –ü—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–º  
‚Ä¢ üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –≥–æ–ª–æ—Å–æ–º
‚Ä¢ üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞ –≥–æ–ª–æ—Å–æ–º
‚Ä¢ üåê –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI Whisper API
‚Ä¢ üá∑üá∫ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
