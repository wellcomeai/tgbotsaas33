"""
–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ –∏ –∞–ª—å–±–æ–º–∞–º–∏ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏).

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø) —á–µ—Ä–µ–∑ aiogram-media-group
2. üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
3. üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
4. üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫
5. üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
6. üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback —Å—Ü–µ–Ω–∞—Ä–∏–∏
7. ‚ú® –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
8. üèóÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MediaGroupBuilder –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
"""

from typing import List, Dict
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from services.content_agent import content_agent_service

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    MEDIA_GROUP_AVAILABLE = False

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
try:
    from ...states import ContentStates
    CONTENT_STATES_AVAILABLE = True
except ImportError:
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False


class MediaHandlersMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ –∏ –∞–ª—å–±–æ–º–∞–º–∏"""
    
    async def handle_media_group_rewrite_input(self, messages: List[Message], state: FSMContext):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Å—ã–ª–æ–∫"""
        
        self.logger.info("üì∏ Processing media group for rewrite with links support", 
                        bot_id=self.bot_id,
                        media_count=len(messages),
                        media_group_id=messages[0].media_group_id)
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await messages[0].answer(
                f"‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–ª—å–±–æ–º ({len(messages)} —Ñ–∞–π–ª–æ–≤)...</b>\n\n"
                f"üîç –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...\n"
                f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...\n"
                f"üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫...\n"
                f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç—É...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-20 —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å caption)
            original_text = ""
            for message in messages:
                text = message.text or message.caption or ""
                if text:
                    original_text = text.strip()
                    break
            
            if not original_text:
                await processing_msg.delete()
                await messages[0].answer(
                    "‚ùå <b>–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–ª—å–±–æ–º–µ</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –∞–ª—å–±–æ–º—É –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞."
                )
                return
            
            if len(original_text) < 3:
                await processing_msg.delete()
                await messages[0].answer(
                    "‚ùå <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 3 —Å–∏–º–≤–æ–ª–∞."
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
            media_group_info = []
            for i, message in enumerate(messages):
                media_info = content_agent_service.extract_media_info(message)
                if media_info:
                    media_info['position'] = i
                    media_info['message_id'] = message.message_id
                    media_group_info.append(media_info)
            
            # ‚ú® –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
            links_info = {'has_links': False, 'links': {}, 'total_links': 0}
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ content_agent_service
                links_info = content_agent_service.extract_links_from_message(messages[0])
            except Exception as e:
                self.logger.warning("‚ö†Ô∏è Failed to extract links from media group", error=str(e))
            
            self.logger.info("üìä Media group analysis completed with links", 
                           bot_id=self.bot_id,
                           text_length=len(original_text),
                           media_files=len(media_group_info),
                           has_links=links_info['has_links'],
                           total_links=links_info['total_links'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ ContentManager
            rewrite_result = await content_agent_service.content_manager.process_content_rewrite(
                bot_id=self.bot_id,
                original_text=original_text,
                media_info={
                    'type': 'media_group',
                    'count': len(messages),
                    'files': media_group_info,
                    'media_group_id': messages[0].media_group_id
                },
                links_info=links_info,  # ‚ú® –ù–û–í–û–ï
                user_id=messages[0].from_user.id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if rewrite_result and rewrite_result.get('success'):
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Ä–∞–π—Ç –∞–ª—å–±–æ–º–∞
                await self._send_media_group_rewrite_result(messages, rewrite_result)
                
                self.logger.info("‚úÖ Media group rewritten successfully with links", 
                               bot_id=self.bot_id,
                               media_count=len(messages),
                               tokens_used=rewrite_result.get('tokens', {}).get('total_tokens', 0),
                               has_links=links_info['has_links'])
            else:
                # –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞
                from .rewrite_handlers import RewriteHandlersMixin
                await self._send_rewrite_error(messages[0], rewrite_result or {'error': 'unknown'})
                
        except Exception as e:
            self.logger.error("üí• Failed to process media group rewrite with links", 
                            bot_id=self.bot_id,
                            media_group_id=messages[0].media_group_id,
                            error=str(e))
            await messages[0].answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å–±–æ–º–∞")
    
    async def _send_media_group_rewrite_result(self, original_messages: List[Message], result: Dict):
        """üîß –£–ü–†–û–©–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞ –∞–ª—å–±–æ–º–∞ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–µ—Ç–æ–¥"""
        
        # üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ result
        content = self._safe_get_from_result(result, 'content', {})
        tokens = self._safe_get_from_result(result, 'tokens', {})
        media_info = self._safe_get_from_result(result, 'media_info', {})
        agent_info = self._safe_get_from_result(result, 'agent', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        if not content or not isinstance(content, dict):
            self.logger.error("‚ùå No content in media group result", 
                             bot_id=self.bot_id,
                             result_keys=list(result.keys()) if isinstance(result, dict) else 'not_dict')
            await original_messages[0].answer(
                "‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        rewritten_text = content.get('rewritten_text', '–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω')
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞
            save_success = await content_agent_service.content_manager.save_rewrite_result(
                self.bot_id, result
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboards = await self._get_content_keyboards()
            post_actions_keyboard = keyboards['post_actions']
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if media_info and media_info.get('type') == 'media_group':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
                if not media_info.get('files'):
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    files_info = []
                    for i, message in enumerate(original_messages):
                        if message.photo:
                            largest_photo = max(message.photo, key=lambda x: x.width * x.height)
                            files_info.append({
                                'type': 'photo',
                                'file_id': largest_photo.file_id,
                                'position': i,
                                'message_id': message.message_id
                            })
                        elif message.video:
                            files_info.append({
                                'type': 'video',
                                'file_id': message.video.file_id,
                                'position': i,
                                'message_id': message.message_id
                            })
                        elif message.animation:
                            files_info.append({
                                'type': 'animation',
                                'file_id': message.animation.file_id,
                                'position': i,
                                'message_id': message.message_id
                            })
                        elif message.audio:
                            files_info.append({
                                'type': 'audio',
                                'file_id': message.audio.file_id,
                                'position': i,
                                'message_id': message.message_id
                            })
                        elif message.document:
                            files_info.append({
                                'type': 'document',
                                'file_id': message.document.file_id,
                                'position': i,
                                'message_id': message.message_id
                            })
                        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –∞–ª—å–±–æ–º–∞—Ö Telegram
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º media_info —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
                    media_info['files'] = files_info
                    self.logger.info("‚úÖ Restored media files info from original messages", 
                                   bot_id=self.bot_id, files_count=len(files_info))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ _send_media_with_text
                await self._send_media_with_text(
                    original_messages[0],
                    rewritten_text,
                    media_info,
                    post_actions_keyboard
                )
            else:
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –º–µ–¥–∏–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                await original_messages[0].answer(
                    rewritten_text, 
                    reply_markup=post_actions_keyboard
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.logger.info("‚úÖ Clean media group rewrite result sent via unified method", 
                           bot_id=self.bot_id,
                           agent_name=agent_info.get('name', 'Unknown'),
                           media_files=len(original_messages),
                           tokens_used=tokens.get('total_tokens', 0),
                           original_length=len(content.get('original_text', '')),
                           rewritten_length=len(rewritten_text))
            
        except Exception as e:
            self.logger.error("üí• Failed to send clean media group rewrite result", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            fallback_text = rewritten_text
            
            if len(fallback_text) > 4096:
                fallback_text = fallback_text[:4093] + "..."
            
            keyboards = await self._get_content_keyboards()
            await original_messages[0].answer(
                f"{fallback_text}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}",
                reply_markup=keyboards['post_actions']
            )
    
    async def _send_media_with_text(self, message: Message, text: str, media_info: Dict, keyboard):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø)"""
        try:
            media_type = media_info['type']
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            if media_type == 'media_group':
                # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º MediaGroupBuilder
                media_builder = MediaGroupBuilder(caption=text)
                
                files_info = media_info.get('files', [])
                media_added = 0
                
                for file_info in files_info:
                    file_type = file_info.get('type')
                    file_id = file_info.get('file_id')
                    
                    if file_type == 'photo' and file_id:
                        media_builder.add_photo(media=file_id)
                        media_added += 1
                    elif file_type == 'video' and file_id:
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'animation' and file_id:
                        # GIF –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ video
                        media_builder.add_video(media=file_id)
                        media_added += 1
                    elif file_type == 'audio' and file_id:
                        media_builder.add_audio(media=file_id)
                        media_added += 1
                    elif file_type == 'document' and file_id:
                        media_builder.add_document(media=file_id)
                        media_added += 1
                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞—Ö
                
                if media_added > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_group = media_builder.build()
                    await message.answer_media_group(media=media_group)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await message.answer("‚ú® <b>–†–µ—Ä–∞–π—Ç –≥–æ—Ç–æ–≤!</b>", reply_markup=keyboard)
                    
                    self.logger.debug("üì∏ Media group sent with clean rewrite result", 
                                    bot_id=self.bot_id, media_files=media_added)
                else:
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
                    await message.answer(text, reply_markup=keyboard)
                    self.logger.warning("‚ö†Ô∏è No media files added to group, sent text only", bot_id=self.bot_id)
                
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            file_id = media_info.get('file_id')
            if not file_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç file_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(text, reply_markup=keyboard)
                self.logger.warning("‚ö†Ô∏è No file_id found, sent text only", 
                                   bot_id=self.bot_id, media_type=media_type)
                return
            
            if media_type == 'photo':
                await message.answer_photo(
                    photo=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üì∑ Photo sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'video':
                await message.answer_video(
                    video=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé• Video sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'animation':
                await message.answer_animation(
                    animation=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé¨ Animation sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'audio':
                await message.answer_audio(
                    audio=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üéµ Audio sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'document':
                await message.answer_document(
                    document=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üìÑ Document sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'sticker':
                # –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                await message.answer_sticker(sticker=file_id)
                await message.answer(text, reply_markup=keyboard)
                self.logger.debug("üé≠ Sticker sent with separate text", bot_id=self.bot_id)
                
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                await message.answer(text, reply_markup=keyboard)
                self.logger.debug("üìÑ Fallback text sent (unsupported media)", 
                                bot_id=self.bot_id, media_type=media_type)
                
        except Exception as e:
            self.logger.error("üí• Failed to send media with clean text", 
                            media_type=media_info.get('type'),
                            error=str(e),
                            exc_info=True)
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text, reply_markup=keyboard)
    
    def _extract_media_info(self, message: Message) -> Dict:
        """üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if message.photo:
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                largest_photo = max(message.photo, key=lambda x: x.width * x.height)
                return {
                    'type': 'photo',
                    'file_id': largest_photo.file_id,
                    'file_unique_id': largest_photo.file_unique_id,
                    'width': largest_photo.width,
                    'height': largest_photo.height,
                    'file_size': getattr(largest_photo, 'file_size', None)
                }
                
            elif message.video:
                return {
                    'type': 'video',
                    'file_id': message.video.file_id,
                    'file_unique_id': message.video.file_unique_id,
                    'width': message.video.width,
                    'height': message.video.height,
                    'duration': message.video.duration,
                    'file_size': getattr(message.video, 'file_size', None),
                    'mime_type': getattr(message.video, 'mime_type', None)
                }
                
            elif message.animation:
                return {
                    'type': 'animation',
                    'file_id': message.animation.file_id,
                    'file_unique_id': message.animation.file_unique_id,
                    'width': message.animation.width,
                    'height': message.animation.height,
                    'duration': message.animation.duration,
                    'file_size': getattr(message.animation, 'file_size', None),
                    'mime_type': getattr(message.animation, 'mime_type', None)
                }
                
            elif message.audio:
                return {
                    'type': 'audio',
                    'file_id': message.audio.file_id,
                    'file_unique_id': message.audio.file_unique_id,
                    'duration': message.audio.duration,
                    'file_size': getattr(message.audio, 'file_size', None),
                    'mime_type': getattr(message.audio, 'mime_type', None),
                    'title': getattr(message.audio, 'title', None),
                    'performer': getattr(message.audio, 'performer', None)
                }
                
            elif message.document:
                return {
                    'type': 'document',
                    'file_id': message.document.file_id,
                    'file_unique_id': message.document.file_unique_id,
                    'file_name': getattr(message.document, 'file_name', None),
                    'file_size': getattr(message.document, 'file_size', None),
                    'mime_type': getattr(message.document, 'mime_type', None)
                }
                
            elif message.sticker:
                return {
                    'type': 'sticker',
                    'file_id': message.sticker.file_id,
                    'file_unique_id': message.sticker.file_unique_id,
                    'width': message.sticker.width,
                    'height': message.sticker.height,
                    'is_animated': message.sticker.is_animated,
                    'is_video': message.sticker.is_video,
                    'emoji': getattr(message.sticker, 'emoji', None),
                    'set_name': getattr(message.sticker, 'set_name', None)
                }
                
            elif message.voice:
                return {
                    'type': 'voice',
                    'file_id': message.voice.file_id,
                    'file_unique_id': message.voice.file_unique_id,
                    'duration': message.voice.duration,
                    'file_size': getattr(message.voice, 'file_size', None),
                    'mime_type': getattr(message.voice, 'mime_type', None)
                }
                
            elif message.video_note:
                return {
                    'type': 'video_note',
                    'file_id': message.video_note.file_id,
                    'file_unique_id': message.video_note.file_unique_id,
                    'length': message.video_note.length,
                    'duration': message.video_note.duration,
                    'file_size': getattr(message.video_note, 'file_size', None)
                }
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return None
            
        except Exception as e:
            self.logger.error("üí• Failed to extract media info", 
                            message_id=message.message_id,
                            error=str(e))
            return None
    
    def _get_supported_media_types(self) -> List[str]:
        """üìé –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞"""
        return [
            'photo',       # üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            'video',       # üé• –í–∏–¥–µ–æ
            'animation',   # üé¨ GIF/–∞–Ω–∏–º–∞—Ü–∏–∏
            'audio',       # üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã
            'document',    # üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
            'sticker',     # üé≠ –°—Ç–∏–∫–µ—Ä—ã
            'voice',       # üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            'video_note'   # üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏)
        ]
    
    def _is_media_supported(self, message: Message) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –º–µ–¥–∏–∞"""
        supported_types = self._get_supported_media_types()
        
        for media_type in supported_types:
            if hasattr(message, media_type) and getattr(message, media_type):
                return True
        
        return False
    
    def _get_media_type_emoji(self, media_type: str) -> str:
        """üé® –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∂–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
        emoji_map = {
            'photo': 'üì∑',
            'video': 'üé•',
            'animation': 'üé¨',
            'audio': 'üéµ',
            'document': 'üìÑ',
            'sticker': 'üé≠',
            'voice': 'üé§',
            'video_note': 'üé•',
            'media_group': 'üì∏'
        }
        
        return emoji_map.get(media_type, 'üìé')
    
    def _format_media_info(self, media_info: Dict) -> str:
        """üìä –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not media_info:
            return "–ù–µ—Ç –º–µ–¥–∏–∞"
        
        media_type = media_info.get('type', 'unknown')
        emoji = self._get_media_type_emoji(media_type)
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_parts = [f"{emoji} {media_type.title()}"]
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = media_info.get('file_size')
        if file_size:
            size_mb = file_size / (1024 * 1024)
            if size_mb >= 1:
                info_parts.append(f"{size_mb:.1f} MB")
            else:
                size_kb = file_size / 1024
                info_parts.append(f"{size_kb:.0f} KB")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if media_type in ['photo', 'video', 'animation']:
            width = media_info.get('width')
            height = media_info.get('height')
            if width and height:
                info_parts.append(f"{width}x{height}")
        
        if media_type in ['video', 'animation', 'audio', 'voice']:
            duration = media_info.get('duration')
            if duration:
                minutes = duration // 60
                seconds = duration % 60
                info_parts.append(f"{minutes}:{seconds:02d}")
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if media_type == 'document':
            file_name = media_info.get('file_name')
            if file_name:
                info_parts.append(f'"{file_name}"')
        
        return " ‚Ä¢ ".join(info_parts)
