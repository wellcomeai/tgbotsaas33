import asyncio
import uuid
import hashlib
import time
from datetime import datetime, timedelta
from urllib.parse import urlencode
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BotCommand
)
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import structlog

from config import settings, Emoji, Messages
from database import db
from database.managers.user_manager import UserManager
from services.admin_service import AdminService
from utils.media_handler import MediaHandler, BroadcastMedia
from utils.access_control import check_user_access, require_access


logger = structlog.get_logger()


class BotCreationStates(StatesGroup):
    waiting_for_token = State()


class AdminBroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()
    collecting_media_album = State()  # ‚úÖ –ù–û–í–û–ï: –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞–∞–ª—å–±–æ–º–æ–≤


class MasterBot:
    def __init__(self, bot_manager=None):
        self.bot = Bot(
            token=settings.master_bot_token, 
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher(storage=MemoryStorage())
        self.bot_manager = bot_manager
        
        # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º admin service
        self.admin_service = AdminService(self.bot)
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Setup handlers with admin functionality, media support, file_id command and referral system"""
        # Basic commands
        self.dp.message.register(self.cmd_start, CommandStart())
        self.dp.message.register(self.cmd_help, Command("help"))
        
        # ‚úÖ –ù–û–í–û–ï: –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
        self.dp.message.register(self.cmd_get_file_id, Command("file_id"))
        
        # Main menu callbacks
        self.dp.callback_query.register(self.cb_create_bot, F.data == "create_bot")
        self.dp.callback_query.register(self.cb_my_bots, F.data == "my_bots")
        self.dp.callback_query.register(self.cb_pricing, F.data == "pricing")
        self.dp.callback_query.register(self.cb_how_to_create, F.data == "how_to_create")
        self.dp.callback_query.register(self.cb_back_to_main, F.data == "back_to_main")
        
        # Pricing callbacks
        self.dp.callback_query.register(self.cb_pricing_plan, F.data.startswith("pricing_"))
        
        # Robokassa handlers
        self.dp.callback_query.register(self.cb_pay_subscription, F.data == "pay_subscription")
        self.dp.callback_query.register(self.cb_check_payment_status, F.data == "check_payment_status")
        
        # Token purchase callbacks
        self.dp.callback_query.register(self.cb_buy_tokens, F.data == "buy_tokens")
        self.dp.callback_query.register(self.cb_pay_tokens, F.data == "pay_tokens")
        self.dp.callback_query.register(self.cb_check_tokens_payment, F.data == "check_tokens_payment")
        
        # ‚úÖ –ù–û–í–û–ï: –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ callbacks
        self.dp.callback_query.register(self.cb_referral_program, F.data == "referral_program")
        self.dp.callback_query.register(self.cb_referral_history, F.data == "referral_history")
        
        # Bot management callbacks
        self.dp.callback_query.register(self.cb_bot_details, F.data.startswith("bot_"))
        self.dp.callback_query.register(self.cb_bot_manage, F.data.startswith("manage_"))
        
        # Bot deletion handler
        self.dp.callback_query.register(
            self._confirm_delete_bot, 
            F.data.startswith("confirm_delete_")
        )
        
        # ‚úÖ –ù–û–í–û–ï: Admin callbacks (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
        self.dp.callback_query.register(self.cb_admin_stats, F.data == "admin_stats")
        self.dp.callback_query.register(self.cb_admin_broadcast, F.data == "admin_broadcast")
        self.dp.callback_query.register(self.cb_admin_history, F.data == "admin_history")
        
        # ‚úÖ –ù–û–í–û–ï: Admin broadcast handlers with media support
        self.dp.callback_query.register(self.cb_confirm_broadcast, F.data == "confirm_broadcast")
        
        # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Admin broadcast message handler (—Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞)
        self.dp.message.register(
            self.handle_admin_broadcast_message, 
            AdminBroadcastStates.waiting_for_message
        )
        
        # ‚úÖ –ù–û–í–û–ï: Media album collection handler
        self.dp.message.register(
            self.handle_media_album_collection,
            AdminBroadcastStates.collecting_media_album
        )
        
        # Token input handler
        self.dp.message.register(
            self.handle_token_input, 
            BotCreationStates.waiting_for_token
        )
        
        # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –¥–ª—è file_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.dp.message.register(
            self.handle_media_for_file_id,
            F.content_type.in_([
                'photo', 'video', 'document', 'audio', 
                'voice', 'video_note', 'sticker'
            ])
        )
    
    async def set_commands(self):
        """Set bot commands"""
        commands = [
            BotCommand(command="start", description="üè≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        ]
        await self.bot.set_my_commands(commands)
    
    def generate_robokassa_payment_link(self, user_id: int, amount: float = None) -> str:
        """Generate Robokassa payment link with unique InvId and Shp_user_id"""
        if amount is None:
            amount = settings.robokassa_payment_amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if not settings.robokassa_merchant_login:
            logger.error("‚ùå ROBOKASSA_MERCHANT_LOGIN not configured")
            raise ValueError("Robokassa merchant login not configured")
        
        if not settings.robokassa_password1:
            logger.error("‚ùå ROBOKASSA_PASSWORD1 not configured")
            raise ValueError("Robokassa password1 not configured")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π InvId —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = int(time.time())
        invoice_id = str(timestamp)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å user_id –≤ Shp_user_id
        params = {
            'MerchantLogin': settings.robokassa_merchant_login,
            'OutSum': f"{amount:.2f}",
            'InvId': invoice_id,
            'Shp_user_id': str(user_id),
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        signature_string = f"{settings.robokassa_merchant_login}:{params['OutSum']}:{params['InvId']}:{settings.robokassa_password1}:Shp_user_id={params['Shp_user_id']}"
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest().upper()
        params['SignatureValue'] = signature
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if settings.robokassa_is_test:
            params['IsTest'] = '1'
            logger.info("üß™ Test mode enabled for payment link")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        base_url = "https://auth.robokassa.ru/Merchant/Index.aspx"
        payment_url = f"{base_url}?{urlencode(params)}"
        
        logger.info("üí≥ Unique payment link generated with Shp_user_id", 
                   user_id=user_id,
                   amount=amount,
                   invoice_id=invoice_id,
                   timestamp=timestamp)
        
        return payment_url
    
    def generate_tokens_payment_link(self, user_id: int) -> str:
        """Generate Robokassa payment link for tokens purchase"""
        amount = settings.robokassa_tokens_amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.robokassa_merchant_login or not settings.robokassa_password1:
            raise ValueError("Robokassa not configured")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π InvId
        timestamp = int(time.time())
        invoice_id = str(timestamp)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        params = {
            'MerchantLogin': settings.robokassa_merchant_login,
            'OutSum': f"{amount:.2f}",
            'InvId': invoice_id,
            'Shp_user_id': f"{user_id}tokens",  # –î–æ–±–∞–≤–ª—è–µ–º 'tokens' –∫ user_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        signature_string = f"{settings.robokassa_merchant_login}:{params['OutSum']}:{params['InvId']}:{settings.robokassa_password1}:Shp_user_id={params['Shp_user_id']}"
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest().upper()
        params['SignatureValue'] = signature
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if settings.robokassa_is_test:
            params['IsTest'] = '1'
        
        base_url = "https://auth.robokassa.ru/Merchant/Index.aspx"
        payment_url = f"{base_url}?{urlencode(params)}"
        
        logger.info("üîã Tokens payment link generated", 
                   user_id=user_id,
                   amount=amount,
                   tokens=settings.tokens_per_purchase)
        
        return payment_url
    
    async def _save_payment_info(self, invoice_id: str, user_id: int, amount: float):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            logger.info("üíæ Payment info saved for webhook processing", 
                       invoice_id=invoice_id,
                       user_id=user_id,
                       amount=amount)
        except Exception as e:
            logger.error("Failed to save payment info", error=str(e))
    
    def get_main_keyboard(self, user_id: int = None) -> InlineKeyboardMarkup:
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Main menu keyboard with admin features for super admin and referral program"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{Emoji.PLUS} –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", 
                    callback_data="create_bot"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.LIST} –ú–æ–∏ –±–æ—Ç—ã", 
                    callback_data="my_bots"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üíé –û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ", 
                    callback_data="pricing"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üîã –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ò–ò", 
                    callback_data="buy_tokens"
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", 
                    callback_data="referral_program"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.HELP} –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞?", 
                    callback_data="how_to_create"
                )
            ]
        ]
        
        # ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        if user_id and self.admin_service.is_super_admin(user_id):
            keyboard.extend([
                [
                    InlineKeyboardButton(
                        text="üëë –ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê", 
                        callback_data="admin_stats"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", 
                        callback_data="admin_broadcast"
                    ),
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", 
                        callback_data="admin_history"
                    )
                ]
            ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_pricing_keyboard(self) -> InlineKeyboardMarkup:
        """Pricing plans keyboard"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÖ 1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ",
                    callback_data="pricing_1m"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 749 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 150‚ÇΩ)",
                    callback_data="pricing_3m"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1,499 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 295‚ÇΩ)",
                    callback_data="pricing_6m"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2,490 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 1,098‚ÇΩ)",
                    callback_data="pricing_12m"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", 
                    callback_data="back_to_main"
                )
            ]
        ])
    
    def get_back_keyboard(self) -> InlineKeyboardMarkup:
        """Back to main menu keyboard"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", 
                    callback_data="back_to_main"
                )
            ]
        ])
    
    def get_bot_info_keyboard(self, bot) -> InlineKeyboardMarkup:
        """Bot info keyboard with link to bot's admin panel"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"{Emoji.SETTINGS} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞",
                    callback_data=f"manage_configure_{bot.bot_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.CHART} –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data=f"manage_stats_{bot.bot_id}"
                )
            ]
        ]
        
        # Add restart button if bot has errors
        if not bot.is_running:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{Emoji.RESTART} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
                    callback_data=f"manage_restart_{bot.bot_id}"
                )
            ])
        
        keyboard.extend([
            [
                InlineKeyboardButton(
                    text=f"{Emoji.DELETE} –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞",
                    callback_data=f"manage_delete_{bot.bot_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", 
                    callback_data="my_bots"
                )
            ]
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # ‚úÖ BASIC COMMAND HANDLERS
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Start command —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–∏–∞–ª–æ–≤ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏"""
        await state.clear()
        
        # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        referral_code = None
        start_param = message.text.replace('/start', '').strip()
        
        if start_param and start_param.startswith('REF_'):
            referral_code = start_param
            logger.info("üîó Referral link detected", 
                       user_id=message.from_user.id,
                       referral_code=referral_code)
        
        user_data = {
            "id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        
        try:
            # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∞–ª–æ–º
            user = await UserManager.create_user_with_trial(
                user_data=user_data,
                admin_chat_id=message.chat.id
            )
            
            # ‚úÖ –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_referral_code = await UserManager.ensure_user_has_referral_code(message.from_user.id)
            
            # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if referral_code and user:
                referral_success = await UserManager.process_referral_link(
                    message.from_user.id, 
                    referral_code
                )
                
                if referral_success:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                    try:
                        from database import db
                        referrer = await db.get_user_by_referral_code(referral_code)
                        if referrer:
                            referrer_stats = await db.get_user_referral_stats(referrer.id)
                            
                            user_info = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name or f"ID: {message.from_user.id}"
                            
                            referrer_message = Messages.REFERRAL_NEW_REFERRAL.format(
                                user_info=user_info,
                                total_referrals=referrer_stats.get('total_referrals', 0)
                            )
                            
                            await self.bot.send_message(
                                chat_id=referrer.id,
                                text=referrer_message,
                                parse_mode="HTML"
                            )
                            
                            logger.info("‚úÖ Referrer notified about new referral", 
                                       referrer_id=referrer.id,
                                       new_user_id=message.from_user.id)
                            
                    except Exception as e:
                        logger.error("Failed to notify referrer", error=str(e))
            
            logger.info("‚úÖ User registered with 3-day trial and referral code", 
                       user_id=message.from_user.id,
                       username=message.from_user.username,
                       referral_code=user_referral_code,
                       has_referrer=bool(referral_code))
                       
        except Exception as e:
            logger.error("Failed to register user with trial", 
                        user_id=message.from_user.id,
                        error=str(e))
            # Fallback to old method
            try:
                await db.create_or_update_user_with_tokens(
                    user_data=user_data,
                    admin_chat_id=message.chat.id
                )
            except Exception as fallback_error:
                logger.error("Fallback registration failed", error=str(fallback_error))
        
        # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∞–ª–æ–º
        user = await UserManager.get_user(message.from_user.id)
        if user:
            status = user.get_subscription_status()
            
            if status['status'] == 'paid':
                subscription_info = f"""
‚úÖ <b>–ü–ª–∞–Ω AI ADMIN –∞–∫—Ç–∏–≤–µ–Ω!</b>
üìÖ –î–æ {status['expires_at'].strftime('%d.%m.%Y')} ({status['days_left']} –¥–Ω.)
"""
            elif status['status'] == 'trial':
                subscription_info = f"""
üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!</b>
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{status['days_left']} –¥–Ω.</b> –∏–∑ 3
üíé <a href='#'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN</a>
"""
            elif status.get('trial_expired'):
                subscription_info = f"""
‚ö†Ô∏è <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω</b>
üíé <a href='#'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN</a>
üìÖ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ –æ–ø–ª–∞—Ç—ã
"""
            else:
                subscription_info = f"""
üÜì <b>–ü–ª–∞–Ω FREE</b> ‚Ä¢ <a href='#'>–£–ª—É—á—à–∏—Ç—å –¥–æ AI ADMIN</a>
"""
        else:
            subscription_info = "üÜì <b>–ü–ª–∞–Ω FREE</b>"
        
        welcome_text = f"""{Messages.WELCOME}

{subscription_info}
"""
        
        await message.answer(
            welcome_text,
            reply_markup=self.get_main_keyboard(message.from_user.id)
        )
    
    async def cmd_help(self, message: Message):
        """Help command handler"""
        help_text = f"""
{Emoji.INFO} <b>–ü–æ–º–æ—â—å –ø–æ AI ADMIN</b>

{Emoji.FACTORY} <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
- –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
- –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ—â–∞–Ω–∏—è
- –ò–ò –∞–≥–µ–Ω—Ç—ã –Ω–∞ –±–∞–∑–µ OpenAI GPT-4o

{Emoji.ROCKET} <b>–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∑–¥–µ—Å—å –≤ AI ADMIN
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
3. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start
4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

{Emoji.NEW} <b>–ù–æ–≤–∏–Ω–∫–∞:</b> –ö–∞–∂–¥—ã–π –±–æ—Ç –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏!

üí∞ <b>–¢–æ–∫–µ–Ω—ã OpenAI:</b> –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 500,000 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–æ–≤

üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</b> 3 –¥–Ω—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!

{Emoji.HELP} –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ @support
"""
        
        await message.answer(help_text, reply_markup=self.get_back_keyboard())
    
    # ‚úÖ –ù–û–í–û–ï: –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id
    async def cmd_get_file_id(self, message: Message):
        """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –ª—é–±–æ–≥–æ –º–µ–¥–∏–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        if not self.admin_service.is_super_admin(message.from_user.id):
            return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(
            "üìé <b>–ü–æ–ª—É—á–µ–Ω–∏–µ file_id –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ file_id:\n\n"
            "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:</b>\n"
            "‚Ä¢ üñº –§–æ—Ç–æ\n‚Ä¢ üé• –í–∏–¥–µ–æ\n‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã\n‚Ä¢ üéµ –ê—É–¥–∏–æ\n"
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ üìπ –í–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏\n‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä—ã\n\n"
            "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ file_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö</i>"
        )
    
    # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –¥–ª—è file_id
    async def handle_media_for_file_id(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
        if not self.admin_service.is_super_admin(message.from_user.id):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        
        file_id = None
        media_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        file_size = 0
        file_name = ""
        
        try:
            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = "–§–æ—Ç–æ"
                file_size = message.photo[-1].file_size or 0
            elif message.video:
                file_id = message.video.file_id
                media_type = "–í–∏–¥–µ–æ"
                file_size = message.video.file_size or 0
                file_name = message.video.file_name or ""
            elif message.document:
                file_id = message.document.file_id
                media_type = "–î–æ–∫—É–º–µ–Ω—Ç"
                file_size = message.document.file_size or 0
                file_name = message.document.file_name or ""
            elif message.audio:
                file_id = message.audio.file_id
                media_type = "–ê—É–¥–∏–æ"
                file_size = message.audio.file_size or 0
                file_name = message.audio.file_name or ""
            elif message.voice:
                file_id = message.voice.file_id
                media_type = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                file_size = message.voice.file_size or 0
            elif message.video_note:
                file_id = message.video_note.file_id
                media_type = "–í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫"
                file_size = message.video_note.file_size or 0
            elif message.sticker:
                file_id = message.sticker.file_id
                media_type = "–°—Ç–∏–∫–µ—Ä"
                file_size = message.sticker.file_size or 0
        
            if file_id:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if file_size > 0:
                    if file_size < 1024:
                        size_str = f"{file_size} –±–∞–π—Ç"
                    elif file_size < 1024 * 1024:
                        size_str = f"{file_size / 1024:.1f} –ö–ë"
                    else:
                        size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
                else:
                    size_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                response_text = f"‚úÖ <b>{media_type}</b>\n\n"
                
                if file_name:
                    response_text += f"üìÑ <b>–ò–º—è —Ñ–∞–π–ª–∞:</b> {file_name}\n"
                
                response_text += f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {size_str}\n\n"
                response_text += f"üÜî <b>File ID:</b>\n<code>{file_id}</code>\n\n"
                response_text += f"üìã <i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ file_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª—è—Ö</i>"
                
                await message.answer(response_text)
                
                logger.info("File ID provided to super admin", 
                           user_id=message.from_user.id,
                           media_type=media_type,
                           file_size=file_size)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error("Failed to extract file_id", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ file_id")
    
    # ‚úÖ MAIN MENU CALLBACKS
    
    async def cb_create_bot(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Create bot callback —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞"""
        await callback.answer()
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–æ–≤
        from utils.access_control import check_user_access, send_access_denied_message
        
        has_access, status = await check_user_access(callback.from_user.id, "create_bot")
        if not has_access:
            await send_access_denied_message(callback, status)
            return
        
        # Check user's bot limit
        user_bots = await db.get_user_bots(callback.from_user.id)
        if len(user_bots) >= settings.max_bots_per_user:
            await callback.message.edit_text(
                f"{Emoji.WARNING} <b>–õ–∏–º–∏—Ç –±–æ—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω</b>\n\n"
                f"–ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ {settings.max_bots_per_user} –±–æ—Ç–æ–≤.\n"
                f"–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ Pro –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤!",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        await state.set_state(BotCreationStates.waiting_for_token)
        
        text = f"""
{Emoji.ROBOT} <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>

{Messages.HOW_TO_CREATE_BOT}

üí∞ <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 500,000 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–æ–≤ OpenAI!

{Emoji.ROCKET} <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:</b>
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=self.get_back_keyboard()
        )
    
    async def cb_my_bots(self, callback: CallbackQuery):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: My bots callback —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞"""
        await callback.answer()
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏
        from utils.access_control import check_user_access, send_access_denied_message
        
        has_access, status = await check_user_access(callback.from_user.id, "bot_management")
        if not has_access:
            await send_access_denied_message(callback, status)
            return
        
        user_bots = await db.get_user_bots(callback.from_user.id)
        
        if not user_bots:
            await callback.message.edit_text(
                Messages.NO_BOTS_YET,
                reply_markup=self.get_main_keyboard(callback.from_user.id)
            )
            return
        
        # Create bots list
        text = f"{Emoji.LIST} <b>–í–∞—à–∏ –±–æ—Ç—ã ({len(user_bots)}):</b>\n\n"
        
        keyboard = []
        for bot in user_bots:
            status_emoji = Emoji.SUCCESS if bot.is_running else Emoji.ERROR
            text += f"{status_emoji} <b>@{bot.bot_username}</b>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if bot.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"   –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {bot.total_subscribers}\n"
            
            # Show configuration status
            config_status = []
            if bot.welcome_message:
                config_status.append("üëã")
            if bot.welcome_button_text:
                config_status.append("üîò")
            if bot.goodbye_message:
                config_status.append("üëãüí´")
            # –ò–ò –∞–≥–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å
            if bot.ai_assistant_enabled and bot.ai_assistant_type:
                if bot.ai_assistant_type == 'openai':
                    config_status.append("üé®")
                else:
                    config_status.append("üåê")
            
            if config_status:
                text += f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ: {' '.join(config_status)}\n"
            else:
                text += f"   {Emoji.WARNING} –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            
            text += "\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üîß @{bot.bot_username}",
                    callback_data=f"bot_{bot.bot_id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{Emoji.PLUS} –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ",
                callback_data="create_bot"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main"
            )
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    
    async def cb_pricing(self, callback: CallbackQuery):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Pricing plans callback —Å —É—á–µ—Ç–æ–º —Ç—Ä–∏–∞–ª–∞"""
        await callback.answer()
        
        # ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∞–ª–æ–º
        user = await UserManager.get_user(callback.from_user.id)
        if user:
            status = user.get_subscription_status()
            
            if status['status'] == 'paid':
                status_text = f"""
‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>

üìÖ <b>–ü–ª–∞–Ω:</b> AI ADMIN
‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {status['expires_at'].strftime('%d.%m.%Y')}
üïí <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {status['days_left']}

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ:
"""
            elif status['status'] == 'trial':
                status_text = f"""
üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!</b>

‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {status['days_left']} –¥–Ω. –∏–∑ 3
üöÄ <b>–£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI ADMIN!</b>

üíé <b>–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å:</b>
- –ë–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞
- –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
            elif status.get('trial_expired'):
                status_text = f"""
‚ö†Ô∏è <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω</b>

üéÅ <b>–í—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ AI ADMIN 3 –¥–Ω—è</b>
üíé <b>–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:</b>

- –í–æ–∑–≤—Ä–∞—Ç –∫ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –±–æ—Ç–∞–º
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ò–ò –∞–≥–µ–Ω—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –≤—Å–µ–≥–æ {settings.robokassa_payment_amount}‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
"""
            else:
                status_text = f"""
üÜì <b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: FREE</b>

üéÅ <b>–ü–æ–ª—É—á–∏—Ç–µ 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ë–ï–°–ü–õ–ê–¢–ù–û!</b>
–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.

üíé <b>–ü–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ AI ADMIN:</b>
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ò–ò –∞–≥–µ–Ω—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –≤—Å–µ–≥–æ {settings.robokassa_payment_amount}‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
"""
        else:
            status_text = f"""
üÜì <b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: FREE</b>

üéÅ <b>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è AI ADMIN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>
"""
        
        text = f"""
üíé <b>–ü–û–î–ü–ò–°–ö–ê "AI ADMIN"</b>

{status_text}

{Emoji.INFO} –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://graph.org/AI-Admin---POLZOVATELSKOE-SOGLASHENIE-08-15">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_payment_amount}‚ÇΩ (30 –¥–Ω–µ–π)",
                    callback_data="pay_subscription"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    
    async def cb_pay_subscription(self, callback: CallbackQuery):
        """Handle subscription payment"""
        await callback.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –†–æ–±–æ–∫–∞—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        if not settings.robokassa_merchant_login or not settings.robokassa_password1:
            await callback.message.edit_text(
                f"{Emoji.ERROR} <b>–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            payment_url = self.generate_robokassa_payment_link(callback.from_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            timestamp = int(time.time())
            await self._save_payment_info(
                str(timestamp),
                callback.from_user.id, 
                settings.robokassa_payment_amount
            )
            
            text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üí∞ <b>–°—É–º–º–∞:</b> {settings.robokassa_payment_amount}‚ÇΩ
üìÖ <b>–°—Ä–æ–∫:</b> 30 –¥–Ω–µ–π
üéØ <b>–ü–ª–∞–Ω:</b> AI ADMIN

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É</b>
–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.

‚ö° <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!

üëÜ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_payment_amount}‚ÇΩ",
                        url=payment_url
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
                        callback_data="check_payment_status"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                        callback_data="pricing"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error("Failed to generate payment link", 
                        user_id=callback.from_user.id, 
                        error=str(e))
            await callback.message.edit_text(
                f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=self.get_back_keyboard()
            )
    
    async def cb_check_payment_status(self, callback: CallbackQuery):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Check payment status —Å —É—á–µ—Ç–æ–º —Ç—Ä–∏–∞–ª–∞"""
        await callback.answer()
        
        # ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ UserManager
        user = await UserManager.get_user(callback.from_user.id)
        if not user:
            await callback.message.edit_text(
                f"{Emoji.ERROR} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        status = user.get_subscription_status()
        
        if status['status'] == 'paid':
            # –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            text = f"""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>

üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ AI ADMIN –∞–∫—Ç–∏–≤–Ω–∞.

üìÖ <b>–ü–ª–∞–Ω:</b> AI ADMIN
‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {status['expires_at'].strftime('%d.%m.%Y')}
üïí <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {status['days_left']}

üöÄ <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:</b>
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ò–ò –∞–≥–µ–Ω—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–æ—Ç–æ–≤ –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.PLUS} –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
                        callback_data="create_bot"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.LIST} –ú–æ–∏ –±–æ—Ç—ã",
                        callback_data="my_bots"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_main"
                    )
                ]
            ])
        elif status['status'] == 'trial':
            # –¢—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–µ–Ω
            text = f"""
üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!</b>

‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {status['days_left']} –¥–Ω. –∏–∑ 3
üöÄ –£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI ADMIN!

üí° <b>–°–æ–≤–µ—Ç:</b> –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.

‚ú® <b>–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã:</b>
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã
- –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ò–ò –∞–≥–µ–Ω—Ç—ã
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="pay_subscription"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.PLUS} –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
                        callback_data="create_bot"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_main"
                    )
                ]
            ])
        elif status.get('trial_expired'):
            # –¢—Ä–∏–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞
            text = f"""
‚è≥ <b>–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞</b>

üéÅ –í–∞—à 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.
üí∞ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN.

üîÑ –ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.

‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ –æ–ø–ª–∞—Ç—ã</b>
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑",
                        callback_data="check_payment_status"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_payment_amount}‚ÇΩ",
                        callback_data="pay_subscription"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                        callback_data="pricing"
                    )
                ]
            ])
        else:
            # –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ (FREE –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å)
            text = f"""
‚è≥ <b>–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞</b>

–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.

üéÅ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑",
                        callback_data="check_payment_status"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_payment_amount}‚ÇΩ",
                        callback_data="pay_subscription"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                        callback_data="pricing"
                    )
                ]
            ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    
    async def cb_buy_tokens(self, callback: CallbackQuery):
        """Buy tokens callback"""
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
        try:
            user = await UserManager.get_user(callback.from_user.id)
            current_tokens = user.tokens_limit_total if user else 500000
        except Exception:
            current_tokens = 500000
        
        text = f"""
üîã <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–æ–≤</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {settings.robokassa_tokens_amount}‚ÇΩ
üéØ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {settings.tokens_per_purchase:,}
üìä <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤

‚ú® <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b> {current_tokens + settings.tokens_per_purchase:,} —Ç–æ–∫–µ–Ω–æ–≤

ü§ñ <b>–ß—Ç–æ –¥–∞—é—Ç —Ç–æ–∫–µ–Ω—ã:</b>
- –û–±—â–µ–Ω–∏–µ —Å OpenAI –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GPT-4o
- –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É</b>
–¢–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –±–∞–ª–∞–Ω—Å—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {settings.robokassa_tokens_amount}‚ÇΩ",
                    callback_data="pay_tokens"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def cb_pay_tokens(self, callback: CallbackQuery):
        """Handle tokens payment"""
        await callback.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –†–æ–±–æ–∫–∞—Å—Å—ã
        if not settings.robokassa_merchant_login or not settings.robokassa_password1:
            await callback.message.edit_text(
                f"{Emoji.ERROR} <b>–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>",
                reply_markup=self.get_back_keyboard()
            )
            return
        
        try:
            payment_url = self.generate_tokens_payment_link(callback.from_user.id)
            
            text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ò–ò</b>

üí∞ <b>–°—É–º–º–∞:</b> {settings.robokassa_tokens_amount}‚ÇΩ
üîã <b>–¢–æ–∫–µ–Ω–æ–≤:</b> {settings.tokens_per_purchase:,}
üéØ <b>–î–ª—è:</b> OpenAI –ò–ò –∞–≥–µ–Ω—Ç–æ–≤

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É</b>
‚ö° <b>–¢–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_tokens_amount}‚ÇΩ",
                        url=payment_url
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        callback_data="check_tokens_payment"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∫–µ",
                        callback_data="buy_tokens"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to generate tokens payment link", error=str(e))
            await callback.message.edit_text(
                f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã</b>",
                reply_markup=self.get_back_keyboard()
            )

    async def cb_check_tokens_payment(self, callback: CallbackQuery):
        """Check tokens payment status"""
        await callback.answer()
        
        try:
            user = await UserManager.get_user(callback.from_user.id)
            current_tokens = user.tokens_limit_total if user else 500000
        except Exception:
            current_tokens = 500000
        
        text = f"""
üîã <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {current_tokens:,}

üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
–ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üîã –ö—É–ø–∏—Ç—å –µ—â–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    callback_data="buy_tokens"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    # ‚úÖ –ù–û–í–û–ï: –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê CALLBACKS
    
    async def cb_referral_program(self, callback: CallbackQuery):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Callback –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–¥–∞"""
        await callback.answer()
        
        try:
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            referral_code = await UserManager.ensure_user_has_referral_code(callback.from_user.id)
            
            if not referral_code:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            referral_info = await UserManager.get_user_referral_info(callback.from_user.id)
            
            if 'error' in referral_info:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            stats = referral_info.get('stats', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            bot_info = await self.bot.get_me()
            referral_link = f"t.me/{bot_info.username}?start={stats.get('referral_code', referral_code)}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
            text = Messages.REFERRAL_WELCOME.format(
                referral_link=referral_link,
                total_referrals=stats.get('total_referrals', 0),
                total_earnings=stats.get('total_earnings', 0.0),
                total_commission=stats.get('total_commission', 0.0)
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∏—Å—Å–∏–π",
                        callback_data="referral_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                        callback_data="referral_program"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_main"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show referral program", 
                        user_id=callback.from_user.id, 
                        error=str(e))
            
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                reply_markup=self.get_back_keyboard()
            )

    async def cb_referral_history(self, callback: CallbackQuery):
        """–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π"""
        await callback.answer()
        
        try:
            from database import db
            
            transactions = await db.get_referral_transactions_for_payment(callback.from_user.id, limit=10)
            
            if not transactions:
                text = f"""
üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π</b>

‚ùå <b>–ö–æ–º–∏—Å—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ - –∫–æ–≥–¥–∞ –æ–Ω–∏ –æ–ø–ª–∞—Ç—è—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 15% –∫–æ–º–∏—Å—Å–∏–∏!
"""
            else:
                text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π</b>\n\n"
                
                for i, transaction in enumerate(transactions, 1):
                    status_emoji = "‚úÖ" if transaction['status'] == "paid" else "‚è≥"
                    type_text = "–ü–æ–¥–ø–∏—Å–∫–∞" if transaction['transaction_type'] == "subscription" else "–¢–æ–∫–µ–Ω—ã"
                    
                    text += f"{status_emoji} <b>#{i}</b> | {type_text}\n"
                    text += f"üí∞ –ö–æ–º–∏—Å—Å–∏—è: <b>{transaction['commission_amount']:.2f}‚ÇΩ</b>\n"
                    text += f"üìÖ {datetime.fromisoformat(transaction['created_at']).strftime('%d.%m.%Y %H:%M')}\n\n"
                    
                    if i >= 7:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 7 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        break
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="referral_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                        callback_data="referral_program"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show referral history", error=str(e))
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏",
                reply_markup=self.get_back_keyboard()
            )
    
    async def cb_pricing_plan(self, callback: CallbackQuery):
        """Individual pricing plan callback"""
        await callback.answer()
        
        plan_data = {
            "pricing_1m": {"period": "1 –º–µ—Å—è—Ü", "price": "299 ‚ÇΩ", "savings": ""},
            "pricing_3m": {"period": "3 –º–µ—Å—è—Ü–∞", "price": "749 ‚ÇΩ", "savings": " (—ç–∫–æ–Ω–æ–º–∏—è 150‚ÇΩ)"},
            "pricing_6m": {"period": "6 –º–µ—Å—è—Ü–µ–≤", "price": "1,499 ‚ÇΩ", "savings": " (—ç–∫–æ–Ω–æ–º–∏—è 295‚ÇΩ)"},
            "pricing_12m": {"period": "12 –º–µ—Å—è—Ü–µ–≤", "price": "2,490 ‚ÇΩ", "savings": " (—ç–∫–æ–Ω–æ–º–∏—è 1,098‚ÇΩ)"},
        }
        
        plan = plan_data.get(callback.data)
        if not plan:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
            return
        
        text = f"""
üíé <b>–¢–∞—Ä–∏—Ñ "AI ADMIN"</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {plan['period']}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}{plan['savings']}

üöß <b>–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üíé –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ",
                    callback_data="pricing"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def cb_how_to_create(self, callback: CallbackQuery):
        """How to create bot callback"""
        await callback.answer()
        
        await callback.message.edit_text(
            Messages.HOW_TO_CREATE_BOT,
            reply_markup=self.get_back_keyboard()
        )
    
    async def cb_back_to_main(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Back to main menu callback —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–∏–∞–ª–∞"""
        await callback.answer()
        await state.clear()
        
        # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ UserManager
        user = await UserManager.get_user(callback.from_user.id)
        if user:
            status = user.get_subscription_status()
            
            if status['status'] == 'paid':
                subscription_info = f"""
‚úÖ <b>–ü–ª–∞–Ω AI ADMIN –∞–∫—Ç–∏–≤–µ–Ω!</b>
üìÖ –î–æ {status['expires_at'].strftime('%d.%m.%Y')} ({status['days_left']} –¥–Ω.)
"""
            elif status['status'] == 'trial':
                subscription_info = f"""
üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!</b>
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{status['days_left']} –¥–Ω.</b> –∏–∑ 3
üíé <a href='#'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN</a>
"""
            elif status.get('trial_expired'):
                subscription_info = f"""
‚ö†Ô∏è <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω</b>
üíé <a href='#'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN</a>
üìÖ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ –æ–ø–ª–∞—Ç—ã
"""
            else:
                subscription_info = f"""
üÜì <b>–ü–ª–∞–Ω FREE</b> ‚Ä¢ <a href='#'>–£–ª—É—á—à–∏—Ç—å –¥–æ AI ADMIN</a>
"""
        else:
            subscription_info = "üÜì <b>–ü–ª–∞–Ω FREE</b>"
        
        welcome_text = f"""{Messages.WELCOME}

{subscription_info}
"""
        
        await callback.message.edit_text(
            welcome_text,
            reply_markup=self.get_main_keyboard(callback.from_user.id)
        )
    
    # ‚úÖ –ù–û–í–´–ï ADMIN –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –ú–ï–î–ò–ê –ü–û–î–î–ï–†–ñ–ö–û–ô
    
    async def cb_admin_stats(self, callback: CallbackQuery):
        """Admin statistics callback - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        await callback.answer()
        
        if not self.admin_service.is_super_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
            reply_markup=None
        )
        
        stats_text = await self.admin_service.get_admin_statistics()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                    callback_data="admin_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard
        )
    
    async def cb_admin_broadcast(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Admin broadcast callback with media support"""
        await callback.answer()
        
        if not self.admin_service.is_super_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(AdminBroadcastStates.waiting_for_message)
        
        text = f"""
üì® <b>–ê–î–ú–ò–ù–°–ö–ê–Ø –†–ê–°–°–´–õ–ö–ê</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º AI ADMIN.

‚ú® <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ üñº –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
‚Ä¢ üé• –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã)
‚Ä¢ üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üìπ –í–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏
‚Ä¢ üé¨ –ê–Ω–∏–º–∞—Ü–∏–∏ (GIF)
‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä—ã
‚Ä¢ üì∏ <b>–ú–µ–¥–∏–∞–∞–ª—å–±–æ–º—ã</b> (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)

‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ Rate limit: {settings.admin_broadcast_rate_limit} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞–ª—å–±–æ–º–µ
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
‚Ä¢ –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>üéâ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!</b>
–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è...</code>

üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –∞–ª—å–±–æ–º:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def handle_admin_broadcast_message(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Handle admin broadcast message with media support"""
        if not self.admin_service.is_super_admin(message.from_user.id):
            await state.clear()
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            broadcast_media = MediaHandler.extract_media_from_message(message)
            
            if not broadcast_media:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞",
                    reply_markup=self.get_main_keyboard(message.from_user.id)
                )
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–µ–¥–∏–∞–∞–ª—å–±–æ–º
            if hasattr(message, 'media_group_id') and message.media_group_id:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –º–µ–¥–∏–∞–∞–ª—å–±–æ–º–∞
                await state.set_state(AdminBroadcastStates.collecting_media_album)
                await state.update_data({
                    'media_group_id': message.media_group_id,
                    'collected_media': [broadcast_media],
                    'album_text': broadcast_media.text_content,
                    'collection_timeout': datetime.now().timestamp() + 30  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–±–æ—Ä
                })
                
                await message.answer(
                    f"üì∏ <b>–ú–µ–¥–∏–∞–∞–ª—å–±–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω!</b>\n\n"
                    f"üîÑ –°–æ–±–∏—Ä–∞—é –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞...\n"
                    f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ: 30 —Å–µ–∫—É–Ω–¥\n\n"
                    f"üìé –ü–æ–ª—É—á–µ–Ω–æ: 1 —ç–ª–µ–º–µ–Ω—Ç"
                )
                return
            
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            await self._show_broadcast_preview(message, state, broadcast_media)
            
        except Exception as e:
            logger.error("Failed to handle admin broadcast message", 
                        user_id=message.from_user.id,
                        error=str(e))
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{str(e)}",
                reply_markup=self.get_main_keyboard(message.from_user.id)
            )
            await state.clear()
    
    async def handle_media_album_collection(self, message: Message, state: FSMContext):
        """‚úÖ –ù–û–í–û–ï: –°–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–¥–∏–∞–∞–ª—å–±–æ–º–∞"""
        if not self.admin_service.is_super_admin(message.from_user.id):
            await state.clear()
            return
        
        try:
            state_data = await state.get_data()
            media_group_id = state_data.get('media_group_id')
            collected_media = state_data.get('collected_media', [])
            collection_timeout = state_data.get('collection_timeout', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if datetime.now().timestamp() > collection_timeout:
                await message.answer("‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∞–ª—å–±–æ–º
            if not hasattr(message, 'media_group_id') or message.media_group_id != media_group_id:
                # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –∞–ª—å–±–æ–º–∞
                await self._finalize_media_album(message, state, collected_media)
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫ –∞–ª—å–±–æ–º—É
            broadcast_media = MediaHandler.extract_media_from_message(message)
            if broadcast_media and broadcast_media.media_items:
                collected_media.extend(broadcast_media.media_items)
                
                await state.update_data({
                    'collected_media': collected_media,
                    'collection_timeout': datetime.now().timestamp() + 5  # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await message.answer(
                    f"üì∏ <b>–ú–µ–¥–∏–∞–∞–ª—å–±–æ–º:</b> {len(collected_media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
                    f"‚è∞ –°–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
                asyncio.create_task(self._album_collection_timer(
                    message.from_user.id, state, collected_media, 5
                ))
            
        except Exception as e:
            logger.error("Failed to handle media album collection", error=str(e))
            await state.clear()
    
    async def _album_collection_timer(self, user_id: int, state: FSMContext, collected_media: list, delay: int):
        """‚úÖ –ù–û–í–û–ï: –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞"""
        await asyncio.sleep(delay)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            current_state = await state.get_state()
            if current_state == AdminBroadcastStates.collecting_media_album.state:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π BroadcastMedia –æ–±—ä–µ–∫—Ç
                state_data = await state.get_data()
                album_text = state_data.get('album_text')
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –≤ –∞–ª—å–±–æ–º
                final_broadcast_media = BroadcastMedia(
                    media_items=collected_media,
                    text_content=album_text,
                    is_album=True
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∞–ª—å–±–æ–º–∞
                await self._show_album_preview(user_id, state, final_broadcast_media)
                
        except Exception as e:
            logger.error("Album collection timer failed", error=str(e))
    
    async def _finalize_media_album(self, message: Message, state: FSMContext, collected_media: list):
        """‚úÖ –ù–û–í–û–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞–∞–ª—å–±–æ–º–∞"""
        try:
            state_data = await state.get_data()
            album_text = state_data.get('album_text')
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π BroadcastMedia –æ–±—ä–µ–∫—Ç
            final_broadcast_media = BroadcastMedia(
                media_items=collected_media,
                text_content=album_text,
                is_album=True
            )
            
            await self._show_broadcast_preview(message, state, final_broadcast_media)
            
        except Exception as e:
            logger.error("Failed to finalize media album", error=str(e))
            await state.clear()
    
    async def _show_album_preview(self, user_id: int, state: FSMContext, broadcast_media: BroadcastMedia):
        """‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∞–ª—å–±–æ–º–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞
            validation = await self.admin_service.validate_broadcast_media(broadcast_media)
            
            media_preview = MediaHandler.get_media_preview_text(broadcast_media)
            
            if validation['valid']:
                preview_text = f"""
üì∏ <b>–ü–†–ï–í–¨–Æ –ú–ï–î–ò–ê–ê–õ–¨–ë–û–ú–ê</b>

üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}
üìä <b>–≠–ª–µ–º–µ–Ω—Ç–æ–≤:</b> {broadcast_media.media_count}
üìè <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {validation['total_size'] / 1024 / 1024:.1f}MB

"""
                if broadcast_media.text_content:
                    preview_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n<blockquote>{broadcast_media.text_content}</blockquote>\n\n"
                
                preview_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª—å–±–æ–º–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨ –ê–õ–¨–ë–û–ú", 
                            callback_data=f"confirm_broadcast"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞", 
                            callback_data="back_to_main"
                        )
                    ]
                ])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await state.set_data({'broadcast_media': broadcast_media})
                await state.set_state(AdminBroadcastStates.waiting_for_confirmation)
                
            else:
                preview_text = f"""
‚ùå <b>–û–®–ò–ë–ö–ò –í –ú–ï–î–ò–ê–ê–õ–¨–ë–û–ú–ï</b>

üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}
üìä <b>–≠–ª–µ–º–µ–Ω—Ç–æ–≤:</b> {broadcast_media.media_count}

üö´ <b>–û—à–∏–±–∫–∏:</b>
{chr(10).join(f"‚Ä¢ {error}" for error in validation['errors'])}
"""
                
                if validation['warnings']:
                    preview_text += f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>
{chr(10).join(f"‚Ä¢ {warning}" for warning in validation['warnings'])}
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞", 
                            callback_data="back_to_main"
                        )
                    ]
                ])
                
                await state.clear()
            
            await self.bot.send_message(
                chat_id=user_id,
                text=preview_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error("Failed to show album preview", error=str(e))
            await state.clear()
    
    async def _show_broadcast_preview(self, message: Message, state: FSMContext, broadcast_media: BroadcastMedia):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞
            validation = await self.admin_service.validate_broadcast_media(broadcast_media)
            
            media_preview = MediaHandler.get_media_preview_text(broadcast_media)
            
            if validation['valid']:
                preview_text = f"""
üì® <b>–ü–†–ï–í–¨–Æ –†–ê–°–°–´–õ–ö–ò</b>

üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}
"""
                
                if validation['total_size'] > 0:
                    preview_text += f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {validation['total_size'] / 1024 / 1024:.1f}MB\n"
                
                if broadcast_media.text_content:
                    preview_text += f"\nüìù <b>–¢–µ–∫—Å—Ç:</b>\n<blockquote>{broadcast_media.text_content}</blockquote>\n"
                
                if validation['warnings']:
                    preview_text += f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>
{chr(10).join(f"‚Ä¢ {warning}" for warning in validation['warnings'])}
"""
                
                preview_text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨ –í–°–ï–ú", 
                            callback_data=f"confirm_broadcast"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞", 
                            callback_data="back_to_main"
                        )
                    ]
                ])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await state.set_data({'broadcast_media': broadcast_media})
                await state.set_state(AdminBroadcastStates.waiting_for_confirmation)
                
            else:
                preview_text = f"""
‚ùå <b>–û–®–ò–ë–ö–ò –í –°–û–û–ë–©–ï–ù–ò–ò</b>

üìé <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {media_preview}

üö´ <b>–û—à–∏–±–∫–∏:</b>
{chr(10).join(f"‚Ä¢ {error}" for error in validation['errors'])}
"""
                
                if validation['warnings']:
                    preview_text += f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>
{chr(10).join(f"‚Ä¢ {warning}" for warning in validation['warnings'])}
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞", 
                            callback_data="back_to_main"
                        )
                    ]
                ])
                
                await state.clear()
            
            await message.answer(preview_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show broadcast preview", error=str(e))
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}",
                reply_markup=self.get_main_keyboard(message.from_user.id)
            )
            await state.clear()
    
    async def cb_confirm_broadcast(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: Confirm admin broadcast with media support"""
        await callback.answer()
        
        if not self.admin_service.is_super_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        state_data = await state.get_data()
        broadcast_media = state_data.get('broadcast_media')
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if not broadcast_media:
            broadcast_message = state_data.get('broadcast_message')
            if broadcast_message:
                broadcast_media = BroadcastMedia(
                    media_items=[],
                    text_content=broadcast_message,
                    is_album=False
                )
        
        if not broadcast_media:
            await callback.message.edit_text(
                "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=self.get_main_keyboard(callback.from_user.id)
            )
            await state.clear()
            return
        
        await state.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫—É
        result = await self.admin_service.start_admin_broadcast_with_media(
            admin_user_id=callback.from_user.id,
            broadcast_media=broadcast_media
        )
        
        if result['success']:
            media_info = result.get('media_info', {})
            response_text = f"""
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{result['total_users']}</b>
‚Ä¢ ID —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{result['broadcast_id']}</code>
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: <b>{settings.admin_broadcast_rate_limit} —Å–æ–æ–±—â/—Å–µ–∫</b>
"""
            
            if media_info.get('has_media'):
                response_text += f"""
üìé <b>–ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ –¢–∏–ø: {'–ê–ª—å–±–æ–º' if media_info.get('is_album') else '–û–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞'}
‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: <b>{media_info.get('media_count', 0)}</b>
‚Ä¢ –†–∞–∑–º–µ—Ä: <b>{media_info.get('total_size', 0) / 1024 / 1024:.1f}MB</b>
"""
            
            response_text += "\n‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."
            
        else:
            response_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{result['error']}"
        
        await callback.message.edit_text(
            response_text,
            reply_markup=self.get_main_keyboard(callback.from_user.id)
        )
    
    async def cb_admin_history(self, callback: CallbackQuery):
        """Admin broadcast history - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        await callback.answer()
        
        if not self.admin_service.is_super_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫...",
            reply_markup=None
        )
        
        history_text = await self.admin_service.get_broadcast_history(callback.from_user.id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                    callback_data="admin_history"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await callback.message.edit_text(
            history_text,
            reply_markup=keyboard
        )
    
    # ‚úÖ BOT MANAGEMENT
    
    async def cb_bot_details(self, callback: CallbackQuery):
        """Bot details callback"""
        await callback.answer()
        
        bot_id = callback.data.replace("bot_", "")
        bot = await db.get_bot_by_id(bot_id)
        
        if not bot:
            await callback.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
        if bot.user_id != callback.from_user.id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –±–æ—Ç", show_alert=True)
            return
        
        status_emoji = Emoji.SUCCESS if bot.is_running else Emoji.ERROR
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ò–ò –∞–≥–µ–Ω—Ç–µ
        ai_info = ""
        if bot.ai_assistant_enabled and bot.ai_assistant_type:
            if bot.ai_assistant_type == 'openai':
                agent_name = getattr(bot, 'openai_agent_name', 'OpenAI –ê–≥–µ–Ω—Ç')
                ai_info = f"üé® <b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name} (OpenAI)\n"
            elif bot.ai_assistant_type in ['chatforyou', 'protalk']:
                platform_name = bot.ai_assistant_type.title()
                ai_info = f"üåê <b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {platform_name}\n"
        else:
            ai_info = f"ü§ñ <b>–ò–ò –ê–≥–µ–Ω—Ç:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        text = f"""
{Emoji.ROBOT} <b>–ë–æ—Ç @{bot.bot_username}</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
{Emoji.USERS} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {bot.total_subscribers}
{Emoji.BROADCAST} <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {bot.total_messages_sent}
{ai_info}{Emoji.CHART} <b>–°–æ–∑–¥–∞–Ω:</b> {bot.created_at.strftime('%d.%m.%Y')}

{Emoji.INFO} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if bot.welcome_message else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {'‚úÖ' if bot.welcome_button_text else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if bot.confirmation_message else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
- –ü—Ä–æ—â–∞–Ω–∏–µ: {'‚úÖ' if bot.goodbye_message else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è: {'‚úÖ' if bot.goodbye_button_text else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}

{Emoji.NEW} <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @{bot.bot_username} –∫–æ–º–∞–Ω–¥—É /start
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=self.get_bot_info_keyboard(bot)
        )
    
    async def cb_bot_manage(self, callback: CallbackQuery):
        """Bot management actions"""
        await callback.answer()
        
        action_data = callback.data.replace("manage_", "")
        parts = action_data.split("_", 1)
        
        if len(parts) != 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
            return
        
        action, bot_id = parts
        
        bot = await db.get_bot_by_id(bot_id)
        if not bot:
            await callback.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if bot.user_id != callback.from_user.id:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º", show_alert=True)
            return
        
        if action == "configure":
            await self._show_configure_instructions(callback, bot)
        elif action == "stats":
            await self._show_bot_quick_stats(callback, bot)
        elif action == "restart":
            await self._restart_bot(callback, bot)
        elif action == "delete":
            await self._show_delete_confirmation(callback, bot)
    
    # ‚úÖ BOT TOKEN INPUT
    
    async def handle_token_input(self, message: Message, state: FSMContext):
        """Handle bot token input"""
        token = message.text.strip()
        
        # Basic token validation
        if not self._validate_token(token):
            await message.answer(
                f"{Emoji.ERROR} <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!</b>\n\n"
                f"–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫:\n"
                f"<code>123456789:ABCdefGHIjklMNOpqrSTUvwxYZ</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # Try to create bot
        try:
            bot_info = await self._verify_token(token)
            if not bot_info:
                await message.answer(
                    f"{Emoji.ERROR} <b>–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!</b>\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # Create bot in database
            bot_id = str(uuid.uuid4())
            bot_data = {
                "bot_id": bot_id,
                "user_id": message.from_user.id,
                "token": token,
                "bot_username": bot_info.username,
                "bot_name": bot_info.first_name,
                "status": "active",
                "is_running": True
            }
            
            await db.create_user_bot(bot_data)
            
            # Add bot to bot manager if available
            if self.bot_manager:
                try:
                    bot_db_data = await db.get_bot_by_id(bot_id)
                    await self.bot_manager.add_bot(bot_db_data)
                    logger.info("Bot added to manager", bot_id=bot_id)
                except Exception as e:
                    logger.error("Failed to add bot to manager", bot_id=bot_id, error=str(e))
            
            await state.clear()
            
            success_text = f"""
{Emoji.SUCCESS} <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

{Emoji.ROBOT} <b>@{bot_info.username}</b>
{Emoji.INFO} –ò–º—è: {bot_info.first_name}

üí∞ <b>–í–∞—à —Ç–æ–∫–µ–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å OpenAI:</b> 500,000 —Ç–æ–∫–µ–Ω–æ–≤

{Emoji.ROCKET} <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞

{Emoji.NEW} <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @{bot_info.username} –∫–æ–º–∞–Ω–¥—É <code>/start</code>

üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã –ò–ò –∞–≥–µ–Ω—Ç—ã:</b>
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ OpenAI –∞–≥–µ–Ω—Ç—ã (–≤–∫–ª—é—á–µ–Ω—ã –≤ —Ç–æ–∫–µ–Ω—ã)
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º

{Emoji.FIRE} –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üì± –ù–∞–ø–∏—Å–∞—Ç—å @{bot_info.username}",
                        url=f"https://t.me/{bot_info.username}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                        callback_data=f"bot_{bot_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.LIST} –í—Å–µ –º–æ–∏ –±–æ—Ç—ã",
                        callback_data="my_bots"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_main"
                    )
                ]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            
            logger.info(
                "Bot created successfully", 
                user_id=message.from_user.id,
                bot_username=bot_info.username,
                bot_id=bot_id
            )
            
        except Exception as e:
            logger.error("Failed to create bot", error=str(e))
            await message.answer(
                f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞!</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=self.get_back_keyboard()
            )
    
    def _validate_token(self, token: str) -> bool:
        """Validate token format"""
        import re
        pattern = r'^\d+:[A-Za-z0-9_-]+$'
        return bool(re.match(pattern, token))
    
    async def _verify_token(self, token: str):
        """Verify token with Telegram"""
        try:
            temp_bot = Bot(token=token)
            bot_info = await temp_bot.get_me()
            await temp_bot.session.close()
            return bot_info
        except Exception as e:
            logger.error("Token verification failed", error=str(e))
            return None
    
    # ‚úÖ BOT MANAGEMENT ACTIONS
    
    async def _show_configure_instructions(self, callback: CallbackQuery, bot):
        """Show configuration instructions"""
        text = f"""
{Emoji.SETTINGS} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ @{bot.bot_username}</b>

{Emoji.NEW} <b>–£ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>

{Emoji.ROCKET} <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º @{bot.bot_username}
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code>
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

{Emoji.INFO} <b>–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ:</b>
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
- üé® <b>–ò–ò –∞–≥–µ–Ω—Ç—ã OpenAI</b> (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–∞—à–∏ 500,000 —Ç–æ–∫–µ–Ω–æ–≤)
- üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –ò–ò –ø–ª–∞—Ç—Ñ–æ—Ä–º</b>

{Emoji.FIRE} <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
- –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
- –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ—â–Ω—ã–µ –ò–ò –∞–≥–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üì± –ù–∞–ø–∏—Å–∞—Ç—å @{bot.bot_username}",
                    url=f"https://t.me/{bot.bot_username}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ",
                    callback_data=f"bot_{bot.bot_id}"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _show_bot_quick_stats(self, callback: CallbackQuery, bot):
        """Show quick bot statistics"""
        try:
            # Get real-time stats from bot manager
            bot_status = {"status": "unknown", "running": False}
            if self.bot_manager:
                bot_status = self.bot_manager.get_bot_status(bot.bot_id)
            
            status_emoji = Emoji.SUCCESS if bot_status.get('running', False) else Emoji.ERROR
            status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot_status.get('running', False) else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            # Get button stats if available
            button_stats = bot_status.get('button_stats', {})
            
            # ‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ UserManager
            token_info = ""
            try:
                user = await UserManager.get_user(callback.from_user.id)
                if user:
                    tokens_used = getattr(user, 'tokens_used', 0)
                    tokens_limit = user.tokens_limit_total
                    tokens_remaining = tokens_limit - tokens_used
                    usage_percent = round((tokens_used / tokens_limit * 100), 1) if tokens_limit > 0 else 0
                    
                    token_info = f"""
üí∞ <b>–¢–æ–∫–µ–Ω—ã OpenAI:</b>
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used:,} –∏–∑ {tokens_limit:,} ({usage_percent}%)
- –û—Å—Ç–∞–ª–æ—Å—å: {tokens_remaining:,} —Ç–æ–∫–µ–Ω–æ–≤
"""
            except Exception as token_error:
                logger.warning("Could not get token balance for stats", error=str(token_error))
            
            text = f"""
{Emoji.CHART} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{bot.bot_username}</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
{Emoji.USERS} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {bot.total_subscribers}
{Emoji.BROADCAST} <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {bot.total_messages_sent}
{token_info}
{Emoji.BUTTON} <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫:</b>
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {button_stats.get('welcome_buttons_sent', 0)}
- –ü—Ä–æ—â–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {button_stats.get('goodbye_buttons_sent', 0)}
- –í—Å–µ–≥–æ –Ω–∞–∂–∞—Ç–∏–π: {button_stats.get('button_clicks', 0)}
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {button_stats.get('confirmation_sent', 0)}

{Emoji.FUNNEL} <b>–í–æ—Ä–æ–Ω–∫–∏:</b>
- –ó–∞–ø—É—â–µ–Ω–æ: {button_stats.get('funnel_starts', 0)}

{Emoji.CHART} <b>–°–æ–∑–¥–∞–Ω:</b> {bot.created_at.strftime('%d.%m.%Y –≤ %H:%M')}

{Emoji.INFO} <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @{bot.bot_username} –∫–æ–º–∞–Ω–¥—É /start
–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üì± –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å @{bot.bot_username}",
                        url=f"https://t.me/{bot.bot_username}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=f"manage_stats_{bot.bot_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ",
                        callback_data=f"bot_{bot.bot_id}"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show bot stats", bot_id=bot.bot_id, error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    async def _restart_bot(self, callback: CallbackQuery, bot):
        """Restart bot"""
        try:
            if self.bot_manager:
                await self.bot_manager.restart_bot(bot.bot_id)
                await callback.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!", show_alert=True)
                
                # Refresh bot info
                await self.cb_bot_details(
                    callback=type('obj', (object,), {
                        'data': f'bot_{bot.bot_id}',
                        'answer': callback.answer,
                        'message': callback.message,
                        'from_user': callback.from_user
                    })()
                )
            else:
                await callback.answer("Bot Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                
        except Exception as e:
            logger.error("Failed to restart bot", bot_id=bot.bot_id, error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", show_alert=True)
    
    async def _show_delete_confirmation(self, callback: CallbackQuery, bot):
        """Show bot deletion confirmation"""
        text = f"""
{Emoji.WARNING} <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ @{bot.bot_username}?

{Emoji.INFO} <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
- –£–¥–∞–ª–∏—Ç –±–æ—Ç–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏
- –£–¥–∞–ª–∏—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- –£–¥–∞–ª–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∞–≥–µ–Ω—Ç–æ–≤
- <b>–ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨!</b>

üí∞ <b>–í–∞–∂–Ω–æ:</b> –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã OpenAI (500,000) –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.

{Emoji.WARNING} <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –°–∞–º –±–æ—Ç –≤ Telegram –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{Emoji.DELETE} –î–∞, —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞",
                    callback_data=f"confirm_delete_{bot.bot_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞",
                    callback_data=f"bot_{bot.bot_id}"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def _confirm_delete_bot(self, callback: CallbackQuery):
        """Confirm bot deletion with owner verification"""
        await callback.answer()
        
        bot_id = callback.data.replace("confirm_delete_", "")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
            bot = await db.get_bot_by_id(bot_id)
            if not bot:
                await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if bot.user_id != callback.from_user.id:
                await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", show_alert=True)
                return
            
            logger.info("User confirmed bot deletion", 
                       user_id=callback.from_user.id,
                       bot_id=bot_id,
                       bot_username=bot.bot_username)
            
            # Remove from bot manager
            if self.bot_manager:
                try:
                    await self.bot_manager.remove_bot(bot_id)
                    logger.info("Bot removed from manager", bot_id=bot_id)
                except Exception as e:
                    logger.error("Failed to remove bot from manager", bot_id=bot_id, error=str(e))
            
            # Delete from database
            await db.delete_user_bot(bot_id)
            
            await callback.message.edit_text(
                f"{Emoji.SUCCESS} <b>–ë–æ—Ç @{bot.bot_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                f"–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                f"üí∞ <b>–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã OpenAI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b> –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{Emoji.LIST} –ú–æ–∏ –±–æ—Ç—ã",
                            callback_data="my_bots"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_main"
                        )
                    ]
                ])
            )
            
            logger.info("Bot deleted successfully", 
                       bot_id=bot_id,
                       bot_username=bot.bot_username,
                       owner_id=callback.from_user.id)
            
        except Exception as e:
            logger.error("Failed to delete bot", bot_id=bot_id, error=str(e), exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞", show_alert=True)
    
    # ‚úÖ BOT LIFECYCLE
    
    async def start_polling(self):
        """Start bot polling"""
        await self.set_commands()
        logger.info("‚úÖ Master bot started with trial system, access control, media broadcast functionality, improved referral system, and file_id command")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """Stop bot"""
        try:
            await self.bot.session.close()
            logger.info("Master bot stopped")
        except Exception as e:
            logger.error("Error closing bot session", error=str(e))
