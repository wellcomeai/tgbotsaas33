"""
–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""
import structlog
from database.managers.user_manager import UserManager

logger = structlog.get_logger()

async def check_user_access(user_id: int, feature: str = "general") -> tuple[bool, dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Returns:
        (has_access, status_info)
    """
    has_access, status = await UserManager.check_user_has_access(user_id)
    
    logger.debug("Access check", 
                user_id=user_id, 
                feature=feature,
                has_access=has_access,
                status=status.get('status'))
    
    return has_access, status

def require_access(feature: str = "general"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    def decorator(func):
        async def wrapper(message_or_callback, *args, **kwargs):
            user_id = message_or_callback.from_user.id
            has_access, status = await check_user_access(user_id, feature)
            
            if not has_access:
                await send_access_denied_message(message_or_callback, status)
                return
            
            return await func(message_or_callback, *args, **kwargs)
        return wrapper
    return decorator

async def send_access_denied_message(message_or_callback, status: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞"""
    from config import Emoji, settings
    
    if status['status'] == 'expired':
        if status.get('trial_expired'):
            text = f"""
{Emoji.WARNING} <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

–í–∞—à–∏ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∏.

üíé <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b>
- –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É AI ADMIN
- –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.robokassa_payment_amount}‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
- –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ

{Emoji.FIRE} <b>–ß—Ç–æ –¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫–∞:</b>
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
- –ò–ò –∞–≥–µ–Ω—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π  
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
        else:
            text = f"""
{Emoji.WARNING} <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Bot Factory –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.robokassa_payment_amount}‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π
"""
    else:
        text = f"{Emoji.ERROR} –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {settings.robokassa_payment_amount}‚ÇΩ",
                callback_data="pay_subscription"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main"
            )
        ]
    ])
    
    try:
        if hasattr(message_or_callback, 'message'):
            # Callback query
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        else:
            # Message
            await message_or_callback.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error("Failed to send access denied message", error=str(e))
