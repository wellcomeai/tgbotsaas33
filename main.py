import asyncio
import signal
import sys
import os
from contextlib import asynccontextmanager
from aiohttp import web, web_runner
import aiohttp

import structlog
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

from config import settings
from database import init_database, close_database
from bots import MasterBot
from services import BotManager

# ‚úÖ –í–°–¢–†–û–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
async def run_auto_migrations():
    """
    –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger = structlog.get_logger()
    logger.info("üîß Starting automatic database migration...")
    
    try:
        from sqlalchemy.ext.asyncio import create_async_engine
        from sqlalchemy.pool import NullPool
        from sqlalchemy import text
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_engine = create_async_engine(
            settings.database_url.replace("postgresql://", "postgresql+asyncpg://"),
            poolclass=NullPool,
            echo=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–π –≤—ã–≤–æ–¥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            future=True
        )
        
        async with migration_engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            logger.info("üìã Checking existing table structure...")
            
            result = await conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'user_bots'
                ORDER BY column_name
            """))
            
            existing_columns = {row[0] for row in result.fetchall()}
            logger.info("üìã Found existing columns", count=len(existing_columns))
            
            # –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            required_migrations = [
                ("openai_agent_id", "VARCHAR(255)"),
                ("openai_agent_name", "VARCHAR(255)"),
                ("openai_agent_instructions", "TEXT"),
                ("openai_model", "VARCHAR(100) DEFAULT 'gpt-4o'"),
                ("openai_settings", "JSONB"),
                ("external_api_token", "VARCHAR(255)"),
                ("external_bot_id", "VARCHAR(100)"),
                ("external_platform", "VARCHAR(50)"),
                ("external_settings", "JSONB"),
                
                # ‚úÖ NEW: Referral program fields
                ("referral_code", "VARCHAR(20) UNIQUE"),
                ("referred_by", "BIGINT REFERENCES users(id)"),
                ("referral_earnings", "NUMERIC(10,2) DEFAULT 0.0 NOT NULL"),
                ("total_referrals", "INTEGER DEFAULT 0 NOT NULL"),
            ]
            
            added_count = 0
            skipped_count = 0
            
            for col_name, col_type in required_migrations:
                if col_name not in existing_columns:
                    try:
                        alter_sql = f"ALTER TABLE user_bots ADD COLUMN {col_name} {col_type}"
                        logger.info("üîß Adding missing column", column=col_name, type=col_type)
                        
                        await conn.execute(text(alter_sql))
                        await conn.commit()
                        
                        logger.info("‚úÖ Successfully added column", column=col_name)
                        added_count += 1
                        
                    except Exception as e:
                        logger.error("‚ùå Failed to add column", column=col_name, error=str(e))
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
                        continue
                else:
                    logger.debug("‚è≠Ô∏è Column already exists", column=col_name)
                    skipped_count += 1
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
            await migration_engine.dispose()
            
            if added_count > 0:
                logger.info("üéâ Migration completed successfully", 
                           added=added_count, 
                           skipped=skipped_count,
                           total=len(required_migrations))
            else:
                logger.info("‚úÖ Database schema is up to date", 
                           total_columns=len(required_migrations))
            
            return True
            
    except Exception as e:
        logger.error("üí• Migration failed", error=str(e), exc_info=True)
        return False


# Configure structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()


class BotFactory:
    """Main Bot Factory application"""
    
    def __init__(self):
        self.master_bot = None
        self.bot_manager = None
        self.web_app = None
        self.web_runner = None
        self.running = False
        self.scheduler_task = None
        self.mass_broadcast_scheduler = None
        self.mass_broadcast_scheduler_task = None
    
    async def health_check(self, request):
        """Health check endpoint"""
        bot_statuses = {}
        if self.bot_manager:
            bot_statuses = self.bot_manager.get_all_bot_statuses()
        
        return web.json_response({
            "status": "healthy",
            "app": settings.app_name,
            "version": settings.app_version,
            "running": self.running,
            "master_bot_running": self.master_bot is not None,
            "user_bots_count": len(bot_statuses),
            "active_user_bots": sum(1 for status in bot_statuses.values() if status.get('running', False)),
            "migrations_available": True,
            "scheduler_running": self.scheduler_task is not None and not self.scheduler_task.done(),
            "mass_broadcast_scheduler_running": self.mass_broadcast_scheduler_task is not None and not self.mass_broadcast_scheduler_task.done(),
            "robokassa_configured": bool(settings.robokassa_merchant_login and settings.robokassa_password2)
        })
    
    async def robokassa_webhook(self, request):
        """‚úÖ UPDATED: Robokassa webhook handler with token purchase support and referral commissions"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Robokassa
            if not settings.robokassa_merchant_login or not settings.robokassa_password2:
                logger.error("‚ùå Robokassa not properly configured", 
                           has_login=bool(settings.robokassa_merchant_login),
                           has_password2=bool(settings.robokassa_password2))
                return web.Response(text="ERROR: Payment system not configured", status=503)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã
            data = await request.post()
            
            logger.info("üí∞ Robokassa webhook received", 
                       data=dict(data),
                       client_ip=request.remote,
                       user_agent=request.headers.get('User-Agent', 'Unknown'))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª—é—á–∞—è Shp_user_id
            signature_value = data.get('SignatureValue', '').upper()
            out_sum = data.get('OutSum', '')
            inv_id = data.get('InvId', '')
            shp_user_id = data.get('Shp_user_id', '')  # ‚úÖ –ù–û–í–û–ï: user_id –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
            
            # ‚úÖ –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é user_id
            if shp_user_id.endswith('tokens'):
                item_type = 'tokens'
                user_id_str = shp_user_id[:-6]  # –£–±–∏—Ä–∞–µ–º 'tokens'
            else:
                item_type = 'subscription'
                user_id_str = shp_user_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            missing_params = []
            if not signature_value:
                missing_params.append('SignatureValue')
            if not out_sum:
                missing_params.append('OutSum')
            if not inv_id:
                missing_params.append('InvId')
            if not shp_user_id:
                missing_params.append('Shp_user_id')
            
            if missing_params:
                logger.error("‚ùå Missing required Robokassa parameters", 
                           missing=missing_params,
                           received_params=list(data.keys()))
                return web.Response(text=f"ERROR: Missing parameters: {', '.join(missing_params)}", status=400)
            
            # ‚úÖ –£–ü–†–û–©–ï–ù–û: –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            import hashlib
            signature_string = f"{out_sum}:{inv_id}:{settings.robokassa_password2}:Shp_user_id={shp_user_id}"
            expected_signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest().upper()
            
            logger.info("üîç Signature verification (simplified method)", 
                       signature_string=signature_string,
                       received_signature=signature_value,
                       expected_signature=expected_signature,
                       match=signature_value == expected_signature,
                       shp_user_id=shp_user_id,
                       item_type=item_type,
                       user_id_str=user_id_str)
            
            if signature_value != expected_signature:
                logger.error("‚ùå Invalid Robokassa signature", 
                           received=signature_value,
                           expected=expected_signature,
                           out_sum=out_sum,
                           inv_id=inv_id,
                           shp_user_id=shp_user_id,
                           item_type=item_type,
                           signature_string=signature_string)
                return web.Response(text="ERROR: Invalid signature", status=400)
            
            logger.info("‚úÖ Robokassa signature verified successfully", 
                       out_sum=out_sum,
                       inv_id=inv_id,
                       shp_user_id=shp_user_id,
                       item_type=item_type)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Shp_user_id
            try:
                user_id = int(user_id_str)
                
                logger.info("‚úÖ User ID extracted from Shp_user_id", 
                           invoice_id=inv_id,
                           user_id=user_id,
                           item_type=item_type,
                           original_shp_user_id=shp_user_id)
            except ValueError as e:
                logger.error("‚ùå Failed to parse user_id from Shp_user_id", 
                           shp_user_id=shp_user_id,
                           error=str(e))
                return web.Response(text="ERROR: Invalid user_id format", status=400)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            try:
                from database import db
                from datetime import datetime, timedelta
                
                user = await db.get_user(user_id)
                if not user:
                    logger.error("‚ùå User not found for payment", 
                               user_id=user_id,
                               invoice_id=inv_id,
                               amount=out_sum,
                               item_type=item_type)
                    return web.Response(text="ERROR: User not found", status=400)
            
            except Exception as db_error:
                logger.error("üí• Database error getting user", 
                           user_id=user_id,
                           invoice_id=inv_id,
                           error=str(db_error),
                           exc_info=True)
                return web.Response(text="ERROR: Database error", status=500)
            
            # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            if item_type == 'tokens':
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫ –±–∞–ª–∞–Ω—Å—É
                    tokens_to_add = settings.tokens_per_purchase
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
                    new_total = (user.tokens_limit_total or 500000) + tokens_to_add
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    await db.update_user_tokens_limit(user_id, new_total)
                    
                    logger.info("‚úÖ Tokens added successfully", 
                               user_id=user_id,
                               username=user.username,
                               tokens_added=tokens_to_add,
                               old_balance=user.tokens_limit_total or 500000,
                               new_balance=new_total,
                               payment_amount=out_sum,
                               invoice_id=inv_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö
                    try:
                        if self.master_bot:
                            tokens_message = f"""
üéâ <b>–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã!</b>

üí∞ <b>–û–ø–ª–∞—á–µ–Ω–æ:</b> {out_sum} ‚ÇΩ
üîã <b>–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {tokens_to_add:,}
üìä <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_total:,} —Ç–æ–∫–µ–Ω–æ–≤

ü§ñ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
- –°–æ–∑–¥–∞–≤–∞—Ç—å OpenAI –ò–ò –∞–≥–µ–Ω—Ç–æ–≤ –≤ –≤–∞—à–∏—Ö –±–æ—Ç–∞—Ö
- –û–±—â–∞—Ç—å—Å—è —Å GPT-4o —á–µ—Ä–µ–∑ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤
- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üöÄ
"""
                            await self.master_bot.bot.send_message(
                                chat_id=user_id,
                                text=tokens_message,
                                parse_mode="HTML"
                            )
                            logger.info("üì© Tokens notification sent to user", user_id=user_id)
                    except Exception as notification_error:
                        logger.warning("‚ö†Ô∏è Failed to send tokens notification", 
                                     user_id=user_id,
                                     error=str(notification_error))
                
                except Exception as tokens_error:
                    logger.error("üí• Database error during tokens update", 
                               user_id=user_id,
                               invoice_id=inv_id,
                               amount=out_sum,
                               error=str(tokens_error),
                               exc_info=True)
                    return web.Response(text="ERROR: Tokens update failed", status=500)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
            elif item_type == 'subscription' or item_type is None:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
                    current_time = datetime.now()
                    if user.subscription_expires_at and user.subscription_expires_at > current_time:
                        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        new_expires_at = user.subscription_expires_at + timedelta(days=settings.subscription_days_per_payment)
                        action = "extended"
                    else:
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        new_expires_at = current_time + timedelta(days=settings.subscription_days_per_payment)
                        action = "activated"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                    await db.update_user_subscription(
                        user_id=user_id,
                        plan="ai_admin",
                        expires_at=new_expires_at,
                        active=True
                    )
                    
                    logger.info("‚úÖ Subscription updated successfully", 
                               user_id=user_id,
                               username=user.username,
                               plan="ai_admin",
                               expires_at=new_expires_at,
                               payment_amount=out_sum,
                               invoice_id=inv_id,
                               action=action)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        if self.master_bot:
                            success_message = f"""
üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üí∞ <b>–°—É–º–º–∞:</b> {out_sum} ‚ÇΩ
üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ AI ADMIN {action.replace('activated', '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞').replace('extended', '–ø—Ä–æ–¥–ª–µ–Ω–∞')} –¥–æ:</b> {new_expires_at.strftime('%d.%m.%Y')}
üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞

‚ú® <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±–æ—Ç—ã
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ò–ò –∞–≥–µ–Ω—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Bot Factory! üöÄ
"""
                            await self.master_bot.bot.send_message(
                                chat_id=user_id,
                                text=success_message,
                                parse_mode="HTML"
                            )
                            logger.info("üì© Payment notification sent to user", user_id=user_id)
                    except Exception as notification_error:
                        logger.warning("‚ö†Ô∏è Failed to send payment notification", 
                                     user_id=user_id,
                                     error=str(notification_error))
                    
                except Exception as subscription_error:
                    logger.error("üí• Database error during subscription update", 
                               user_id=user_id,
                               invoice_id=inv_id,
                               amount=out_sum,
                               error=str(subscription_error),
                               exc_info=True)
                    return web.Response(text="ERROR: Subscription update failed", status=500)
            
            else:
                logger.error("‚ùå Unknown item_type", 
                           item_type=item_type,
                           user_id=user_id,
                           invoice_id=inv_id)
                return web.Response(text="ERROR: Unknown item type", status=400)
            
            # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            try:
                from database.managers.user_manager import UserManager
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transaction_type = "tokens" if item_type == 'tokens' else "subscription"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –∫–æ–º–∏—Å—Å–∏—é
                referral_result = await UserManager.process_referral_payment(
                    user_id=user_id,
                    payment_amount=float(out_sum),
                    transaction_type=transaction_type
                )
                
                if referral_result.get('success'):
                    referrer_id = referral_result['referrer_id']
                    commission_amount = referral_result['commission_amount']
                    
                    logger.info("‚úÖ Referral commission processed", 
                               referrer_id=referrer_id,
                               commission_amount=commission_amount,
                               payment_type=transaction_type)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏
                    try:
                        if self.master_bot:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ
                            from database import db
                            referrer = await db.get_user(referrer_id)
                            referrer_stats = await db.get_user_referral_stats(referrer_id)
                            
                            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏–ª
                            referred_user_info = f"@{user.username}" if user.username else user.first_name or f"ID: {user_id}"
                            
                            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Messages –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
                            from messages import Messages
                            
                            commission_message = Messages.REFERRAL_COMMISSION_EARNED.format(
                                commission_amount=f"{commission_amount:.2f}",
                                payment_amount=out_sum,
                                referred_user=referred_user_info,
                                total_earnings=f"{referrer_stats.get('total_earnings', 0):.2f}",
                                total_referrals=referrer_stats.get('total_referrals', 0)
                            )
                            
                            await self.master_bot.bot.send_message(
                                chat_id=referrer_id,
                                text=commission_message,
                                parse_mode="HTML"
                            )
                            
                            logger.info("üì© Referral commission notification sent", 
                                       referrer_id=referrer_id,
                                       commission_amount=commission_amount)
                            
                    except Exception as notification_error:
                        logger.warning("‚ö†Ô∏è Failed to send referral commission notification", 
                                     referrer_id=referrer_id,
                                     error=str(notification_error))
                
                else:
                    logger.info("‚ùå No referral commission (no referrer or error)", 
                               user_id=user_id,
                               reason=referral_result.get('reason', 'unknown'))
            
            except Exception as referral_error:
                logger.error("üí• Failed to process referral commission", 
                            user_id=user_id,
                            payment_amount=out_sum,
                            error=str(referral_error))
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –†–æ–±–æ–∫–∞—Å—Å—ã
            return web.Response(text=f"OK{inv_id}")
            
        except Exception as e:
            logger.error("üí• Robokassa webhook critical error", 
                       error=str(e), 
                       exc_info=True)
            return web.Response(text="ERROR", status=500)
    
    async def startup(self):
        """Application startup with automatic migrations"""
        try:
            logger.info("üöÄ Starting Bot Factory", 
                       version=settings.app_version,
                       auto_migrations=True)
            
            # ‚úÖ –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
            logger.info("üîÑ Running automatic database migrations...")
            migration_success = await run_auto_migrations()
            
            if not migration_success:
                logger.error("üí• Database migrations failed! Application cannot start safely.")
                raise RuntimeError("Database migrations failed")
            
            logger.info("‚úÖ Database migrations completed successfully")
            
            # Initialize database (this will create tables if they don't exist)
            logger.info("üîó Initializing database connection...")
            await init_database()
            logger.info("‚úÖ Database initialized successfully")
            
            # Initialize bot manager
            logger.info("ü§ñ Creating Bot Manager...")
            self.bot_manager = BotManager()
            logger.info("‚ñ∂Ô∏è Starting Bot Manager...")
            await self.bot_manager.start()
            logger.info("‚úÖ Bot Manager initialized successfully")
            
            # Initialize master bot
            logger.info("üëë Creating Master Bot...")
            self.master_bot = MasterBot(self.bot_manager)
            logger.info("‚úÖ Master bot created successfully")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
            logger.info("‚è∞ Starting message limit scheduler...")
            try:
                from services.scheduler.message_limit_reset import message_limit_scheduler
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                if hasattr(message_limit_scheduler, 'start'):
                    self.scheduler_task = asyncio.create_task(message_limit_scheduler.start())
                    logger.info("‚úÖ Message limit scheduler started successfully")
                else:
                    logger.warning("‚ö†Ô∏è Message limit scheduler has no start method")
                    self.scheduler_task = None
            except ImportError as e:
                logger.error("üí• Failed to import message limit scheduler", error=str(e))
                self.scheduler_task = None
            except Exception as e:
                logger.error("üí• Failed to start message limit scheduler", error=str(e), exc_info=True)
                self.scheduler_task = None
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Å bot_manager
            logger.info("üì® Initializing Mass Broadcast Scheduler...")
            try:
                from database import db
                from services.mass_broadcast_scheduler import MassBroadcastScheduler
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –∏ bot_manager –≥–æ—Ç–æ–≤—ã
                if not db:
                    raise RuntimeError("Database not initialized")
                if not self.bot_manager:
                    raise RuntimeError("Bot manager not initialized")
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º bot_manager –≤–º–µ—Å—Ç–æ master_bot.bot
                logger.info("‚úÖ Initializing Mass Broadcast Scheduler with bot_manager...")
                self.mass_broadcast_scheduler = MassBroadcastScheduler(db, self.bot_manager)
                logger.info("‚úÖ Mass Broadcast Scheduler initialized with bot_manager successfully")
                
                # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                logger.info("üì® Starting mass broadcast scheduler...")
                if hasattr(self.mass_broadcast_scheduler, 'start'):
                    self.mass_broadcast_scheduler_task = asyncio.create_task(
                        self.mass_broadcast_scheduler.start()
                    )
                    logger.info("‚úÖ Mass broadcast scheduler started successfully")
                else:
                    logger.warning("‚ö†Ô∏è Mass broadcast scheduler has no start method")
                    self.mass_broadcast_scheduler = None
                    self.mass_broadcast_scheduler_task = None
                
            except ImportError as e:
                logger.warning("‚ö†Ô∏è Mass Broadcast Scheduler not available", error=str(e))
                self.mass_broadcast_scheduler = None
                self.mass_broadcast_scheduler_task = None
            except Exception as e:
                logger.error("üí• Failed to initialize/start Mass Broadcast Scheduler", 
                           error=str(e), exc_info=True)
                self.mass_broadcast_scheduler = None
                self.mass_broadcast_scheduler_task = None
            
            # Setup web server for health checks AND payments
            logger.info("üåê Setting up web server with payment webhooks...")
            self.web_app = web.Application()
            
            # Health check routes
            self.web_app.router.add_get("/health", self.health_check)
            self.web_app.router.add_get("/", self.health_check)
            
            # Payment webhook routes
            self.web_app.router.add_post("/webhook/robokassa", self.robokassa_webhook)
            
            # Start web server
            self.web_runner = web_runner.AppRunner(self.web_app)
            await self.web_runner.setup()
            
            # Get port from environment or use default
            port = int(os.environ.get("PORT", 8080))
            site = web_runner.TCPSite(self.web_runner, "0.0.0.0", port)
            await site.start()
            
            logger.info("üåê Web server started successfully with payment webhooks", 
                       port=port,
                       message_scheduler_running=self.scheduler_task is not None and not self.scheduler_task.done(),
                       mass_broadcast_scheduler_running=self.mass_broadcast_scheduler_task is not None and not self.mass_broadcast_scheduler_task.done(),
                       payment_amount=f"{settings.robokassa_payment_amount}‚ÇΩ",
                       subscription_days=settings.subscription_days_per_payment,
                       robokassa_production=not settings.robokassa_is_test,
                       robokassa_configured=bool(settings.robokassa_merchant_login and settings.robokassa_password2),
                       available_routes=[
                           "GET /health",
                           "GET /",
                           "POST /webhook/robokassa"
                       ])
            
            self.running = True
            logger.info("üéâ Bot Factory startup completed successfully!")
            
        except Exception as e:
            logger.error("üí• Failed to start Bot Factory", error=str(e), exc_info=True)
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """Application shutdown"""
        logger.info("üõë Shutting down Bot Factory")
        self.running = False
        
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤
            if self.scheduler_task and not self.scheduler_task.done():
                logger.info("‚è∞ Stopping message limit scheduler...")
                self.scheduler_task.cancel()
                try:
                    await self.scheduler_task
                except asyncio.CancelledError:
                    logger.info("‚úÖ Message limit scheduler stopped")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Error stopping scheduler", error=str(e))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            if self.mass_broadcast_scheduler_task and not self.mass_broadcast_scheduler_task.done():
                logger.info("üì® Stopping mass broadcast scheduler...")
                if self.mass_broadcast_scheduler and hasattr(self.mass_broadcast_scheduler, 'stop'):
                    try:
                        await self.mass_broadcast_scheduler.stop()
                    except Exception as e:
                        logger.warning("‚ö†Ô∏è Error stopping mass broadcast scheduler gracefully", error=str(e))
                
                self.mass_broadcast_scheduler_task.cancel()
                try:
                    await self.mass_broadcast_scheduler_task
                except asyncio.CancelledError:
                    logger.info("‚úÖ Mass broadcast scheduler stopped")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Error stopping mass broadcast scheduler task", error=str(e))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫—Ä—ã—Ç–∏–µ AI –∫–ª–∏–µ–Ω—Ç–∞
            try:
                from services.ai_assistant import ai_client
                if hasattr(ai_client, 'close'):
                    await ai_client.close()
                    logger.info("ü§ñ AI Assistant client closed")
            except ImportError:
                logger.debug("AI Assistant service not available, skipping client cleanup")
            except Exception as e:
                logger.warning("‚ö†Ô∏è Error closing AI client", error=str(e))
            
            # Stop master bot
            if self.master_bot:
                try:
                    await self.master_bot.stop()
                    logger.info("üëë Master bot stopped")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Error stopping master bot", error=str(e))
            
            # Stop bot manager
            if self.bot_manager:
                try:
                    await self.bot_manager.stop()
                    logger.info("ü§ñ Bot Manager stopped")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Error stopping bot manager", error=str(e))
            
            # Stop web server
            if self.web_runner:
                try:
                    await self.web_runner.cleanup()
                    logger.info("üåê Web server stopped")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Error stopping web server", error=str(e))
            
            # Close database connections
            try:
                await close_database()
                logger.info("üîó Database connections closed")
            except Exception as e:
                logger.warning("‚ö†Ô∏è Error closing database", error=str(e))
            
        except Exception as e:
            logger.error("üí• Error during shutdown", error=str(e), exc_info=True)
        
        logger.info("‚úÖ Bot Factory shutdown completed")
    
    async def run(self):
        """Run the application"""
        try:
            await self.startup()
            
            if self.master_bot:
                # Run master bot
                await self.master_bot.start_polling()
            
        except (KeyboardInterrupt, SystemExit):
            logger.info("‚ö†Ô∏è Received exit signal")
        except Exception as e:
            logger.error("üí• Unexpected error", error=str(e), exc_info=True)
        finally:
            await self.shutdown()


def setup_signal_handlers(bot_factory: BotFactory):
    """Setup signal handlers for graceful shutdown"""
    
    def signal_handler(signum, frame):
        logger.info("üì° Received signal", signal=signum)
        # Create new event loop for shutdown if current one is closed
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            loop.create_task(bot_factory.shutdown())
        except Exception as e:
            logger.error("üí• Error in signal handler", error=str(e))
            sys.exit(1)
    
    # Register signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """Main application entry point"""
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    config_errors = []
    
    if not settings.master_bot_token:
        config_errors.append("MASTER_BOT_TOKEN is required")
    
    if not settings.database_url:
        config_errors.append("DATABASE_URL is required")
    
    if config_errors:
        for error in config_errors:
            logger.error(f"‚ùå {error}")
        sys.exit(1)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—ã
    logger.info("üöÄ Starting Bot Factory Application", 
               environment="production" if not settings.debug else "development",
               database_host=settings.database_url.split('@')[-1].split('/')[0] if '@' in settings.database_url else "localhost",
               auto_migrations_enabled=True,
               payment_webhooks_enabled=True,
               robokassa_production=not settings.robokassa_is_test,
               robokassa_configured=bool(settings.robokassa_merchant_login and settings.robokassa_password2),
               payment_amount=f"{settings.robokassa_payment_amount}‚ÇΩ",
               subscription_days=settings.subscription_days_per_payment,
               tokens_per_purchase=settings.tokens_per_purchase if hasattr(settings, 'tokens_per_purchase') else "Not configured",
               python_version=f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
               platform=sys.platform)
    
    # Create and run bot factory
    bot_factory = BotFactory()
    setup_signal_handlers(bot_factory)
    
    try:
        await bot_factory.run()
    except Exception as e:
        logger.error("üí• Fatal error", error=str(e), exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if sys.version_info < (3, 8):
        print(f"‚ùå Python 3.8+ is required, current version: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        sys.exit(1)
    
    # Set event loop policy for Windows
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è Application interrupted by user")
        sys.exit(0)
    except Exception as e:
        logger.error("üí• Failed to run application", error=str(e), exc_info=True)
        sys.exit(1)
