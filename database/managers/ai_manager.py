"""
AI Manager - handles all AI assistant related database operations.

Responsibilities:
- OpenAI agent configuration and management (Responses API)
- External AI platforms (ChatForYou, ProTalk) management
- AI conversation tracking and context management
- AI assistant settings and statistics
- AI platform detection and validation
- AI configuration synchronization and validation
- Vector Store and Knowledge Base management
"""

from datetime import datetime
from typing import Optional, Dict, Tuple, Any, List
from sqlalchemy import select, update, func, text
from sqlalchemy.sql import text
import structlog

from ..connection import get_db_session

logger = structlog.get_logger()


class AIManager:
    """Manager for AI assistant related database operations"""
    
    # ===== OPENAI RESPONSES API METHODS =====
    
    @staticmethod
    async def save_openai_agent_config_responses_api(bot_id: str, agent_id: str, config: Dict) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                agent_name = config.get('agent_name', config.get('name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'))
                agent_role = config.get('agent_role', config.get('system_prompt', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'))
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                if 'system_prompt' in config and config['system_prompt']:
                    full_system_prompt = config['system_prompt']
                else:
                    full_system_prompt = f"–¢—ã - {agent_role}. –¢–≤–æ–µ –∏–º—è {agent_name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                updated_config = config.copy()
                updated_config.update({
                    'system_prompt': full_system_prompt,
                    'agent_name': agent_name,
                    'generation_method': 'auto_generated' if 'system_prompt' not in config else 'provided'
                })
                
                logger.info("üíæ Saving OpenAI agent with full sync", 
                           bot_id=bot_id,
                           agent_id=agent_id,
                           agent_name=agent_name)
                
                # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï –ø–æ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(
                        # ‚úÖ –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø - –ö–†–ò–¢–ò–ß–ù–û –î–õ–Ø –†–ê–ë–û–¢–´
                        ai_assistant_type='openai',
                        ai_assistant_enabled=True,  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –í–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                        
                        # ‚úÖ OPENAI –ü–û–õ–Ø - –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´
                        openai_agent_id=agent_id,  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: ID –∞–≥–µ–Ω—Ç–∞
                        openai_agent_name=agent_name,
                        openai_agent_instructions=full_system_prompt,
                        openai_model=config.get('model', config.get('model_used', 'gpt-4o')),
                        
                        # ‚úÖ RESPONSES API –ù–ê–°–¢–†–û–ô–ö–ò
                        openai_use_responses_api=True,
                        openai_store_conversations=config.get('store_conversations', True),
                        openai_conversation_retention_days=config.get('conversation_retention', 30),
                        openai_conversation_contexts={},  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
                        
                        # ‚úÖ JSON –°–û–î–ï–†–ñ–ò–¢ –í–°–ï –î–ê–ù–ù–´–ï
                        openai_settings=updated_config,
                        
                        # ‚úÖ –û–ß–ò–©–ê–ï–ú –í–ù–ï–®–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú–´
                        external_api_token=None,
                        external_bot_id=None,
                        external_platform=None,
                        external_settings=None,
                        
                        # ‚úÖ –í–†–ï–ú–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ OpenAI agent config saved with complete sync", 
                           bot_id=bot_id,
                           agent_id=agent_id,
                           agent_name=agent_name,
                           ai_enabled=True,  # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤–∫–ª—é—á–∏–ª–∏
                           system_prompt_length=len(full_system_prompt))
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to save OpenAI agent config", 
                        bot_id=bot_id,
                        agent_id=agent_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            return False

    # ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    @staticmethod
    async def diagnose_agent_state(bot_id: str) -> Dict:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(
                        UserBot.ai_assistant_enabled,
                        UserBot.ai_assistant_type,
                        UserBot.openai_agent_id,
                        UserBot.openai_agent_name,
                        UserBot.openai_agent_instructions,
                        UserBot.openai_model,
                        UserBot.openai_settings,
                        UserBot.external_api_token,
                        UserBot.external_bot_id,
                        UserBot.external_platform
                    ).where(UserBot.bot_id == bot_id)
                )
                
                row = result.first()
                if not row:
                    return {'status': 'bot_not_found'}
                
                diagnosis = {
                    'bot_id': bot_id,
                    'ai_assistant_enabled': row.ai_assistant_enabled,
                    'ai_assistant_type': row.ai_assistant_type,
                    'openai_fields': {
                        'agent_id': row.openai_agent_id,
                        'agent_name': row.openai_agent_name,
                        'has_instructions': bool(row.openai_agent_instructions),
                        'model': row.openai_model,
                        'has_settings': bool(row.openai_settings)
                    },
                    'external_fields': {
                        'api_token': bool(row.external_api_token),
                        'bot_id': row.external_bot_id,
                        'platform': row.external_platform
                    }
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if row.ai_assistant_type == 'openai':
                    if row.ai_assistant_enabled and row.openai_agent_id:
                        diagnosis['status'] = 'openai_configured'
                    elif row.ai_assistant_enabled:
                        diagnosis['status'] = 'openai_enabled_no_agent'
                    else:
                        diagnosis['status'] = 'openai_disabled'
                elif row.ai_assistant_type in ['chatforyou', 'protalk']:
                    if row.ai_assistant_enabled and row.external_api_token:
                        diagnosis['status'] = 'external_configured'
                    else:
                        diagnosis['status'] = 'external_incomplete'
                else:
                    diagnosis['status'] = 'no_agent_type'
                
                logger.info("üîç Agent diagnosis completed", 
                           bot_id=bot_id,
                           status=diagnosis['status'],
                           ai_enabled=diagnosis['ai_assistant_enabled'],
                           ai_type=diagnosis['ai_assistant_type'])
                
                return diagnosis
                
        except Exception as e:
            logger.error("üí• Failed to diagnose agent state", 
                        bot_id=bot_id,
                        error=str(e))
            return {'status': 'error', 'error': str(e)}

    @staticmethod
    async def recreate_openai_agent(bot_id: str, old_assistant_id: str, new_config: Dict) -> bool:
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await AIManager.clear_ai_configuration(bot_id)
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = await AIManager.save_openai_agent_config_responses_api(
                bot_id=bot_id,
                agent_id=new_config['agent_id'],
                config=new_config
            )
            
            if success:
                logger.info("‚úÖ Agent recreated successfully", 
                           bot_id=bot_id,
                           old_id=old_assistant_id,
                           new_id=new_config['agent_id'])
                return True
            
            return False
            
        except Exception as e:
            logger.error("üí• Failed to recreate agent", 
                        bot_id=bot_id,
                        error=str(e))
            return False

    @staticmethod
    async def get_openai_agent_config_responses_api(assistant_id: str) -> Optional[Dict]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–∏—Å–∫–æ–º –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # ‚úÖ –°–ù–ê–ß–ê–õ–ê –ò–©–ï–ú –í –û–°–ù–û–í–ù–û–ô –¢–ê–ë–õ–ò–¶–ï user_bots (–æ—Å–Ω–æ–≤–Ω—ã–µ AI –∞–≥–µ–Ω—Ç—ã)
                result = await session.execute(
                    select(
                        UserBot.bot_id,
                        UserBot.openai_agent_id,
                        UserBot.openai_agent_name,
                        UserBot.openai_agent_instructions,
                        UserBot.openai_model,
                        UserBot.openai_settings,
                        UserBot.openai_store_conversations,
                        UserBot.openai_conversation_retention_days,
                        UserBot.openai_admin_chat_id,
                        UserBot.ai_assistant_enabled,
                        UserBot.ai_assistant_type
                    ).where(
                        UserBot.openai_agent_id == assistant_id
                    )
                )
                
                row = result.first()
                if row and row.ai_assistant_enabled and row.ai_assistant_type == 'openai':
                    # –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π AI –∞–≥–µ–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    logger.info("‚úÖ Found main AI agent", assistant_id=assistant_id)
                    return await AIManager._build_agent_config_from_user_bot_row(row)
                
                # ‚úÖ –ù–û–í–û–ï: –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù –í user_bots, –ò–©–ï–ú –í content_agents
                content_agent_query = text("""
                    SELECT 
                        ca.bot_id,
                        ca.openai_agent_id,
                        ca.agent_name,
                        ca.instructions,
                        'gpt-4o' as model,
                        ub.openai_admin_chat_id,
                        ub.user_id
                    FROM content_agents ca
                    JOIN user_bots ub ON ca.bot_id = ub.bot_id
                    WHERE ca.openai_agent_id = :assistant_id 
                    AND ca.is_active = true
                """)
                
                content_result = await session.execute(content_agent_query, {'assistant_id': assistant_id})
                content_row = content_result.first()
                
                if content_row:
                    # –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    logger.info("‚úÖ Found content agent", assistant_id=assistant_id)
                    
                    config = {
                        'bot_id': content_row[0],
                        'agent_id': content_row[1],
                        'name': content_row[2],
                        'system_prompt': content_row[3],
                        'model': content_row[4],
                        'admin_chat_id': content_row[5],
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞
                        'store_conversations': True,
                        'conversation_retention': 30,
                        'enable_streaming': True,
                        
                        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                        'temperature': 0.7,
                        'max_tokens': 4000,
                        'top_p': 1.0,
                        'frequency_penalty': 0.0,
                        'presence_penalty': 0.0,
                        
                        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                        'enable_web_search': False,
                        'enable_code_interpreter': False,
                        'enable_file_search': False,
                        'enable_image_generation': False,
                        
                        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
                        'enabled': True,
                        'type': 'content_agent',
                        'agent_source': 'content_agents_table',  # –ú–∞—Ä–∫–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        
                        'settings': {
                            'agent_type': 'content_agent',
                            'source_table': 'content_agents'
                        }
                    }
                    
                    return config
                
                # –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                logger.warning("‚ùå OpenAI agent not found in any table", assistant_id=assistant_id)
                return None
                        
        except Exception as e:
            logger.error("üí• Failed to get OpenAI agent config", 
                        assistant_id=assistant_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            return None

    @staticmethod
    async def _build_agent_config_from_user_bot_row(row) -> Dict:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ vector_store_ids"""
        settings = row.openai_settings or {}
        
        agent_name = (
            settings.get('agent_name') or 
            row.openai_agent_name or 
            'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
        )
        
        system_prompt = (
            settings.get('system_prompt') or 
            row.openai_agent_instructions or 
            f"–¢—ã - {settings.get('agent_role', '–ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')}. –¢–≤–æ–µ –∏–º—è {agent_name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
        )
        
        model_name = (
            settings.get('model_used') or 
            settings.get('model') or 
            row.openai_model or 
            'gpt-4o'
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ vector_store_ids
        vector_store_ids = settings.get('vector_store_ids', [])
        
        logger.info("üîç Building agent config from DB row", 
                   bot_id=row.bot_id,
                   agent_name=agent_name,
                   vector_store_ids=vector_store_ids,
                   enable_file_search=settings.get('enable_file_search', False))
        
        config = {
            'bot_id': row.bot_id,
            'agent_id': row.openai_agent_id,
            'name': agent_name,
            'system_prompt': system_prompt,
            'model': model_name,
            'admin_chat_id': row.openai_admin_chat_id,
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Responses API –∏–∑ JSON —Å fallback
            'store_conversations': row.openai_store_conversations,
            'conversation_retention': row.openai_conversation_retention_days,
            'enable_streaming': settings.get('enable_streaming', True),
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ JSON —Å fallback
            'temperature': settings.get('temperature', 0.7),
            'max_tokens': settings.get('max_tokens', 4000),
            'top_p': settings.get('top_p', 1.0),
            'frequency_penalty': settings.get('frequency_penalty', 0.0),
            'presence_penalty': settings.get('presence_penalty', 0.0),
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ vector_store_ids
            'enable_web_search': settings.get('enable_web_search', False),
            'enable_code_interpreter': settings.get('enable_code_interpreter', False),
            'enable_file_search': settings.get('enable_file_search', False),
            'enable_image_generation': settings.get('enable_image_generation', False),
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: Vector Store IDs –¥–ª—è file_search
            'vector_store_ids': vector_store_ids,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'context_info': settings.get('context_info', True),
            'daily_limit': settings.get('daily_limit'),
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: settings —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª—é—á–∞—è vector_store_ids
            'settings': settings,
            
            # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            'enabled': row.ai_assistant_enabled,
            'type': row.ai_assistant_type,
            'agent_source': 'user_bots_table',  # –ú–∞—Ä–∫–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        }
        
        logger.info("‚úÖ Agent config built successfully", 
                   bot_id=row.bot_id,
                   agent_id=row.openai_agent_id,
                   config_keys=list(config.keys()),
                   settings_vector_stores=len(config['vector_store_ids']),
                   file_search_enabled=config['enable_file_search'])
        
        return config

    # ===== OPENAI LEGACY METHODS =====
    
    @staticmethod
    async def get_openai_agent_config(assistant_id: str) -> Optional[dict]:
        """–†–æ—É—Ç–µ—Ä –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–∞–º–∏ get_openai_agent_config"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ Responses API
        config = await AIManager.get_openai_agent_config_responses_api(assistant_id)
        if config:
            return config
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        return await AIManager.get_openai_agent_config_by_id(assistant_id)

    @staticmethod
    async def get_openai_agent_config_by_id(agent_id: str) -> Optional[dict]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Legacy –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        from database.models import UserBot
        
        logger.info("üîç Getting OpenAI agent config by ID (legacy)", agent_id=agent_id)
        
        async with get_db_session() as session:
            result = await session.execute(
                select(UserBot).where(UserBot.openai_agent_id == agent_id)
            )
            bot = result.scalar_one_or_none()
            
            if not bot:
                logger.warning("‚ùå OpenAI agent not found in database", agent_id=agent_id)
                return None
                
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
            if bot.ai_assistant_type != 'openai':
                logger.warning("‚ùå Found bot but wrong AI type", 
                              agent_id=agent_id,
                              ai_type=bot.ai_assistant_type)
                return None
                
            if not bot.ai_assistant_enabled:
                logger.warning("‚ùå Found OpenAI agent but disabled", 
                              agent_id=agent_id,
                              enabled=bot.ai_assistant_enabled)
                return None
            
            config = {
                'bot_id': bot.bot_id,
                'agent_id': bot.openai_agent_id,
                'name': bot.openai_agent_name or 'AI Agent',
                'system_prompt': bot.openai_agent_instructions or '',
                'model': bot.openai_model or 'gpt-4o',
                'enabled': bot.ai_assistant_enabled,
                'settings': bot.openai_settings or {}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ openai_settings
            if bot.openai_settings:
                config.update({
                    'temperature': bot.openai_settings.get('temperature', 0.7),
                    'max_tokens': bot.openai_settings.get('max_tokens', 4000),
                    'enable_web_search': bot.openai_settings.get('enable_web_search', False),
                    'tools_enabled': bot.openai_settings.get('tools_enabled', True),
                    'daily_limit': bot.openai_settings.get('daily_limit'),
                    'channel_check': bot.openai_settings.get('channel_check'),
                    'context_info': bot.openai_settings.get('context_info', True)
                })
            
            logger.info("‚úÖ OpenAI agent config found (legacy)", 
                       agent_id=agent_id,
                       bot_id=bot.bot_id,
                       agent_name=config['name'],
                       enabled=config['enabled'])
            
            return config

    @staticmethod
    async def get_openai_agent_config_by_bot_id(bot_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ –ø–æ bot_id"""
        from database.models import UserBot
        
        logger.info("üîç Getting OpenAI agent config by bot_id", bot_id=bot_id)
        
        async with get_db_session() as session:
            result = await session.execute(
                select(UserBot).where(UserBot.bot_id == bot_id)
            )
            bot = result.scalar_one_or_none()
            
            if not bot or bot.ai_assistant_type != 'openai' or not bot.openai_agent_id:
                logger.warning("‚ùå OpenAI agent not found for bot", bot_id=bot_id)
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å assistant_id
            return await AIManager.get_openai_agent_config(bot.openai_agent_id)

    @staticmethod
    async def update_openai_agent_settings(bot_id: str, settings: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        from database.models import UserBot
        
        logger.info("üîÑ Updating OpenAI agent settings", 
                   bot_id=bot_id,
                   settings_keys=list(settings.keys()))
        
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            result = await session.execute(
                select(UserBot.openai_settings).where(UserBot.bot_id == bot_id)
            )
            current_settings = result.scalar_one_or_none() or {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            updated_settings = current_settings.copy()
            updated_settings.update(settings)
            updated_settings['updated_at'] = datetime.now().isoformat()
            
            update_data = {'openai_settings': updated_settings}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ settings
            if 'name' in settings:
                update_data['openai_agent_name'] = settings['name']
            if 'system_prompt' in settings:
                update_data['openai_agent_instructions'] = settings['system_prompt']
            if 'model' in settings:
                update_data['openai_model'] = settings['model']
            
            await session.execute(
                update(UserBot)
                .where(UserBot.bot_id == bot_id)
                .values(**update_data)
            )
            await session.commit()
            
            logger.info("‚úÖ OpenAI agent settings updated", 
                       bot_id=bot_id,
                       fields_updated=list(settings.keys()))

    # ===== EXTERNAL AI PLATFORMS METHODS =====

    @staticmethod
    async def save_external_ai_config(bot_id: str, api_token: str, bot_id_value: str, platform: str, settings: dict = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–π AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (ChatForYou/ProTalk)"""
        from database.models import UserBot
        
        if platform not in ['chatforyou', 'protalk']:
            raise ValueError(f"Unsupported platform: {platform}")
        
        logger.info("üíæ Saving external AI config", 
                   bot_id=bot_id, 
                   platform=platform,
                   has_bot_id=bool(bot_id_value))
        
        async with get_db_session() as session:
            external_settings = {
                'daily_limit': settings.get('daily_limit') if settings else None,
                'channel_id': settings.get('channel_id') if settings else None,
                'context_info': settings.get('context_info', True) if settings else True,
                'api_version': 'v1.0',
                'auto_detect_platform': True,
                'response_timeout': 30,
                'max_retries': 3,
                'retry_delay': 1.0,
                'detected_platform': platform,
                'platform_detected_at': datetime.now().isoformat(),
                'platform_detection_attempts': 0,
                'supported_platforms': ['chatforyou', 'protalk'],
                'rate_limit_enabled': True,
                'rate_limit_requests': 60,
                'block_inappropriate': True,
                'auto_platform_switch': False,
                'fallback_enabled': True,
                'debug_mode': False,
                'log_conversations': True,
                'log_errors': True,
                'log_performance': False,
                'configured_at': datetime.now().isoformat(),
                'total_requests': 0,
                'successful_requests': 0,
                'failed_requests': 0
            }
            
            if settings:
                external_settings.update(settings)
            
            await session.execute(
                update(UserBot)
                .where(UserBot.bot_id == bot_id)
                .values(
                    ai_assistant_type=platform,
                    ai_assistant_enabled=True,
                    external_api_token=api_token,
                    external_bot_id=bot_id_value,
                    external_platform=platform,
                    external_settings=external_settings,
                    updated_at=datetime.now()
                )
            )
            await session.commit()
            
            logger.info("‚úÖ External AI config saved", 
                       bot_id=bot_id, 
                       platform=platform,
                       has_bot_id=bool(bot_id_value))

    @staticmethod
    async def get_external_ai_config(bot_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–π AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        from database.models import UserBot
        
        async with get_db_session() as session:
            result = await session.execute(
                select(UserBot).where(UserBot.bot_id == bot_id)
            )
            bot = result.scalar_one_or_none()
            
            if not bot or bot.ai_assistant_type not in ['chatforyou', 'protalk']:
                return None
            
            return {
                'bot_id': bot.bot_id,
                'api_token': bot.external_api_token,
                'bot_id_value': bot.external_bot_id,
                'platform': bot.external_platform,
                'enabled': bot.ai_assistant_enabled,
                'settings': bot.external_settings or {}
            }

    @staticmethod
    async def update_external_ai_settings(bot_id: str, settings: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–Ω–µ—à–Ω–µ–π AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        from database.models import UserBot
        
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            result = await session.execute(
                select(UserBot.external_settings).where(UserBot.bot_id == bot_id)
            )
            current_settings = result.scalar_one_or_none() or {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            updated_settings = current_settings.copy()
            updated_settings.update(settings)
            updated_settings['updated_at'] = datetime.now().isoformat()
            
            await session.execute(
                update(UserBot)
                .where(UserBot.bot_id == bot_id)
                .values(external_settings=updated_settings)
            )
            await session.commit()
            
            logger.info("‚úÖ External AI settings updated", 
                       bot_id=bot_id,
                       fields_updated=list(settings.keys()))

    # ===== UNIVERSAL AI METHODS =====

    @staticmethod
    async def get_ai_config(bot_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI (–ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã) —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from database.models import UserBot
        
        logger.info("üîç Loading AI config for bot startup", bot_id=bot_id)
        
        async with get_db_session() as session:
            result = await session.execute(
                select(UserBot).where(UserBot.bot_id == bot_id)
            )
            bot = result.scalar_one_or_none()
            
            if not bot or not bot.ai_assistant_enabled:
                logger.info("‚ùå No AI config or disabled", 
                           bot_id=bot_id,
                           bot_exists=bool(bot),
                           ai_enabled=bot.ai_assistant_enabled if bot else False)
                return None
            
            config = {
                'bot_id': bot.bot_id,
                'enabled': bot.ai_assistant_enabled,
                'type': bot.ai_assistant_type
            }
            
            if bot.ai_assistant_type == 'openai':
                config.update({
                    'agent_id': bot.openai_agent_id,
                    'agent_name': bot.openai_agent_name,
                    'instructions': bot.openai_agent_instructions,
                    'model': bot.openai_model,
                    'settings': bot.openai_settings or {}
                })
                logger.info("‚úÖ OpenAI config loaded", 
                           bot_id=bot_id,
                           agent_id=bot.openai_agent_id,
                           model=bot.openai_model)
                
            elif bot.ai_assistant_type in ['chatforyou', 'protalk']:
                config.update({
                    'api_token': bot.external_api_token,
                    'bot_id_value': bot.external_bot_id,
                    'platform': bot.external_platform,
                    'settings': bot.external_settings or {}
                })
                logger.info("‚úÖ External AI config loaded", 
                           bot_id=bot_id,
                           platform=bot.ai_assistant_type,
                           has_token=bool(bot.external_api_token))
            else:
                logger.warning("‚ö†Ô∏è Unknown AI type", 
                              bot_id=bot_id,
                              ai_type=bot.ai_assistant_type)
            
            logger.info("‚úÖ AI config loaded successfully", 
                       bot_id=bot_id, 
                       ai_type=config['type'])
            return config

    @staticmethod
    async def update_ai_assistant(
        bot_id: str,
        enabled: bool = True,
        assistant_id: Optional[str] = None,
        settings: Optional[dict] = None
    ) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        from database.models import UserBot
        
        logger.info("üîÑ Updating AI assistant with proper data sync", 
                   bot_id=bot_id,
                   enabled=enabled,
                   assistant_id_exists=bool(assistant_id),
                   settings_keys=list(settings.keys()) if settings else None)
        
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                bot = result.scalar_one_or_none()
                
                if not bot:
                    logger.error("‚ùå Bot not found for AI assistant update", bot_id=bot_id)
                    return False
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                agent_type = settings.get('agent_type') if settings else bot.ai_assistant_type
                
                # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'ai_assistant_enabled': enabled,
                    'updated_at': datetime.now()
                }
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
                if agent_type:
                    update_data['ai_assistant_type'] = agent_type
                
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                if agent_type == 'openai':
                    logger.info("üé® Updating OpenAI agent with data sync")
                    
                    if assistant_id:
                        update_data['openai_agent_id'] = assistant_id
                    
                    if settings:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        agent_name = settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
                        agent_role = settings.get('agent_role', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                        if 'system_prompt' in settings and settings['system_prompt']:
                            full_system_prompt = settings['system_prompt']
                        else:
                            full_system_prompt = f"–¢—ã - {agent_role}. –¢–≤–æ–µ –∏–º—è {agent_name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
                            settings['system_prompt'] = full_system_prompt
                        
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å JSON
                        update_data.update({
                            'openai_agent_name': agent_name,
                            'openai_agent_instructions': full_system_prompt,
                            'openai_model': settings.get('model_used', 'gpt-4o'),
                            
                            # Responses API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                            'openai_use_responses_api': True,
                            'openai_store_conversations': settings.get('store_conversations', True),
                            'openai_conversation_retention_days': settings.get('conversation_retention', 30),
                            'openai_conversation_contexts': {},
                            'openai_settings': settings,
                            
                            # –û—á–∏—â–∞–µ–º external –ø–æ–ª—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ OpenAI
                            'external_api_token': None,
                            'external_bot_id': None,
                            'external_platform': None,
                            'external_settings': None
                        })
                        
                elif agent_type in ['chatforyou', 'protalk']:
                    logger.info("üåê Updating external AI platform configuration", platform=agent_type)
                    
                    if assistant_id:
                        update_data['external_api_token'] = assistant_id
                    
                    if settings:
                        # –í–Ω–µ—à–Ω–∏–µ –ø–æ–ª—è
                        update_data.update({
                            'external_platform': agent_type,
                            'external_settings': settings
                        })
                        
                        # ChatForYou bot_id
                        if agent_type == 'chatforyou' and 'chatforyou_bot_id' in settings:
                            update_data['external_bot_id'] = str(settings['chatforyou_bot_id'])
                        
                        # –û—á–∏—â–∞–µ–º OpenAI –ø–æ–ª—è
                        update_data.update({
                            'openai_agent_id': None,
                            'openai_agent_name': None,
                            'openai_agent_instructions': None,
                            'openai_model': 'gpt-4o',
                            'openai_use_responses_api': False,
                            'openai_store_conversations': False,
                            'openai_conversation_retention_days': 30,
                            'openai_conversation_contexts': {},
                            'openai_settings': None
                        })
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(**update_data)
                )
                await session.commit()
                
                logger.info("‚úÖ AI assistant updated with proper data sync", 
                           bot_id=bot_id,
                           agent_type=agent_type,
                           enabled=enabled,
                           fields_updated=len(update_data))
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to update AI assistant", 
                        bot_id=bot_id,
                        error=str(e))
            return False

    @staticmethod
    async def disable_ai_assistant(bot_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        from database.models import UserBot
        
        async with get_db_session() as session:
            await session.execute(
                update(UserBot)
                .where(UserBot.bot_id == bot_id)
                .values(ai_assistant_enabled=False, updated_at=datetime.now())
            )
            await session.commit()
            
            logger.info("‚úÖ AI assistant disabled", bot_id=bot_id)

    @staticmethod
    async def clear_ai_configuration(bot_id: str):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI"""
        from database.models import UserBot
        
        logger.info("üóëÔ∏è Clearing AI configuration", bot_id=bot_id)
        
        async with get_db_session() as session:
            await session.execute(
                update(UserBot)
                .where(UserBot.bot_id == bot_id)
                .values(
                    ai_assistant_enabled=False,
                    ai_assistant_type=None,
                    # Clear OpenAI fields
                    openai_agent_id=None,
                    openai_agent_name=None,
                    openai_agent_instructions=None,
                    openai_model='gpt-4o',
                    openai_settings=None,
                    openai_conversation_contexts={},
                    openai_store_conversations=False,
                    openai_conversation_retention_days=30,
                    openai_use_responses_api=False,
                    # Clear external platform fields
                    external_api_token=None,
                    external_bot_id=None,
                    external_platform=None,
                    external_settings=None,
                    updated_at=datetime.now()
                )
            )
            await session.commit()
            
            logger.info("‚úÖ AI configuration cleared", bot_id=bot_id)

    @staticmethod
    async def increment_ai_stats(bot_id: str, success: bool = True):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
        from database.models import UserBot
        
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø AI –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            result = await session.execute(
                select(UserBot.ai_assistant_type, UserBot.openai_settings, UserBot.external_settings)
                .where(UserBot.bot_id == bot_id)
            )
            bot_data = result.first()
            
            if not bot_data:
                return
            
            ai_type, openai_settings, external_settings = bot_data
            current_time = datetime.now().isoformat()
            
            if ai_type == 'openai' and openai_settings is not None:
                updated_settings = openai_settings.copy()
                updated_settings['total_requests'] = updated_settings.get('total_requests', 0) + 1
                updated_settings['last_request_at'] = current_time
                
                if success:
                    updated_settings['successful_requests'] = updated_settings.get('successful_requests', 0) + 1
                else:
                    updated_settings['failed_requests'] = updated_settings.get('failed_requests', 0) + 1
                
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(openai_settings=updated_settings)
                )
                
            elif ai_type in ['chatforyou', 'protalk'] and external_settings is not None:
                updated_settings = external_settings.copy()
                updated_settings['total_requests'] = updated_settings.get('total_requests', 0) + 1
                updated_settings['last_request_at'] = current_time
                
                if success:
                    updated_settings['successful_requests'] = updated_settings.get('successful_requests', 0) + 1
                else:
                    updated_settings['failed_requests'] = updated_settings.get('failed_requests', 0) + 1
                
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(external_settings=updated_settings)
                )
            
            await session.commit()

    # ===== CONVERSATION MANAGEMENT (RESPONSES API) =====

    @staticmethod
    async def save_conversation_response_id(bot_id: str, user_id: int, response_id: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ response_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ Responses API"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ openai_conversation_contexts –≤ —Ç–∞–±–ª–∏—Ü–µ user_bots
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(
                        openai_conversation_contexts=func.coalesce(
                            UserBot.openai_conversation_contexts, 
                            text("'{}'::jsonb")
                        ).op('||')(
                            func.jsonb_build_object(str(user_id), response_id)
                        ),
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ Conversation response_id saved", 
                           bot_id=bot_id,
                           user_id=user_id,
                           response_id=response_id[:15] + "...")
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to save conversation response_id", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e))
            return False

    @staticmethod
    async def get_conversation_response_id(bot_id: str, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ response_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(UserBot.openai_conversation_contexts)
                    .where(UserBot.bot_id == bot_id)
                )
                
                conversations = result.scalar_one_or_none()
                
                if conversations:
                    response_id = conversations.get(str(user_id))
                    
                    logger.info("üîç Retrieved conversation response_id", 
                               bot_id=bot_id,
                               user_id=user_id,
                               has_response_id=bool(response_id))
                    
                    return response_id
                
                return None
                
        except Exception as e:
            logger.error("üí• Failed to get conversation response_id", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e))
            return None

    @staticmethod
    async def clear_conversation_response_id(bot_id: str, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ response_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä)"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –£–¥–∞–ª—è–µ–º response_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(
                        openai_conversation_contexts=func.coalesce(
                            UserBot.openai_conversation_contexts, 
                            {}
                        ).op('-')(str(user_id)),
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ Conversation response_id cleared", 
                           bot_id=bot_id,
                           user_id=user_id)
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to clear conversation response_id", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e))
            return False

    @staticmethod
    async def clear_all_conversations(bot_id: str) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id)
                    .values(
                        openai_conversation_contexts=text("'{}'::jsonb"),
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ All conversations cleared for bot", bot_id=bot_id)
                return True
                
        except Exception as e:
            logger.error("üí• Failed to clear all conversations", 
                        bot_id=bot_id,
                        error=str(e))
            return False

    @staticmethod
    async def get_active_conversations_count(bot_id: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(UserBot.openai_conversation_contexts)
                    .where(UserBot.bot_id == bot_id)
                )
                
                conversations = result.scalar_one_or_none()
                
                if conversations:
                    return len(conversations)
                
            return 0
                
        except Exception as e:
            logger.error("üí• Failed to get active conversations count", 
                        bot_id=bot_id,
                        error=str(e))
            return 0

    # ===== RESPONSES API TOOLS AND SETTINGS =====

    @staticmethod
    async def enable_responses_api_tool(bot_id: str, tool_name: str, enabled: bool = True) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Responses API"""
        from database.models import UserBot
        
        valid_tools = ['web_search', 'code_interpreter', 'file_search', 'image_generation']
        
        if tool_name not in valid_tools:
            logger.warning("‚ùå Invalid tool name", tool_name=tool_name)
            return False
        
        try:
            async with get_db_session() as session:
                setting_key = f'enable_{tool_name}'
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                result = await session.execute(
                    select(UserBot.openai_settings)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                )
                current_settings = result.scalar_one_or_none() or {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                updated_settings = current_settings.copy()
                updated_settings[setting_key] = enabled
                
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                    .values(
                        openai_settings=updated_settings,
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ Responses API tool setting updated", 
                           bot_id=bot_id,
                           tool_name=tool_name,
                           enabled=enabled)
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to update tool setting", 
                        bot_id=bot_id,
                        tool_name=tool_name,
                        error=str(e))
            return False

    @staticmethod
    async def get_responses_api_stats(bot_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Responses API"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
                result = await session.execute(
                    select(
                        UserBot.openai_agent_name,
                        UserBot.openai_model,
                        UserBot.openai_conversation_contexts,
                        UserBot.openai_settings,
                        UserBot.updated_at,
                        UserBot.created_at,
                        UserBot.tokens_used_total,
                        UserBot.tokens_used_input,
                        UserBot.tokens_used_output
                    ).where(
                        UserBot.bot_id == bot_id,
                        UserBot.ai_assistant_type == 'openai'
                    )
                )
                
                bot_data = result.first()
                
                if not bot_data:
                    return {}
                
                settings = bot_data.openai_settings or {}
                active_conversations = bot_data.openai_conversation_contexts or {}
                
                stats = {
                    'agent_name': bot_data.openai_agent_name,
                    'model': bot_data.openai_model,
                    'created_at': bot_data.created_at.isoformat() if bot_data.created_at else None,
                    'last_usage_at': bot_data.updated_at.isoformat() if bot_data.updated_at else None,
                    
                    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
                    'active_conversations': len(active_conversations),
                    'conversation_users': list(active_conversations.keys()),
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
                    'token_stats': {
                        'total_tokens': int(bot_data.tokens_used_total or 0),
                        'input_tokens': int(bot_data.tokens_used_input or 0),
                        'output_tokens': int(bot_data.tokens_used_output or 0)
                    },
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Responses API
                    'responses_api_settings': {
                        'store_conversations': settings.get('store_conversations', True),
                        'conversation_retention': settings.get('conversation_retention', 30),
                        'enable_streaming': settings.get('enable_streaming', True),
                        'enabled_tools': [
                            tool.replace('enable_', '') 
                            for tool, enabled in settings.items() 
                            if tool.startswith('enable_') and enabled
                        ]
                    }
                }
                
                logger.info("üìä Responses API stats retrieved", 
                           bot_id=bot_id,
                           active_conversations=stats['active_conversations'],
                           total_tokens=stats['token_stats']['total_tokens'])
                
                return stats
                
        except Exception as e:
            logger.error("üí• Failed to get Responses API stats", 
                        bot_id=bot_id,
                        error=str(e))
            return {}

    # ===== VECTOR STORES MANAGEMENT =====
    
    @staticmethod
    async def save_vector_store_ids(bot_id: str, vector_store_ids: List[str]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ vector store IDs –¥–ª—è –±–æ—Ç–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                result = await session.execute(
                    select(UserBot.openai_settings)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                )
                current_settings = result.scalar_one_or_none() or {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å vector store IDs
                updated_settings = current_settings.copy()
                updated_settings['vector_store_ids'] = vector_store_ids
                updated_settings['enable_file_search'] = True if vector_store_ids else False
                updated_settings['vector_stores_updated_at'] = datetime.now().isoformat()
                
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                    .values(
                        openai_settings=updated_settings,
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ Vector store IDs saved", 
                           bot_id=bot_id,
                           vector_store_count=len(vector_store_ids))
                return True
                
        except Exception as e:
            logger.error("üí• Failed to save vector store IDs", 
                        bot_id=bot_id, error=str(e))
            return False
    
    @staticmethod
    async def get_vector_store_info(bot_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vector stores –±–æ—Ç–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(UserBot.openai_settings)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                )
                settings = result.scalar_one_or_none() or {}
                
                vector_store_ids = settings.get('vector_store_ids', [])
                file_search_enabled = settings.get('enable_file_search', False)
                
                return {
                    'vector_store_ids': vector_store_ids,
                    'file_search_enabled': file_search_enabled,
                    'vector_stores_count': len(vector_store_ids),
                    'last_updated': settings.get('vector_stores_updated_at'),
                    'settings': settings
                }
                
        except Exception as e:
            logger.error("üí• Failed to get vector store info", 
                        bot_id=bot_id, error=str(e))
            return {}
    
    @staticmethod
    async def clear_vector_stores(bot_id: str) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö vector stores –¥–ª—è –±–æ—Ç–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                result = await session.execute(
                    select(UserBot.openai_settings)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                )
                current_settings = result.scalar_one_or_none() or {}
                
                # –û—á–∏—â–∞–µ–º vector store –¥–∞–Ω–Ω—ã–µ
                updated_settings = current_settings.copy()
                updated_settings['vector_store_ids'] = []
                updated_settings['enable_file_search'] = False
                updated_settings['vector_stores_cleared_at'] = datetime.now().isoformat()
                
                await session.execute(
                    update(UserBot)
                    .where(UserBot.bot_id == bot_id, UserBot.ai_assistant_type == 'openai')
                    .values(
                        openai_settings=updated_settings,
                        updated_at=datetime.now()
                    )
                )
                await session.commit()
                
                logger.info("‚úÖ Vector stores cleared", bot_id=bot_id)
                return True
                
        except Exception as e:
            logger.error("üí• Failed to clear vector stores", 
                        bot_id=bot_id, error=str(e))
            return False

    # ===== LEGACY COMPATIBILITY METHODS =====

    @staticmethod
    async def update_ai_assistant_with_platform(
        bot_id: str,
        api_token: str,
        bot_id_value: int = None,
        settings: dict = None,
        platform: str = "chatforyou"
    ):
        """Update AI assistant with simplified platform handling (legacy)"""
        logger.warning("Using legacy update_ai_assistant_with_platform method. Consider using save_external_ai_config.", bot_id=bot_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bot_id_value –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        bot_id_str = str(bot_id_value) if bot_id_value is not None else None
        
        await AIManager.save_external_ai_config(
            bot_id=bot_id,
            api_token=api_token,
            bot_id_value=bot_id_str,
            platform=platform,
            settings=settings
        )

    @staticmethod
    async def update_ai_credentials(
        bot_id: str,
        api_token: str,
        bot_id_value: int = None,
        platform: str = "chatforyou"
    ):
        """Update only AI credentials (token + bot_id) (legacy)"""
        logger.warning("Using legacy update_ai_credentials method. Consider using save_external_ai_config.", bot_id=bot_id)
        
        await AIManager.save_external_ai_config(
            bot_id=bot_id,
            api_token=api_token,
            bot_id_value=str(bot_id_value) if bot_id_value is not None else None,
            platform=platform
        )

    @staticmethod
    async def get_ai_credentials(bot_id: str) -> dict:
        """Get AI credentials for bot (legacy)"""
        config = await AIManager.get_ai_config(bot_id)
        
        if not config:
            return {}
        
        if config['type'] == 'openai':
            return {
                'api_token': config.get('agent_id'),
                'bot_id': None,
                'platform': 'openai'
            }
        elif config['type'] in ['chatforyou', 'protalk']:
            return {
                'api_token': config.get('api_token'),
                'bot_id': int(config.get('bot_id_value')) if config.get('bot_id_value') else None,
                'platform': config.get('platform')
            }
        
        return {}

    @staticmethod
    async def detect_and_validate_ai_platform(api_token: str, test_bot_id: str = None) -> Tuple[bool, Optional[str], str]:
        """Simplified: Just cache token and test with real data if bot_id provided (legacy)"""
        try:
            logger.info(f"Caching AI token: {api_token[:10]}...")
            
            if test_bot_id:
                from services.ai_assistant import ai_client
                
                logger.info(f"Testing ChatForYou with bot_id: {test_bot_id}")
                
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    response = await ai_client.send_message(
                        api_token=api_token,
                        message="test",
                        user_id=12345,
                        platform="chatforyou",
                        bot_id=int(test_bot_id)
                    )
                    
                    if response is not None:
                        logger.info("‚úÖ ChatForYou test successful")
                        return True, "chatforyou", ""
                    else:
                        logger.warning("‚ùå ChatForYou test failed: empty response")
                        return False, None, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞ –∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                        
                except Exception as e:
                    logger.error(f"‚ùå ChatForYou test error: {str(e)}")
                    return False, None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"
            
            else:
                logger.info("‚úÖ Token cached for later validation")
                return True, "chatforyou", ""
                
        except Exception as e:
            logger.error(f"Error in platform detection: {str(e)}")
            return False, None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}"

    # ===== DATA SYNCHRONIZATION METHODS =====

    @staticmethod
    async def sync_agent_data_fields(bot_id: str = None, user_id: int = None) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å JSON –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞
                query_conditions = [
                    UserBot.ai_assistant_type == 'openai',
                    UserBot.openai_settings.isnot(None)
                ]
                
                if bot_id:
                    query_conditions.append(UserBot.bot_id == bot_id)
                elif user_id:
                    query_conditions.append(UserBot.user_id == user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                result = await session.execute(
                    select(UserBot).where(*query_conditions)
                )
                bots = result.scalars().all()
                
                synced_count = 0
                
                for bot in bots:
                    settings = bot.openai_settings or {}
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
                    json_name = settings.get('agent_name')
                    json_prompt = settings.get('system_prompt')
                    json_model = settings.get('model_used') or settings.get('model')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                    needs_sync = (
                        (json_name and bot.openai_agent_name != json_name) or
                        (json_prompt and bot.openai_agent_instructions != json_prompt) or
                        (json_model and bot.openai_model != json_model)
                    )
                    
                    if needs_sync:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if not json_prompt and json_name and settings.get('agent_role'):
                            json_prompt = f"–¢—ã - {settings['agent_role']}. –¢–≤–æ–µ –∏–º—è {json_name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
                            # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ç–æ–∂–µ
                            updated_settings = settings.copy()
                            updated_settings['system_prompt'] = json_prompt
                            settings = updated_settings
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                        update_data = {}
                        if json_name:
                            update_data['openai_agent_name'] = json_name
                        if json_prompt:
                            update_data['openai_agent_instructions'] = json_prompt
                        if json_model:
                            update_data['openai_model'] = json_model
                        if settings != bot.openai_settings:
                            update_data['openai_settings'] = settings
                        
                        if update_data:
                            await session.execute(
                                update(UserBot)
                                .where(UserBot.id == bot.id)
                                .values(**update_data)
                            )
                            synced_count += 1
                            
                            logger.info("üîÑ Agent data synchronized", 
                                       bot_id=bot.bot_id,
                                       updated_fields=list(update_data.keys()))
                
                await session.commit()
                
                logger.info("‚úÖ Agent data synchronization completed", 
                           synced_agents=synced_count,
                           scope=f"bot_id={bot_id}" if bot_id else f"user_id={user_id}" if user_id else "all")
                
                return True
                
        except Exception as e:
            logger.error("üí• Failed to synchronize agent data", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e))
            return False

    @staticmethod
    async def validate_agent_data_consistency(bot_id: str) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞"""
        from database.models import UserBot
        
        try:
            async with get_db_session() as session:
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                bot = result.scalar_one_or_none()
                
                if not bot or bot.ai_assistant_type != 'openai':
                    return {'status': 'error', 'message': 'Bot not found or not OpenAI type'}
                
                settings = bot.openai_settings or {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                validation = {
                    'status': 'success',
                    'bot_id': bot_id,
                    'checks': {
                        'name_consistency': {
                            'db_field': bot.openai_agent_name,
                            'json_field': settings.get('agent_name'),
                            'match': bot.openai_agent_name == settings.get('agent_name'),
                            'priority_source': 'json' if settings.get('agent_name') else 'db'
                        },
                        'prompt_consistency': {
                            'db_field_length': len(bot.openai_agent_instructions or ''),
                            'json_field_length': len(settings.get('system_prompt', '')),
                            'match': bot.openai_agent_instructions == settings.get('system_prompt'),
                            'priority_source': 'json' if settings.get('system_prompt') else 'db'
                        },
                        'model_consistency': {
                            'db_field': bot.openai_model,
                            'json_field': settings.get('model_used') or settings.get('model'),
                            'match': bot.openai_model == (settings.get('model_used') or settings.get('model')),
                            'priority_source': 'json' if settings.get('model_used') or settings.get('model') else 'db'
                        }
                    },
                    'recommendations': []
                }
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if not validation['checks']['name_consistency']['match']:
                    validation['recommendations'].append('Sync agent name: use JSON as priority')
                
                if not validation['checks']['prompt_consistency']['match']:
                    validation['recommendations'].append('Sync system prompt: use JSON as priority')
                    
                if not validation['checks']['model_consistency']['match']:
                    validation['recommendations'].append('Sync model: use JSON as priority')
                
                validation['overall_status'] = 'consistent' if not validation['recommendations'] else 'needs_sync'
                
                return validation
                
        except Exception as e:
            return {
                'status': 'error', 
                'message': str(e),
                'bot_id': bot_id
            }
