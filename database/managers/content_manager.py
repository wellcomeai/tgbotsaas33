"""
‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ContentManager –¥–ª—è –¥–µ–ø–ª–æ—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Å—ã–ª–æ–∫ –ò –ö–ê–ù–ê–õ–û–í
üîß –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å content_handlers.py
üöÄ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø, extract_media_info –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ + –ö–ê–ù–ê–õ–´
üìä –¢–û–ö–ï–ù–´: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TokenManager
üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
üîó –°–°–´–õ–ö–ò: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è AI –∞–≥–µ–Ω—Ç–∞
üì∫ –ö–ê–ù–ê–õ–´: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ä–∞–π—Ç–∞
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –∫–ª—é—á–∏ –≤ get_last_rewrite –∏ save_rewrite_result

–û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ result['content']['rewritten_text']
2. –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ extract_media_info(message) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (media_info['type'] == 'media_group')
4. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤: result['tokens']['total_tokens']
5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ: result['agent']['name']
6. –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Pydantic –æ–±—ä–µ–∫—Ç–∞–º–∏ ResponseUsage
7. ‚úÖ –ù–û–í–û–ï: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TokenManager - —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–∏—Ö –ª–∏–º–∏—Ç–∞—Ö
8. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–≤–æ–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ TokenManager + –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
9. ‚ú® –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è AI –∞–≥–µ–Ω—Ç–∞
10. üì∫ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ä–∞–π—Ç–∞
11. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –∫–ª—é—á–∏ - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ media/media_info –≤ –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
"""

import time
import json
import structlog
from typing import Dict, Any, Optional, List, Union
from datetime import datetime, timedelta
from sqlalchemy import select, update, func, text

from ..connection import get_db_session

logger = structlog.get_logger()


class ContentManager:
    """‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø, TokenManager, —Å—Å—ã–ª–æ–∫ –∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π OpenAI –∫–ª–∏–µ–Ω—Ç
        self.openai_client = self._get_openai_client()
        logger.info("üé® ContentManager initialized with media group support, TokenManager integration, links and channels support", 
                   has_client=bool(self.openai_client))
    
    def _get_openai_client(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –∏–∑ services/openai_assistant
            from services.openai_assistant import openai_client
            logger.info("‚úÖ Using existing OpenAI assistant client")
            return openai_client
        except ImportError as e:
            logger.warning("‚ö†Ô∏è OpenAI assistant client not available", error=str(e))
            return self._create_mock_client()
    
    def _create_mock_client(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Responses API"""
        class MockOpenAIClient:
            async def _responses_with_retry(self, **kwargs):
                import uuid
                logger.warning("üß™ Using MOCK Responses API client for development")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Responses API
                class MockResponse:
                    def __init__(self):
                        self.id = f"mock_resp_{uuid.uuid4().hex[:12]}"
                        self.output = [
                            {
                                "type": "message",
                                "content": [
                                    {
                                        "type": "output_text",
                                        "text": f"[–¢–ï–°–¢–û–í–´–ô –†–ï–†–ê–ô–¢] {kwargs.get('input', '—Ç–µ–∫—Å—Ç')} [–∞–≥–µ–Ω—Ç: mock]"
                                    }
                                ]
                            }
                        ]
                        
                        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Mock usage –∫–∞–∫ Pydantic –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                        class MockUsage:
                            def __init__(self):
                                self.input_tokens = len(kwargs.get('input', '')) // 4
                                self.output_tokens = len(kwargs.get('input', '')) // 3
                                self.total_tokens = self.input_tokens + self.output_tokens
                        
                        self.usage = MockUsage()
                    
                    @property
                    def output_text(self):
                        if self.output and self.output[0].get('content'):
                            return self.output[0]['content'][0].get('text', '')
                        return ''
                
                return MockResponse()
            
            async def create_assistant(self, **kwargs):
                return await self._responses_with_retry(**kwargs)
            
            async def send_message(self, assistant_id: str, message: str, user_id: int):
                return await self._responses_with_retry(
                    model="mock-gpt-4o",
                    instructions="Mock content agent",
                    input=message,
                    previous_response_id=assistant_id,
                    store=True
                )
        
        return MockOpenAIClient()
    
    # ===== ‚ú® –ù–û–í–û–ï: MEDIA EXTRACTION =====
    
    def extract_media_info(self, message) -> Optional[Dict[str, Any]]:
        """‚úÖ –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        
        try:
            media_info = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                largest_photo = max(message.photo, key=lambda x: x.width * x.height)
                media_info = {
                    'type': 'photo',
                    'file_id': largest_photo.file_id,
                    'file_unique_id': largest_photo.file_unique_id,
                    'width': largest_photo.width,
                    'height': largest_photo.height,
                    'file_size': largest_photo.file_size
                }
                
            elif message.video:
                media_info = {
                    'type': 'video',
                    'file_id': message.video.file_id,
                    'file_unique_id': message.video.file_unique_id,
                    'width': message.video.width,
                    'height': message.video.height,
                    'duration': message.video.duration,
                    'file_size': message.video.file_size,
                    'mime_type': message.video.mime_type
                }
                
            elif message.animation:
                media_info = {
                    'type': 'animation',
                    'file_id': message.animation.file_id,
                    'file_unique_id': message.animation.file_unique_id,
                    'width': message.animation.width,
                    'height': message.animation.height,
                    'duration': message.animation.duration,
                    'file_size': message.animation.file_size,
                    'mime_type': message.animation.mime_type
                }
                
            elif message.audio:
                media_info = {
                    'type': 'audio',
                    'file_id': message.audio.file_id,
                    'file_unique_id': message.audio.file_unique_id,
                    'duration': message.audio.duration,
                    'performer': message.audio.performer,
                    'title': message.audio.title,
                    'file_size': message.audio.file_size,
                    'mime_type': message.audio.mime_type
                }
                
            elif message.voice:
                media_info = {
                    'type': 'voice',
                    'file_id': message.voice.file_id,
                    'file_unique_id': message.voice.file_unique_id,
                    'duration': message.voice.duration,
                    'file_size': message.voice.file_size,
                    'mime_type': message.voice.mime_type
                }
                
            elif message.document:
                media_info = {
                    'type': 'document',
                    'file_id': message.document.file_id,
                    'file_unique_id': message.document.file_unique_id,
                    'file_name': message.document.file_name,
                    'file_size': message.document.file_size,
                    'mime_type': message.document.mime_type
                }
            
            if media_info:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                media_info.update({
                    'message_id': message.message_id,
                    'date': message.date.isoformat() if message.date else None,
                    'media_group_id': message.media_group_id,
                    'has_spoiler': getattr(message, 'has_media_spoiler', False)
                })
                
                logger.debug("üìé Media info extracted", 
                           media_type=media_info['type'],
                           message_id=message.message_id,
                           has_media_group=bool(message.media_group_id))
                
                return media_info
            
            return None
            
        except Exception as e:
            logger.error("üí• Error extracting media info", 
                        message_id=getattr(message, 'message_id', 'unknown'),
                        error=str(e))
            return None
    
    def _format_links_for_ai(self, links: Dict[str, Any]) -> str:
        """‚ú® –ù–û–í–û–ï: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ AI –∞–≥–µ–Ω—Ç—É"""
        
        try:
            formatted_parts = []
            
            # –û–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            if links.get('urls'):
                urls_text = "\n".join([f"‚Ä¢ {link['url']}" for link in links['urls']])
                formatted_parts.append(f"üìé –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏:\n{urls_text}")
            
            # –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç + —Å—Å—ã–ª–∫–∞)
            if links.get('text_links'):
                text_links = "\n".join([
                    f"‚Ä¢ –¢–µ–∫—Å—Ç: '{link['text']}' ‚Üí –°—Å—ã–ª–∫–∞: {link['url']}" 
                    for link in links['text_links']
                ])
                formatted_parts.append(f"üîó –°–∫—Ä—ã—Ç—ã–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏:\n{text_links}")
            
            # Email –∞–¥—Ä–µ—Å–∞
            if links.get('emails'):
                emails_text = "\n".join([f"‚Ä¢ {email}" for email in links['emails']])
                formatted_parts.append(f"üìß Email –∞–¥—Ä–µ—Å–∞:\n{emails_text}")
            
            # –¢–µ–ª–µ—Ñ–æ–Ω—ã
            if links.get('phone_numbers'):
                phones_text = "\n".join([f"‚Ä¢ {phone}" for phone in links['phone_numbers']])
                formatted_parts.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã:\n{phones_text}")
            
            # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if links.get('mentions'):
                mentions_text = "\n".join([f"‚Ä¢ {mention}" for mention in links['mentions']])
                formatted_parts.append(f"üë§ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{mentions_text}")
            
            result = "\n\n".join(formatted_parts)
            
            logger.debug("üîó Links formatted for AI", 
                        total_sections=len(formatted_parts),
                        formatted_length=len(result))
            
            return result
            
        except Exception as e:
            logger.error("üí• Error formatting links for AI", error=str(e))
            return ""
    
    async def _ensure_tables_exist(self):
        """‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            async with get_db_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã content_agents
                check_agents_query = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'content_agents'
                );
                """)
                
                agents_exists = await session.execute(check_agents_query)
                
                if not agents_exists.scalar():
                    logger.info("üóÑÔ∏è Creating content_agents table")
                    await self._create_content_tables(session)
                
        except Exception as e:
            logger.error("üí• Failed to ensure tables exist", error=str(e))
    
    async def _create_content_tables(self, session):
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º constraint + —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –£–ù–ò–ö–ê–õ–¨–ù–´–ú CONSTRAINT
            agents_table = text("""
            CREATE TABLE IF NOT EXISTS content_agents (
                id SERIAL PRIMARY KEY,
                bot_id VARCHAR(255) NOT NULL,
                agent_name VARCHAR(255) NOT NULL,
                instructions TEXT NOT NULL,
                openai_agent_id VARCHAR(255),
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                
                -- ‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô CONSTRAINT: –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–∞ –±–æ—Ç–∞
                CONSTRAINT unique_bot_content_agent UNIQUE (bot_id, is_active)
            );
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏  
            stats_table = text("""
            CREATE TABLE IF NOT EXISTS content_rewrite_stats (
                id SERIAL PRIMARY KEY,
                bot_id VARCHAR(255) NOT NULL,
                user_id BIGINT,
                tokens_used INTEGER NOT NULL DEFAULT 0,
                input_tokens INTEGER DEFAULT 0,
                output_tokens INTEGER DEFAULT 0,
                processing_time FLOAT NOT NULL DEFAULT 0,
                created_at TIMESTAMP DEFAULT NOW()
            );
            """)
            
            # üì∫ –ù–û–í–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
            channels_table = text("""
            CREATE TABLE IF NOT EXISTS bot_admin_channels (
                id SERIAL PRIMARY KEY,
                bot_id VARCHAR(255) NOT NULL REFERENCES user_bots(bot_id) ON DELETE CASCADE,
                chat_id BIGINT NOT NULL,
                chat_title VARCHAR(255),
                chat_username VARCHAR(255),
                chat_type VARCHAR(50) DEFAULT 'channel',
                added_at TIMESTAMP DEFAULT NOW(),
                is_active BOOLEAN DEFAULT true,
                can_post_messages BOOLEAN DEFAULT true,
                last_rerait JSONB,
                
                CONSTRAINT unique_bot_channel UNIQUE (bot_id, is_active)
            );
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_content_agents_bot_id ON content_agents(bot_id);",
                "CREATE INDEX IF NOT EXISTS idx_content_agents_active ON content_agents(bot_id, is_active);", 
                "CREATE INDEX IF NOT EXISTS idx_content_stats_bot_id ON content_rewrite_stats(bot_id);",
                "CREATE INDEX IF NOT EXISTS idx_content_stats_created ON content_rewrite_stats(created_at);",
                "CREATE INDEX IF NOT EXISTS idx_channels_bot_id ON bot_admin_channels(bot_id);",
                "CREATE INDEX IF NOT EXISTS idx_channels_chat_id ON bot_admin_channels(chat_id);"
            ]
            
            await session.execute(agents_table)
            await session.execute(stats_table)
            await session.execute(channels_table)
            
            for index_sql in indexes:
                try:
                    await session.execute(text(index_sql))
                except Exception as idx_error:
                    logger.warning("‚ö†Ô∏è Index creation failed", index=index_sql, error=str(idx_error))
            
            await session.commit()
            
            logger.info("‚úÖ Content tables created successfully with unique constraint and channels support")
            
        except Exception as e:
            logger.error("üí• Error creating content tables", error=str(e))
            await session.rollback()
            raise
    
    # ===== üì∫ –ù–û–í–û–ï: –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ù–ê–õ–ê–ú–ò =====
    
    async def save_channel_info(self, bot_id: str, channel_data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                check_query = text("""
                SELECT id FROM bot_admin_channels 
                WHERE bot_id = :bot_id AND is_active = true
                LIMIT 1
                """)
                existing = await session.execute(check_query, {'bot_id': bot_id})
                
                if existing.fetchone():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    update_query = text("""
                    UPDATE bot_admin_channels 
                    SET chat_id = :chat_id, chat_title = :chat_title, 
                        chat_username = :chat_username, chat_type = :chat_type,
                        added_at = NOW()
                    WHERE bot_id = :bot_id AND is_active = true
                    """)
                    await session.execute(update_query, {
                        'bot_id': bot_id,
                        'chat_id': channel_data['chat_id'],
                        'chat_title': channel_data.get('chat_title'),
                        'chat_username': channel_data.get('chat_username'),
                        'chat_type': channel_data.get('chat_type', 'channel')
                    })
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    insert_query = text("""
                    INSERT INTO bot_admin_channels 
                    (bot_id, chat_id, chat_title, chat_username, chat_type, added_at, is_active, can_post_messages)
                    VALUES (:bot_id, :chat_id, :chat_title, :chat_username, :chat_type, NOW(), true, true)
                    """)
                    await session.execute(insert_query, {
                        'bot_id': bot_id,
                        'chat_id': channel_data['chat_id'],
                        'chat_title': channel_data.get('chat_title'),
                        'chat_username': channel_data.get('chat_username'),
                        'chat_type': channel_data.get('chat_type', 'channel')
                    })
                
                await session.commit()
                return True
                
        except Exception as e:
            logger.error("üí• Error saving channel info", bot_id=bot_id, error=str(e))
            return False

    async def get_channel_info(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            async with get_db_session() as session:
                query = text("""
                SELECT chat_id, chat_title, chat_username, chat_type, added_at, last_rerait
                FROM bot_admin_channels 
                WHERE bot_id = :bot_id AND is_active = true
                LIMIT 1
                """)
                result = await session.execute(query, {'bot_id': bot_id})
                row = result.fetchone()
                
                if row:
                    return {
                        'chat_id': row[0],
                        'chat_title': row[1],
                        'chat_username': row[2],
                        'chat_type': row[3],
                        'added_at': row[4],
                        'last_rerait': row[5]
                    }
                return None
                
        except Exception as e:
            logger.error("üí• Error getting channel info", bot_id=bot_id, error=str(e))
            return None

    async def save_rewrite_result(self, bot_id: str, rewrite_data: Dict[str, Any]) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ–¥–∏–∞ –∫–ª—é—á–∞–º–∏"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–±–∞ –∫–ª—é—á–∞ –º–µ–¥–∏–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if isinstance(rewrite_data, dict):
                # –ï—Å–ª–∏ –µ—Å—Ç—å media_info, –Ω–æ –Ω–µ—Ç media - –¥—É–±–ª–∏—Ä—É–µ–º
                if 'media_info' in rewrite_data and 'media' not in rewrite_data:
                    rewrite_data['media'] = rewrite_data['media_info']
                    logger.debug("üìé Added 'media' key before saving", 
                                bot_id=bot_id,
                                has_media_info=bool(rewrite_data['media_info']))
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å media, –Ω–æ –Ω–µ—Ç media_info - –¥—É–±–ª–∏—Ä—É–µ–º
                elif 'media' in rewrite_data and 'media_info' not in rewrite_data:
                    rewrite_data['media_info'] = rewrite_data['media']
                    logger.debug("üìé Added 'media_info' key before saving", 
                                bot_id=bot_id,
                                has_media=bool(rewrite_data['media']))
            
            async with get_db_session() as session:
                query = text("""
                UPDATE bot_admin_channels 
                SET last_rerait = :rewrite_data
                WHERE bot_id = :bot_id AND is_active = true
                """)
                
                result = await session.execute(query, {
                    'bot_id': bot_id,
                    'rewrite_data': json.dumps(rewrite_data)
                })
                await session.commit()
                
                success = result.rowcount > 0
                
                logger.debug("‚úÖ Rewrite result saved with guaranteed media keys", 
                            bot_id=bot_id,
                            success=success,
                            channels_updated=result.rowcount,
                            has_media=bool(rewrite_data.get('media')),
                            has_media_info=bool(rewrite_data.get('media_info')))
                
                return success
                
        except Exception as e:
            logger.error("üí• Error saving rewrite result with media keys", 
                        bot_id=bot_id, 
                        error=str(e),
                        exc_info=True)
            return False

    async def get_last_rewrite(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—Ä–∞–π—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ–¥–∏–∞ –∫–ª—é—á–∞–º–∏"""
        try:
            async with get_db_session() as session:
                query = text("""
                SELECT last_rerait FROM bot_admin_channels 
                WHERE bot_id = :bot_id AND is_active = true
                LIMIT 1
                """)
                result = await session.execute(query, {'bot_id': bot_id})
                row = result.fetchone()
                
                if row and row[0]:
                    rewrite_data = row[0]  # JSONB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ deserializ—É–µ—Ç—Å—è
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –º–µ–¥–∏–∞ –∫–ª—é—á–µ–π
                    if isinstance(rewrite_data, dict):
                        # –ï—Å–ª–∏ –µ—Å—Ç—å media_info, –Ω–æ –Ω–µ—Ç media - –¥—É–±–ª–∏—Ä—É–µ–º
                        if 'media_info' in rewrite_data and 'media' not in rewrite_data:
                            rewrite_data['media'] = rewrite_data['media_info']
                            logger.debug("üìé Added 'media' key from 'media_info'", 
                                        bot_id=bot_id,
                                        has_media_info=bool(rewrite_data['media_info']))
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å media, –Ω–æ –Ω–µ—Ç media_info - –¥—É–±–ª–∏—Ä—É–µ–º
                        elif 'media' in rewrite_data and 'media_info' not in rewrite_data:
                            rewrite_data['media_info'] = rewrite_data['media']
                            logger.debug("üìé Added 'media_info' key from 'media'", 
                                        bot_id=bot_id,
                                        has_media=bool(rewrite_data['media']))
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.debug("‚úÖ Last rewrite retrieved with guaranteed media keys", 
                                   bot_id=bot_id,
                                   has_content=bool(rewrite_data.get('content')),
                                   has_media=bool(rewrite_data.get('media')),
                                   has_media_info=bool(rewrite_data.get('media_info')),
                                   rewrite_keys=list(rewrite_data.keys()))
                    
                    return rewrite_data
                
                logger.debug("‚ö†Ô∏è No last rewrite found", bot_id=bot_id)
                return None
                
        except Exception as e:
            logger.error("üí• Error getting last rewrite with media keys fix", 
                        bot_id=bot_id, 
                        error=str(e),
                        exc_info=True)
            return None
    
    # ===== CONTENT AGENTS CRUD =====
    
    async def create_content_agent(
        self,
        bot_id: str,
        agent_name: str,
        instructions: str,
        openai_agent_id: str = None
    ) -> Optional[Dict[str, Any]]:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"""
        
        logger.info("üíæ Creating content agent in database", 
                   bot_id=bot_id,
                   agent_name=agent_name,
                   has_openai_id=bool(openai_agent_id))
        
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ê–ì–ï–ù–¢
                check_query = text("""
                SELECT id, agent_name, instructions, openai_agent_id, 
                       is_active, created_at, updated_at
                FROM content_agents 
                WHERE bot_id = :bot_id AND is_active = true
                LIMIT 1
                """)
                
                existing_result = await session.execute(check_query, {'bot_id': bot_id})
                existing_agent = existing_result.fetchone()
                
                if existing_agent:
                    logger.info("üîÑ Content agent already exists, updating instead", 
                               bot_id=bot_id,
                               existing_name=existing_agent[1],
                               new_name=agent_name)
                    
                    # –û–ë–ù–û–í–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ê–ì–ï–ù–¢
                    update_query = text("""
                    UPDATE content_agents 
                    SET agent_name = :agent_name,
                        instructions = :instructions,
                        openai_agent_id = :openai_agent_id,
                        updated_at = NOW()
                    WHERE bot_id = :bot_id AND is_active = true
                    RETURNING id, bot_id, agent_name, instructions, openai_agent_id, 
                             is_active, created_at, updated_at
                    """)
                    
                    result = await session.execute(update_query, {
                        'bot_id': bot_id,
                        'agent_name': agent_name,
                        'instructions': instructions,
                        'openai_agent_id': openai_agent_id
                    })
                    
                    await session.commit()
                    row = result.fetchone()
                    
                    if row:
                        agent_data = {
                            'id': row[0],
                            'bot_id': row[1],
                            'agent_name': row[2],
                            'instructions': row[3],
                            'openai_agent_id': row[4],
                            'is_active': row[5],
                            'created_at': row[6],
                            'updated_at': row[7],
                            'action': 'updated'  # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ß–¢–û –û–ë–ù–û–í–ò–õ–ò
                        }
                        
                        logger.info("‚úÖ Content agent updated successfully", 
                                   agent_id=agent_data['id'],
                                   bot_id=bot_id,
                                   agent_name=agent_name)
                        return agent_data
                
                # –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ê–ì–ï–ù–¢ –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û
                create_query = text("""
                INSERT INTO content_agents (
                    bot_id, agent_name, instructions, openai_agent_id, 
                    is_active, created_at, updated_at
                ) VALUES (:bot_id, :agent_name, :instructions, :openai_agent_id, true, NOW(), NOW())
                RETURNING id, bot_id, agent_name, instructions, openai_agent_id, 
                         is_active, created_at, updated_at
                """)
                
                result = await session.execute(create_query, {
                    'bot_id': bot_id,
                    'agent_name': agent_name,
                    'instructions': instructions,
                    'openai_agent_id': openai_agent_id
                })
                
                await session.commit()
                row = result.fetchone()
                
                if row:
                    agent_data = {
                        'id': row[0],
                        'bot_id': row[1],
                        'agent_name': row[2],
                        'instructions': row[3],
                        'openai_agent_id': row[4],
                        'is_active': row[5],
                        'created_at': row[6],
                        'updated_at': row[7],
                        'action': 'created'  # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ß–¢–û –°–û–ó–î–ê–õ–ò
                    }
                    
                    logger.info("‚úÖ Content agent created successfully", 
                               agent_id=agent_data['id'],
                               bot_id=bot_id,
                               agent_name=agent_name)
                    return agent_data
                else:
                    logger.error("‚ùå Failed to create content agent in database")
                    return None
                    
        except Exception as e:
            logger.error("üí• Database error creating content agent", 
                        bot_id=bot_id,
                        error=str(e),
                        exc_info=True)
            return None
    
    async def get_content_agent(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞ –ø–æ bot_id"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                query = text("""
                SELECT id, bot_id, agent_name, instructions, openai_agent_id, 
                       is_active, created_at, updated_at
                FROM content_agents 
                WHERE bot_id = :bot_id AND is_active = true
                ORDER BY created_at DESC
                LIMIT 1
                """)
                
                result = await session.execute(query, {'bot_id': bot_id})
                row = result.fetchone()
                
                if row:
                    return {
                        'id': row[0],
                        'bot_id': row[1],
                        'agent_name': row[2],
                        'instructions': row[3],
                        'openai_agent_id': row[4],
                        'is_active': row[5],
                        'created_at': row[6],
                        'updated_at': row[7]
                    }
                return None
                
        except Exception as e:
            logger.error("üí• Error fetching content agent", bot_id=bot_id, error=str(e))
            return None
    
    async def update_content_agent(
        self,
        bot_id: str,
        agent_name: str = None,
        instructions: str = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                updates = []
                params = {'bot_id': bot_id}
                
                if agent_name:
                    updates.append("agent_name = :agent_name")
                    params['agent_name'] = agent_name
                
                if instructions:
                    updates.append("instructions = :instructions")
                    params['instructions'] = instructions
                
                if not updates:
                    return False
                
                updates.append("updated_at = NOW()")
                
                query = text(f"""
                UPDATE content_agents 
                SET {', '.join(updates)}
                WHERE bot_id = :bot_id AND is_active = true
                """)
                
                result = await session.execute(query, params)
                await session.commit()
                
                rows_affected = result.rowcount
                
                logger.info("‚úÖ Content agent updated", bot_id=bot_id, rows_affected=rows_affected)
                return rows_affected > 0
                    
        except Exception as e:
            logger.error("üí• Error updating content agent", bot_id=bot_id, error=str(e))
            return False
    
    async def delete_content_agent(self, bot_id: str, soft_delete: bool = True) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                if soft_delete:
                    query = text("""
                    UPDATE content_agents 
                    SET is_active = false, updated_at = NOW()
                    WHERE bot_id = :bot_id AND is_active = true
                    """)
                else:
                    query = text("DELETE FROM content_agents WHERE bot_id = :bot_id")
                
                result = await session.execute(query, {'bot_id': bot_id})
                await session.commit()
                
                rows_affected = result.rowcount
                return rows_affected > 0
                    
        except Exception as e:
            logger.error("üí• Error deleting content agent", bot_id=bot_id, error=str(e))
            return False
    
    async def has_content_agent(self, bot_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                query = text("""
                SELECT EXISTS(
                    SELECT 1 FROM content_agents 
                    WHERE bot_id = :bot_id AND is_active = true
                )
                """)
                
                result = await session.execute(query, {'bot_id': bot_id})
                return bool(result.scalar())
                
        except Exception as e:
            logger.error("üí• Error checking content agent existence", bot_id=bot_id, error=str(e))
            return False
    
    # ===== OPENAI INTEGRATION =====
    
    async def create_openai_content_agent(
        self,
        bot_id: str,
        agent_name: str,
        instructions: str
    ) -> Optional[str]:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Responses API"""
        
        logger.info("ü§ñ Creating OpenAI content agent via Responses API", 
                   bot_id=bot_id,
                   agent_name=agent_name,
                   instructions_length=len(instructions))
        
        try:
            if not self.openai_client:
                logger.error("‚ùå OpenAI client not available")
                return None
            
            # ‚úÖ –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ _responses_with_retry –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
            if hasattr(self.openai_client, '_responses_with_retry'):
                # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
                result = await self.openai_client._responses_with_retry(
                    model="gpt-4o",
                    instructions=instructions,
                    input="–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç.",  # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    store=True,                                      # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    max_output_tokens=150                           # –õ–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
                )
            elif hasattr(self.openai_client, 'create_assistant'):
                # Fallback: –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ create_assistant
                result = await self.openai_client.create_assistant(
                    model="gpt-4o",
                    instructions=instructions
                )
            else:
                logger.error("‚ùå No suitable method available")
                return None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Responses API
            if result:
                # Responses API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç response_id –∫–∞–∫ ID –∞–≥–µ–Ω—Ç–∞
                response_id = None
                
                if hasattr(result, 'id'):
                    response_id = result.id
                elif isinstance(result, dict):
                    response_id = result.get('id') or result.get('response_id') or result.get('assistant_id')
                elif hasattr(result, 'response_id'):
                    response_id = result.response_id
                
                if response_id:
                    logger.info("‚úÖ OpenAI content agent created via Responses API", 
                               bot_id=bot_id,
                               agent_name=agent_name,
                               response_id=response_id)
                    return response_id
                else:
                    logger.error("‚ùå No response_id in result", result=str(result)[:200])
                    return None
            else:
                logger.error("‚ùå Empty result from OpenAI API")
                return None
                
        except Exception as e:
            logger.error("üí• Exception creating OpenAI content agent", 
                        bot_id=bot_id,
                        error=str(e),
                        exc_info=True)
            return None
    
    async def delete_openai_content_agent(self, openai_agent_id: str) -> bool:
        """‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç"""
        try:
            if not self.openai_client:
                return False
            
            if hasattr(self.openai_client, 'delete_assistant'):
                success = await self.openai_client.delete_assistant(openai_agent_id)
                logger.info("‚úÖ OpenAI content agent deleted", openai_agent_id=openai_agent_id)
                return success
            else:
                logger.warning("‚ö†Ô∏è delete_assistant method not available")
                return True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
                
        except Exception as e:
            logger.error("üí• Exception deleting OpenAI content agent", 
                        openai_agent_id=openai_agent_id,
                        error=str(e))
            return False
    
    # ===== –¢–û–ö–ï–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
    
    def calculate_tokens(self, text: str) -> Dict[str, int]:
        """
        –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
        """
        try:
            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: 1 —Ç–æ–∫–µ–Ω ‚âà 4-5 —Å–∏–º–≤–æ–ª–æ–≤
            # –î–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
            
            char_count = len(text)
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            russian_chars = sum(1 for char in text if '\u0400' <= char <= '\u04FF')
            english_chars = sum(1 for char in text if char.isalpha() and not ('\u0400' <= char <= '\u04FF'))
            other_chars = char_count - russian_chars - english_chars
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            russian_ratio = 3.5  # –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω—ã–π
            english_ratio = 4.0   # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            other_ratio = 2.0     # –ß–∏—Å–ª–∞, —Å–∏–º–≤–æ–ª—ã –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω—ã–µ
            
            estimated_tokens = int(
                (russian_chars / russian_ratio) +
                (english_chars / english_ratio) +
                (other_chars / other_ratio)
            )
            
            # –ú–∏–Ω–∏–º—É–º 1 —Ç–æ–∫–µ–Ω
            estimated_tokens = max(1, estimated_tokens)
            
            logger.debug("üìä Token calculation", 
                        text_length=char_count,
                        russian_chars=russian_chars,
                        english_chars=english_chars,
                        estimated_tokens=estimated_tokens)
            
            return {
                'input_tokens': estimated_tokens,
                'estimated_cost_usd': self.estimate_cost(estimated_tokens, 0),
                'char_count': char_count,
                'breakdown': {
                    'russian_chars': russian_chars,
                    'english_chars': english_chars,
                    'other_chars': other_chars
                }
            }
            
        except Exception as e:
            logger.error("üí• Error calculating tokens", error=str(e))
            return {
                'input_tokens': len(text) // 4,  # Fallback
                'estimated_cost_usd': 0.0,
                'char_count': len(text),
                'breakdown': {}
            }
    
    def estimate_cost(self, input_tokens: int, output_tokens: int) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ USD –¥–ª—è GPT-4o
        –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —è–Ω–≤–∞—Ä—å 2025
        """
        try:
            # OpenAI GPT-4o —Ü–µ–Ω—ã (–∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤)
            INPUT_COST_PER_1K = 0.005   # $0.005 –∑–∞ 1K input —Ç–æ–∫–µ–Ω–æ–≤
            OUTPUT_COST_PER_1K = 0.015  # $0.015 –∑–∞ 1K output —Ç–æ–∫–µ–Ω–æ–≤
            
            input_cost = (input_tokens / 1000) * INPUT_COST_PER_1K
            output_cost = (output_tokens / 1000) * OUTPUT_COST_PER_1K
            
            total_cost = input_cost + output_cost
            
            return round(total_cost, 6)
            
        except Exception as e:
            logger.error("üí• Error estimating cost", error=str(e))
            return 0.0
    
    # ===== ‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ß–ï–†–ï–ó TokenManager =====
    
    async def check_token_limits(self, bot_id: str, user_id: int, estimated_tokens: int) -> Dict[str, Any]:
        """
        ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É TokenManager
        ContentManager –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–∞–º–∏, —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            from database.managers.token_manager import TokenManager
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            has_tokens, used_tokens, limit_tokens = await TokenManager.check_token_limit(user_id)
            
            result = {
                'can_proceed': has_tokens,
                'current_usage': {
                    'total_used': used_tokens,
                    'estimated_total': used_tokens + estimated_tokens
                },
                'limits': {
                    'total_limit': limit_tokens
                },
                'estimated_tokens': estimated_tokens,
                'estimated_cost': self.estimate_cost(estimated_tokens, estimated_tokens),
                'warnings': [],
                'method': 'unified_token_system'
            }
            
            if not has_tokens:
                result['warnings'].append('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            
            logger.info("üîç Token limits check via unified system", 
                       bot_id=bot_id,
                       user_id=user_id,
                       can_proceed=result['can_proceed'],
                       used_tokens=used_tokens,
                       limit_tokens=limit_tokens,
                       estimated_tokens=estimated_tokens)
            
            return result
            
        except ImportError:
            logger.warning("‚ö†Ô∏è TokenManager not available, allowing request")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            return {
                'can_proceed': True,
                'current_usage': {'total_used': 0, 'estimated_total': estimated_tokens},
                'limits': {'total_limit': 500000},
                'estimated_tokens': estimated_tokens,
                'estimated_cost': 0.0,
                'warnings': ['TokenManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞'],
                'method': 'fallback'
            }
        except Exception as e:
            logger.error("üí• Error checking token limits via unified system", 
                        bot_id=bot_id,
                        user_id=user_id,
                        error=str(e))
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            return {
                'can_proceed': True,
                'current_usage': {'total_used': 0, 'estimated_total': estimated_tokens},
                'limits': {'total_limit': 500000},
                'estimated_tokens': estimated_tokens,
                'estimated_cost': 0.0,
                'warnings': [f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {str(e)}'],
                'method': 'error_fallback'
            }
    
    async def get_daily_token_usage(self, bot_id: str, user_id: int) -> int:
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                query = text("""
                SELECT COALESCE(SUM(tokens_used), 0) as daily_usage
                FROM content_rewrite_stats 
                WHERE bot_id = :bot_id AND user_id = :user_id 
                AND created_at >= CURRENT_DATE
                """)
                
                result = await session.execute(query, {'bot_id': bot_id, 'user_id': user_id})
                usage = result.scalar()
                return int(usage) if usage else 0
                
        except Exception as e:
            logger.error("üí• Error getting daily token usage", error=str(e))
            return 0
    
    async def get_token_limit(self, bot_id: str, period: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            default_limits = {
                'daily': 5000,    # 5K —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å
                'monthly': 50000  # 50K —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü
            }
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ user_bots)
            try:
                async with get_db_session() as session:
                    query = text("""
                    SELECT ai_assistant_settings
                    FROM user_bots 
                    WHERE bot_id = :bot_id
                    """)
                    
                    result = await session.execute(query, {'bot_id': bot_id})
                    settings = result.scalar()
                    
                    if settings and isinstance(settings, dict):
                        content_settings = settings.get('content_settings', {})
                        custom_limit = content_settings.get(f'{period}_token_limit')
                        
                        if custom_limit and isinstance(custom_limit, int):
                            return custom_limit
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            
            return default_limits.get(period, 1000)
            
        except Exception as e:
            logger.error("üí• Error getting token limit", error=str(e))
            return 1000  # Fallback –ª–∏–º–∏—Ç
    
    async def _will_exceed_monthly_limit(self, bot_id: str, estimated_tokens: int, monthly_limit: int) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                query = text("""
                SELECT COALESCE(SUM(tokens_used), 0) as monthly_usage
                FROM content_rewrite_stats 
                WHERE bot_id = :bot_id 
                AND created_at >= DATE_TRUNC('month', CURRENT_DATE)
                """)
                
                result = await session.execute(query, {'bot_id': bot_id})
                monthly_usage = int(result.scalar() or 0)
                
                return (monthly_usage + estimated_tokens) > monthly_limit
                
        except Exception as e:
            logger.error("üí• Error checking monthly limit", error=str(e))
            return False

    # ===== ‚úÖ –ù–û–í–û–ï: –ü–û–õ–£–ß–ï–ù–ò–ï admin_chat_id –ë–û–¢–ê =====
    
    async def _get_bot_admin_chat_id(self, bot_id: str) -> Optional[int]:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ admin_chat_id –¥–ª—è –±–æ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_bots
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ TokenManager
        """
        try:
            async with get_db_session() as session:
                query = text("""
                SELECT admin_chat_id 
                FROM user_bots 
                WHERE bot_id = :bot_id
                LIMIT 1
                """)
                
                result = await session.execute(query, {'bot_id': bot_id})
                admin_chat_id = result.scalar()
                
                if admin_chat_id:
                    logger.debug("‚úÖ Admin chat ID found for bot", 
                               bot_id=bot_id,
                               admin_chat_id=admin_chat_id)
                    return int(admin_chat_id)
                else:
                    logger.warning("‚ö†Ô∏è No admin_chat_id found for bot", bot_id=bot_id)
                    return None
                    
        except Exception as e:
            logger.error("üí• Error getting bot admin_chat_id", 
                        bot_id=bot_id,
                        error=str(e))
            return None
    
    # ===== üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: CONTENT PROCESSING –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–û–ô –ò –°–°–´–õ–ö–ê–ú–ò =====
    
    async def process_content_rewrite(
        self,
        bot_id: str,
        original_text: str,
        media_info: Optional[Dict[str, Any]] = None,
        links_info: Optional[Dict[str, Any]] = None,  # ‚ú® –ù–û–í–û–ï
        user_id: Optional[int] = None
    ) -> Optional[Dict[str, Any]]:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è content_handlers.py + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Å—ã–ª–æ–∫"""
        
        logger.info("üìù Processing content rewrite with unified structure + links", 
                   bot_id=bot_id,
                   text_length=len(original_text),
                   has_media=bool(media_info),
                   has_links=bool(links_info and links_info.get('has_links')),
                   total_links=links_info.get('total_links', 0) if links_info else 0,
                   user_id=user_id,
                   media_type=media_info.get('type') if media_info else None)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = await self.get_content_agent(bot_id)
            if not agent:
                return {
                    'success': False,
                    'error': 'no_agent',
                    'message': '–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            openai_agent_id = agent.get('openai_agent_id')
            if not openai_agent_id:
                return {
                    'success': False,
                    'error': 'no_openai_id',
                    'message': 'OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                }
            
            # 2. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            token_calc = self.calculate_tokens(original_text)
            estimated_input_tokens = token_calc['input_tokens']
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ß–ï–†–ï–ó TokenManager
            if user_id:
                limits_check = await self.check_token_limits(bot_id, user_id, estimated_input_tokens)
                
                if not limits_check['can_proceed']:
                    return {
                        'success': False,
                        'error': 'token_limit_exceeded',
                        'message': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤',
                        'details': limits_check
                    }
            
            # ‚ú® 4. –û–ë–ù–û–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø + —Å—Å—ã–ª–∫–∏
            enhanced_instructions = agent['instructions']

            if media_info and media_info.get('type') == 'media_group':
                logger.info("üì∏ Processing media group rewrite", 
                           bot_id=bot_id,
                           media_count=media_info.get('count', 0),
                           media_group_id=media_info.get('media_group_id'))
                
                enhanced_instructions += f"""

–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ª—å–±–æ–º–∞ –∏–∑ {media_info.get('count', 0)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.
–°–æ—Ö—Ä–∞–Ω—è–π —Å–º—ã—Å–ª, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç –∞–ª—å–±–æ–º–∞.
"""

            # ‚ú® –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö –≤ –ø—Ä–æ–º–ø—Ç
            if links_info and links_info.get('has_links'):
                links_context = self._format_links_for_ai(links_info['links'])
                
                enhanced_instructions += f"""

üîó –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–°–´–õ–ö–ê–• –í –¢–ï–ö–°–¢–ï:
{links_context}

–ü–†–ò –†–ï–†–ê–ô–¢–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
- –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π), —É–∫–∞–∂–∏ –∏ —Ç–µ–∫—Å—Ç –∏ —Å–∞–º—É —Å—Å—ã–ª–∫—É
- –ù–µ —É–¥–∞–ª—è–π –∏ –Ω–µ –∏–∑–º–µ–Ω—è–π URL –∞–¥—Ä–µ—Å–∞
- Email –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –æ—Å—Ç–∞–≤–ª—è–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (@username) —Å–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω–æ
"""
                
                logger.info("üîó Links information added to AI instructions", 
                           bot_id=bot_id,
                           total_links=links_info.get('total_links', 0),
                           links_context_length=len(links_context))
            
            # 5. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ Responses API
            start_time = time.time()
            
            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è Responses API
            if hasattr(self.openai_client, '_responses_with_retry'):
                # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - —á–µ—Ä–µ–∑ _responses_with_retry
                rewrite_result = await self.openai_client._responses_with_retry(
                    model="gpt-4o",
                    instructions=f"–¢—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç. {enhanced_instructions}",
                    input=original_text,
                    previous_response_id=openai_agent_id,  # ID –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ context
                    store=True,                           # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    max_output_tokens=2000               # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                )
            elif hasattr(self.openai_client, 'send_message'):
                # Fallback: –º–µ—Ç–æ–¥ send_message
                rewrite_result = await self.openai_client.send_message(
                    assistant_id=openai_agent_id,
                    message=original_text,
                    user_id=user_id or 0
                )
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: mock
                rewrite_result = await self.openai_client._responses_with_retry(
                    model="mock-gpt-4o",
                    instructions=enhanced_instructions,
                    input=original_text
                )
            
            processing_time = time.time() - start_time
            
            # 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Responses API
            rewritten_text = ""
            actual_tokens = {}
            
            if rewrite_result:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Responses API
                if hasattr(rewrite_result, 'output_text'):
                    rewritten_text = rewrite_result.output_text
                elif hasattr(rewrite_result, 'output') and rewrite_result.output:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É output
                    for output_item in rewrite_result.output:
                        if output_item.get('type') == 'message':
                            content = output_item.get('content', [])
                            for content_item in content:
                                if content_item.get('type') == 'output_text':
                                    rewritten_text = content_item.get('text', '')
                                    break
                            if rewritten_text:
                                break
                
                # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ö–ê–ö –í client.py - —á–µ—Ä–µ–∑ hasattr –∏ –ø—Ä—è–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                if hasattr(rewrite_result, 'usage') and rewrite_result.usage is not None:
                    usage_obj = rewrite_result.usage
                    
                    input_tokens = None
                    output_tokens = None
                    
                    # ‚úÖ –ö–û–ü–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó client.py
                    if hasattr(usage_obj, 'input_tokens') and getattr(usage_obj, 'input_tokens') is not None:
                        input_tokens = usage_obj.input_tokens  # ‚≠ê –ü–†–Ø–ú–û–ï –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É
                    elif hasattr(usage_obj, 'prompt_tokens') and getattr(usage_obj, 'prompt_tokens') is not None:
                        input_tokens = usage_obj.prompt_tokens  # ‚≠ê –ü–†–Ø–ú–û–ï –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É
                    
                    if hasattr(usage_obj, 'output_tokens') and getattr(usage_obj, 'output_tokens') is not None:
                        output_tokens = usage_obj.output_tokens  # ‚≠ê –ü–†–Ø–ú–û–ï –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É
                    elif hasattr(usage_obj, 'completion_tokens') and getattr(usage_obj, 'completion_tokens') is not None:
                        output_tokens = usage_obj.completion_tokens  # ‚≠ê –ü–†–Ø–ú–û–ï –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É
                    
                    # Fallback –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ–∫–µ–Ω—ã
                    if input_tokens is None or output_tokens is None:
                        estimated_input = max(1, int(len(original_text.split()) * 1.3))
                        estimated_output = max(1, int(len(rewritten_text.split()) * 1.3)) if rewritten_text else 1
                        
                        input_tokens = input_tokens or estimated_input
                        output_tokens = output_tokens or estimated_output
                    
                    actual_tokens = {
                        'input_tokens': int(input_tokens),      # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¥–ª—è handlers
                        'output_tokens': int(output_tokens),    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¥–ª—è handlers
                        'total_tokens': int(input_tokens + output_tokens)  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¥–ª—è handlers
                    }
                    
                    logger.debug("‚úÖ Tokens extracted successfully", 
                                input_tokens=input_tokens,
                                output_tokens=output_tokens,
                                total_tokens=input_tokens + output_tokens)
                    
                elif isinstance(rewrite_result, dict):
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è backward compatibility
                    rewritten_text = rewrite_result.get('content', str(rewrite_result))
                    actual_tokens = {
                        'input_tokens': estimated_input_tokens,
                        'output_tokens': len(rewritten_text) // 4,
                        'total_tokens': estimated_input_tokens + len(rewritten_text) // 4
                    }
                else:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    if not rewritten_text:
                        rewritten_text = str(rewrite_result)
                    
                    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                    output_calc = self.calculate_tokens(rewritten_text)
                    actual_tokens = {
                        'input_tokens': estimated_input_tokens,
                        'output_tokens': output_calc['input_tokens'],
                        'total_tokens': estimated_input_tokens + output_calc['input_tokens']
                    }
            
            if rewritten_text:
                # ‚úÖ 7. –ù–û–í–û–ï: –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù–´ –í –ï–î–ò–ù–£–Æ –°–ò–°–¢–ï–ú–£ TokenManager
                try:
                    from database.managers.token_manager import TokenManager
                    
                    # –ü–æ–ª—É—á–∞–µ–º admin_chat_id –¥–ª—è –±–æ—Ç–∞
                    admin_chat_id = await self._get_bot_admin_chat_id(bot_id)
                    
                    # ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                    await TokenManager.save_token_usage(
                        bot_id=bot_id,
                        input_tokens=actual_tokens.get('input_tokens', 0),
                        output_tokens=actual_tokens.get('output_tokens', 0),
                        admin_chat_id=admin_chat_id,
                        user_id=user_id
                    )
                    
                    logger.info("‚úÖ Tokens saved to unified TokenManager system", 
                               bot_id=bot_id,
                               user_id=user_id,
                               input_tokens=actual_tokens.get('input_tokens', 0),
                               output_tokens=actual_tokens.get('output_tokens', 0),
                               total_tokens=actual_tokens.get('total_tokens', 0),
                               admin_chat_id=admin_chat_id)
                    
                except ImportError:
                    logger.warning("‚ö†Ô∏è TokenManager not available - tokens not saved to unified system")
                except Exception as token_error:
                    logger.error("üí• Failed to save tokens via TokenManager", 
                                bot_id=bot_id,
                                user_id=user_id,
                                error=str(token_error))
                
                # ‚úÖ 8. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                await self._save_rewrite_stats(
                    bot_id=bot_id,
                    user_id=user_id,
                    tokens_used=actual_tokens.get('total_tokens', estimated_input_tokens),
                    processing_time=processing_time,
                    input_tokens=actual_tokens.get('input_tokens', estimated_input_tokens),
                    output_tokens=actual_tokens.get('output_tokens', 0)
                )
                
                logger.info("‚úÖ Content rewrite successful with unified token integration and links support", 
                           bot_id=bot_id,
                           original_length=len(original_text),
                           rewritten_length=len(rewritten_text),
                           tokens_used=actual_tokens.get('total_tokens', 0),
                           processing_time=f"{processing_time:.2f}s",
                           is_media_group=media_info.get('type') == 'media_group' if media_info else False,
                           has_links=bool(links_info and links_info.get('has_links')),
                           total_links=links_info.get('total_links', 0) if links_info else 0,
                           integration_status="‚úÖ Tokens saved via TokenManager + detailed stats + links processed")
                
                # ‚úÖ 9. –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø content_handlers.py –° –ü–û–î–î–ï–†–ñ–ö–û–ô –°–°–´–õ–û–ö
                return {
                    'success': True,
                    'content': {                                    # ‚úÖ –û–ë–ï–†–ù–£–¢–û –í content
                        'original_text': original_text,
                        'rewritten_text': rewritten_text,
                        'text_length_change': len(rewritten_text) - len(original_text)
                    },
                    'tokens': {                                     # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–ï–ù–û–í–ê–ù–ò–ï
                        'input_tokens': actual_tokens.get('input_tokens', 0),
                        'output_tokens': actual_tokens.get('output_tokens', 0),
                        'total_tokens': actual_tokens.get('total_tokens', 0),
                        'estimated_cost_usd': self.estimate_cost(
                            actual_tokens.get('input_tokens', 0),
                            actual_tokens.get('output_tokens', 0)
                        )
                    },
                    'agent': {                                      # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ì–ï–ù–¢–ï
                        'name': agent['agent_name'],
                        'id': agent['id'],
                        'instructions': agent['instructions']
                    },
                    'media_info': media_info,                       # ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ï–î–ò–ê
                    'links_info': links_info,                       # ‚ú® –ù–û–í–û–ï: –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–°–´–õ–ö–ê–•
                    'processing_time': processing_time,
                    'model_used': 'gpt-4o',
                    'agent_type': 'openai_responses',
                    'is_media_group': media_info.get('type') == 'media_group' if media_info else False,
                    'has_links': bool(links_info and links_info.get('has_links')),  # ‚ú® –ù–û–í–û–ï
                    'token_integration': 'unified_system',          # ‚úÖ –ú–ê–†–ö–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
                    'links_processing': 'enhanced_instructions'     # ‚ú® –ù–û–í–û–ï: –ú–ê–†–ö–ï–† –û–ë–†–ê–ë–û–¢–ö–ò –°–°–´–õ–û–ö
                }
            else:
                return {
                    'success': False,
                    'error': 'no_response',
                    'message': 'OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç'
                }
                
        except Exception as e:
            logger.error("üí• Exception in content rewrite with links support", 
                        bot_id=bot_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            return {
                'success': False,
                'error': 'processing_exception',
                'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
            }
    
    # ===== ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
    
    async def _save_rewrite_stats(
        self,
        bot_id: str,
        user_id: Optional[int],
        tokens_used: int,
        processing_time: float,
        input_tokens: int = 0,
        output_tokens: int = 0
    ) -> None:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ TokenManager.save_token_usage()
        """
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                query = text("""
                INSERT INTO content_rewrite_stats (
                    bot_id, user_id, tokens_used, processing_time, 
                    input_tokens, output_tokens, created_at
                ) VALUES (:bot_id, :user_id, :tokens_used, :processing_time, 
                         :input_tokens, :output_tokens, NOW())
                """)
                
                await session.execute(query, {
                    'bot_id': bot_id,
                    'user_id': user_id,
                    'tokens_used': tokens_used,
                    'processing_time': processing_time,
                    'input_tokens': input_tokens,
                    'output_tokens': output_tokens
                })
                
                await session.commit()
                
                logger.debug("üìä Content rewrite detailed statistics saved", 
                            bot_id=bot_id,
                            tokens_used=tokens_used,
                            input_tokens=input_tokens,
                            output_tokens=output_tokens,
                            processing_time=processing_time,
                            note="‚úÖ Main tokens saved via TokenManager.save_token_usage()")
                
        except Exception as e:
            logger.warning("‚ö†Ô∏è Failed to save content rewrite detailed statistics (non-critical)", 
                          bot_id=bot_id,
                          error=str(e))
    
    # ===== STATISTICS =====
    
    async def get_content_agent_stats(self, bot_id: str) -> Dict[str, Any]:
        """‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏"""
        try:
            agent = await self.get_content_agent(bot_id)
            if not agent:
                return {}
            
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
                stats_query = text("""
                SELECT 
                    COALESCE(SUM(tokens_used), 0) as total_tokens,
                    COALESCE(SUM(input_tokens), 0) as total_input_tokens,
                    COALESCE(SUM(output_tokens), 0) as total_output_tokens,
                    COUNT(*) as total_rewrites,
                    AVG(processing_time) as avg_processing_time,
                    MAX(created_at) as last_usage_at,
                    AVG(tokens_used) as avg_tokens_per_rewrite
                FROM content_rewrite_stats 
                WHERE bot_id = :bot_id
                """)
                
                stats_result = await session.execute(stats_query, {'bot_id': bot_id})
                stats_row = stats_result.fetchone()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                weekly_query = text("""
                SELECT 
                    COALESCE(SUM(tokens_used), 0) as weekly_tokens,
                    COUNT(*) as weekly_rewrites
                FROM content_rewrite_stats 
                WHERE bot_id = :bot_id AND created_at >= NOW() - INTERVAL '7 days'
                """)
                
                weekly_result = await session.execute(weekly_query, {'bot_id': bot_id})
                weekly_row = weekly_result.fetchone()
                
                total_tokens = int(stats_row[0]) if stats_row else 0
                total_cost = self.estimate_cost(
                    int(stats_row[1]) if stats_row else 0,
                    int(stats_row[2]) if stats_row else 0
                )
                
                stats = {
                    'has_openai_id': bool(agent.get('openai_agent_id')),
                    'tokens_used': total_tokens,
                    'input_tokens': int(stats_row[1]) if stats_row else 0,
                    'output_tokens': int(stats_row[2]) if stats_row else 0,
                    'total_cost_usd': total_cost,
                    'total_rewrites': int(stats_row[3]) if stats_row else 0,
                    'avg_processing_time': float(stats_row[4]) if stats_row and stats_row[4] else 0,
                    'avg_tokens_per_rewrite': float(stats_row[6]) if stats_row and stats_row[6] else 0,
                    'last_usage_at': stats_row[5].isoformat() if stats_row and stats_row[5] else None,
                    'weekly_stats': {
                        'tokens': int(weekly_row[0]) if weekly_row else 0,
                        'rewrites': int(weekly_row[1]) if weekly_row else 0
                    }
                }
                
                logger.debug("üìä Extended content agent stats retrieved", 
                            bot_id=bot_id,
                            total_tokens=total_tokens,
                            total_cost=total_cost)
                
                return stats
                
        except Exception as e:
            logger.error("üí• Error fetching content agent stats", 
                        bot_id=bot_id,
                        error=str(e))
            return {}
    
    async def get_all_content_agents_summary(self) -> Dict[str, Any]:
        """‚úÖ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏"""
        try:
            await self._ensure_tables_exist()
            
            async with get_db_session() as session:
                summary_query = text("""
                SELECT 
                    COUNT(*) as total_content_agents,
                    COUNT(CASE WHEN is_active = true THEN 1 END) as active_agents,
                    COUNT(CASE WHEN openai_agent_id IS NOT NULL THEN 1 END) as agents_with_openai
                FROM content_agents
                """)
                
                summary_result = await session.execute(summary_query)
                summary_row = summary_result.fetchone()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                usage_query = text("""
                SELECT 
                    COALESCE(SUM(tokens_used), 0) as total_tokens_used,
                    COALESCE(SUM(input_tokens), 0) as total_input_tokens,
                    COALESCE(SUM(output_tokens), 0) as total_output_tokens,
                    COUNT(*) as total_rewrites_made,
                    AVG(processing_time) as avg_processing_time
                FROM content_rewrite_stats
                """)
                
                usage_result = await session.execute(usage_query)
                usage_row = usage_result.fetchone()
                
                total_cost = self.estimate_cost(
                    int(usage_row[1]) if usage_row else 0,
                    int(usage_row[2]) if usage_row else 0
                )
                
                summary = {
                    'total_content_agents': int(summary_row[0]) if summary_row else 0,
                    'active_agents': int(summary_row[1]) if summary_row else 0,
                    'agents_with_openai': int(summary_row[2]) if summary_row else 0,
                    'total_tokens_used': int(usage_row[0]) if usage_row else 0,
                    'total_input_tokens': int(usage_row[1]) if usage_row else 0,
                    'total_output_tokens': int(usage_row[2]) if usage_row else 0,
                    'total_cost_usd': total_cost,
                    'total_rewrites_made': int(usage_row[3]) if usage_row else 0,
                    'avg_processing_time': float(usage_row[4]) if usage_row and usage_row[4] else 0
                }
                
                logger.info("üìä Content agents summary with tokens retrieved", 
                           summary=summary)
                return summary
                
        except Exception as e:
            logger.error("üí• Error fetching content agents summary", error=str(e))
            return {}


    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====
    
    async def get_total_agents_count(self, bot_id: str) -> Dict[str, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ (–ª–∏–º–∏—Ç 2)"""
        try:
            async with get_db_session() as session:
                # –û–±—ã—á–Ω—ã–π –ò–ò –∞–≥–µ–Ω—Ç –∏–∑ user_bots
                ai_agent_query = text("""
                SELECT COUNT(*) FROM user_bots 
                WHERE bot_id = :bot_id 
                AND ai_assistant_enabled = true 
                AND openai_agent_id IS NOT NULL
                """)
                
                ai_result = await session.execute(ai_agent_query, {'bot_id': bot_id})
                ai_agents_count = int(ai_result.scalar() or 0)
                
                # –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Ç –∏–∑ content_agents
                content_agents_count = 1 if await self.has_content_agent(bot_id) else 0
                
                total_agents = ai_agents_count + content_agents_count
                
                logger.info("üîç Agents count check", 
                           bot_id=bot_id,
                           ai_agents=ai_agents_count,
                           content_agents=content_agents_count,
                           total=total_agents)
                
                return {
                    'ai_agents': ai_agents_count,
                    'content_agents': content_agents_count,
                    'total': total_agents,
                    'can_create_content_agent': content_agents_count == 0,
                    'within_limit': total_agents <= 2
                }
                
        except Exception as e:
            logger.error("üí• Error checking agents count", error=str(e))
            return {
                'ai_agents': 0,
                'content_agents': 0,
                'total': 0,
                'can_create_content_agent': True,
                'within_limit': True
            }


# ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶ =====

async def init_content_tables():
    """‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    try:
        manager = ContentManager()
        await manager._ensure_tables_exist()
        logger.info("‚úÖ Content tables initialized successfully")
        return True
    except Exception as e:
        logger.error("üí• Failed to initialize content tables", error=str(e))
        return False
