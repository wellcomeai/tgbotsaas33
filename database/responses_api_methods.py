"""
‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Responses API –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ response_id
"""

from typing import Optional, Dict, List
from sqlalchemy import select, update
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import DeclarativeMeta
from sqlalchemy.orm.attributes import flag_modified
import structlog

logger = structlog.get_logger()


class ResponsesAPIMethods:
    """
    ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Responses API
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ response_id –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    """
    
    def __init__(self, db_instance):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –ë–î"""
        self.db = db_instance
    
    async def get_conversation_response_id(self, bot_id: str, user_id: int) -> Optional[str]:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å response_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            str: response_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ None
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üîç Getting conversation response_id from database", 
                           bot_id=bot_id, user_id=user_id)
                
                result = await session.execute(
                    select(UserBot.openai_conversation_contexts)
                    .where(UserBot.bot_id == bot_id)
                )
                
                bot_data = result.scalar_one_or_none()
                if not bot_data:
                    logger.warning("‚ùå Bot not found for response_id lookup", bot_id=bot_id)
                    return None
                
                if not bot_data:
                    logger.info("‚ÑπÔ∏è No conversation contexts found", bot_id=bot_id)
                    return None
                
                response_id = bot_data.get(str(user_id))
                
                logger.info("‚úÖ Conversation response_id retrieved", 
                           bot_id=bot_id, 
                           user_id=user_id,
                           has_response_id=bool(response_id),
                           response_id_preview=response_id[:20] + "..." if response_id else None)
                
                return response_id
                
        except Exception as e:
            logger.error("üí• Error getting conversation response_id", 
                        bot_id=bot_id, 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return None

    async def save_conversation_response_id(self, bot_id: str, user_id: int, response_id: str) -> bool:
        """
        ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å response_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram  
            response_id: response_id –æ—Ç OpenAI Responses API
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üíæ Saving conversation response_id", 
                           bot_id=bot_id, 
                           user_id=user_id,
                           response_id_preview=response_id[:20] + "..." if response_id else None)
                
                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    logger.error("‚ùå Bot not found for response_id save", bot_id=bot_id)
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º contexts
                if not bot.openai_conversation_contexts:
                    bot.openai_conversation_contexts = {}
                
                bot.openai_conversation_contexts[str(user_id)] = response_id
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–ª—è SQLAlchemy
                flag_modified(bot, 'openai_conversation_contexts')
                
                await session.commit()
                
                logger.info("‚úÖ Conversation response_id saved successfully", 
                           bot_id=bot_id, 
                           user_id=user_id,
                           total_conversations=len(bot.openai_conversation_contexts))
                
                return True
                
        except Exception as e:
            logger.error("üí• Error saving conversation response_id", 
                        bot_id=bot_id, 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    async def clear_conversation_response_id(self, bot_id: str, user_id: int) -> bool:
        """
        ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∏—Ç—å response_id —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üßπ Clearing conversation response_id", 
                           bot_id=bot_id, user_id=user_id)
                
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    logger.warning("‚ö†Ô∏è Bot not found for response_id clear", bot_id=bot_id)
                    return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –±–æ—Ç–∞ –Ω–µ—Ç
                
                if not bot.openai_conversation_contexts:
                    logger.info("‚ÑπÔ∏è No conversation contexts to clear", bot_id=bot_id)
                    return True
                
                user_key = str(user_id)
                if user_key in bot.openai_conversation_contexts:
                    del bot.openai_conversation_contexts[user_key]
                    flag_modified(bot, 'openai_conversation_contexts')
                    await session.commit()
                    
                    logger.info("‚úÖ Conversation response_id cleared successfully", 
                               bot_id=bot_id, 
                               user_id=user_id,
                               remaining_conversations=len(bot.openai_conversation_contexts))
                else:
                    logger.info("‚ÑπÔ∏è No response_id found for user", 
                               bot_id=bot_id, user_id=user_id)
                
                return True
                
        except Exception as e:
            logger.error("üí• Error clearing conversation response_id", 
                        bot_id=bot_id, 
                        user_id=user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    async def clear_all_conversation_response_ids(self, bot_id: str) -> bool:
        """
        ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ response_id –¥–ª—è –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üßπ Clearing all conversation response_ids", bot_id=bot_id)
                
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    logger.warning("‚ö†Ô∏è Bot not found for clearing all response_ids", bot_id=bot_id)
                    return True
                
                conversations_count = len(bot.openai_conversation_contexts) if bot.openai_conversation_contexts else 0
                
                bot.openai_conversation_contexts = {}
                flag_modified(bot, 'openai_conversation_contexts')
                await session.commit()
                
                logger.info("‚úÖ All conversation response_ids cleared", 
                           bot_id=bot_id, 
                           cleared_conversations=conversations_count)
                
                return True
                
        except Exception as e:
            logger.error("üí• Error clearing all conversation response_ids", 
                        bot_id=bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    async def get_openai_agent_config(self, assistant_id: str) -> Optional[Dict]:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Responses API
        
        Args:
            assistant_id: ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (openai_agent_id)
            
        Returns:
            dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üîç Getting OpenAI agent config for Responses API", 
                           assistant_id=assistant_id)
                
                result = await session.execute(
                    select(UserBot)
                    .where(UserBot.openai_agent_id == assistant_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    logger.warning("‚ùå No agent found with assistant_id", 
                                  assistant_id=assistant_id)
                    return None
                
                # ‚úÖ –§–û–†–ú–ò–†–£–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –î–õ–Ø RESPONSES API
                config = {
                    'bot_id': bot.bot_id,
                    'name': bot.openai_agent_name,
                    'system_prompt': bot.openai_agent_instructions,
                    'model': bot.openai_model or 'gpt-4o',
                    'settings': bot.openai_settings or {},
                    'temperature': bot.openai_settings.get('temperature', 0.7) if bot.openai_settings else 0.7,
                    'max_tokens': bot.openai_settings.get('max_tokens', 4000) if bot.openai_settings else 4000,
                    
                    # ‚úÖ RESPONSES API SPECIFIC SETTINGS
                    'store_conversations': bot.openai_store_conversations,
                    'conversation_retention': bot.openai_conversation_retention_days,
                    'enable_streaming': bot.openai_settings.get('enable_streaming', True) if bot.openai_settings else True,
                    
                    # ‚úÖ –í–°–¢–†–û–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
                    'enable_web_search': bot.openai_settings.get('enable_web_search', False) if bot.openai_settings else False,
                    'enable_code_interpreter': bot.openai_settings.get('enable_code_interpreter', False) if bot.openai_settings else False,
                    'enable_file_search': bot.openai_settings.get('enable_file_search', False) if bot.openai_settings else False,
                    'enable_image_generation': bot.openai_settings.get('enable_image_generation', False) if bot.openai_settings else False,
                    'computer_use_enabled': bot.openai_settings.get('computer_use_enabled', False) if bot.openai_settings else False,
                    
                    # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
                    'vector_store_ids': bot.openai_settings.get('vector_store_ids', []) if bot.openai_settings else [],
                    'reasoning_effort': bot.openai_settings.get('reasoning_effort', 'medium') if bot.openai_settings else 'medium',
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    'created_at': bot.created_at.isoformat() if bot.created_at else None,
                    'updated_at': bot.updated_at.isoformat() if bot.updated_at else None,
                    'is_active': bot.ai_assistant_enabled
                }
                
                logger.info("‚úÖ OpenAI agent config retrieved for Responses API", 
                           assistant_id=assistant_id,
                           agent_name=config['name'],
                           model=config['model'],
                           tools_enabled=sum([
                               config.get('enable_web_search', False),
                               config.get('enable_code_interpreter', False), 
                               config.get('enable_file_search', False),
                               config.get('enable_image_generation', False),
                               config.get('computer_use_enabled', False)
                           ]))
                
                return config
                
        except Exception as e:
            logger.error("üí• Error getting OpenAI agent config", 
                        assistant_id=assistant_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return None

    async def get_active_conversations_count(self, bot_id: str) -> int:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                result = await session.execute(
                    select(UserBot.openai_conversation_contexts)
                    .where(UserBot.bot_id == bot_id)
                )
                
                contexts = result.scalar_one_or_none()
                count = len(contexts) if contexts else 0
                
                logger.info("üìä Active conversations count", 
                           bot_id=bot_id, 
                           active_conversations=count)
                
                return count
                
        except Exception as e:
            logger.error("üí• Error getting active conversations count", 
                        bot_id=bot_id,
                        error=str(e))
            return 0

    async def get_conversation_users(self, bot_id: str) -> List[int]:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ user_id —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                result = await session.execute(
                    select(UserBot.openai_conversation_contexts)
                    .where(UserBot.bot_id == bot_id)
                )
                
                contexts = result.scalar_one_or_none()
                if not contexts:
                    return []
                
                user_ids = [int(user_id) for user_id in contexts.keys()]
                
                logger.info("üë• Conversation users retrieved", 
                           bot_id=bot_id, 
                           users_count=len(user_ids))
                
                return user_ids
                
        except Exception as e:
            logger.error("üí• Error getting conversation users", 
                        bot_id=bot_id,
                        error=str(e))
            return []

    async def update_agent_responses_settings(self, bot_id: str, settings: Dict) -> bool:
        """
        ‚úÖ –ù–û–í–û–ï: –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Responses API –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                logger.info("üîß Updating agent Responses API settings", 
                           bot_id=bot_id,
                           settings_keys=list(settings.keys()))
                
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    logger.error("‚ùå Bot not found for settings update", bot_id=bot_id)
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if not bot.openai_settings:
                    bot.openai_settings = {}
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                allowed_settings = [
                    'enable_web_search', 'enable_code_interpreter', 'enable_file_search',
                    'enable_image_generation', 'computer_use_enabled', 'vector_store_ids',
                    'reasoning_effort', 'temperature', 'max_tokens', 'enable_streaming',
                    'conversation_retention', 'store_conversations'
                ]
                
                updated_keys = []
                for key, value in settings.items():
                    if key in allowed_settings:
                        bot.openai_settings[key] = value
                        updated_keys.append(key)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'conversation_retention' in settings:
                    bot.openai_conversation_retention_days = settings['conversation_retention']
                if 'store_conversations' in settings:
                    bot.openai_store_conversations = settings['store_conversations']
                
                flag_modified(bot, 'openai_settings')
                await session.commit()
                
                logger.info("‚úÖ Agent Responses API settings updated", 
                           bot_id=bot_id,
                           updated_keys=updated_keys)
                
                return True
                
        except Exception as e:
            logger.error("üí• Error updating agent Responses API settings", 
                        bot_id=bot_id,
                        error=str(e))
            return False

    async def get_responses_api_stats(self, bot_id: str) -> Dict:
        """
        ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Responses API
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        try:
            async with self.db.get_session() as session:
                from database.models import UserBot
                
                result = await session.execute(
                    select(UserBot).where(UserBot.bot_id == bot_id)
                )
                
                bot = result.scalar_one_or_none()
                if not bot:
                    return {}
                
                settings = bot.openai_settings or {}
                
                stats = {
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    'bot_id': bot_id,
                    'agent_name': bot.openai_agent_name,
                    'model': bot.openai_model,
                    'is_active': bot.ai_assistant_enabled,
                    
                    # Responses API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    'using_responses_api': bot.openai_use_responses_api,
                    'store_conversations': bot.openai_store_conversations,
                    'conversation_retention_days': bot.openai_conversation_retention_days,
                    'enable_streaming': settings.get('enable_streaming', True),
                    
                    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
                    'active_conversations': len(bot.openai_conversation_contexts) if bot.openai_conversation_contexts else 0,
                    
                    # –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    'enabled_tools': {
                        'web_search': settings.get('enable_web_search', False),
                        'code_interpreter': settings.get('enable_code_interpreter', False),
                        'file_search': settings.get('enable_file_search', False),
                        'image_generation': settings.get('enable_image_generation', False),
                        'computer_use': settings.get('computer_use_enabled', False)
                    },
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    'vector_stores_count': len(settings.get('vector_store_ids', [])),
                    'reasoning_effort': settings.get('reasoning_effort', 'medium'),
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    'total_requests': settings.get('total_requests', 0),
                    'successful_requests': settings.get('successful_requests', 0),
                    'failed_requests': settings.get('failed_requests', 0),
                    'last_request_at': settings.get('last_request_at'),
                    
                    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    'created_at': bot.created_at.isoformat() if bot.created_at else None,
                    'updated_at': bot.updated_at.isoformat() if bot.updated_at else None,
                    'last_usage_at': bot.openai_last_usage_at.isoformat() if bot.openai_last_usage_at else None
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º success rate
                total_requests = stats['total_requests']
                if total_requests > 0:
                    stats['success_rate'] = (stats['successful_requests'] / total_requests) * 100
                else:
                    stats['success_rate'] = 0.0
                
                logger.info("üìä Responses API stats retrieved", 
                           bot_id=bot_id,
                           active_conversations=stats['active_conversations'],
                           enabled_tools_count=sum(stats['enabled_tools'].values()),
                           success_rate=stats['success_rate'])
                
                return stats
                
        except Exception as e:
            logger.error("üí• Error getting Responses API stats", 
                        bot_id=bot_id,
                        error=str(e))
            return {}
